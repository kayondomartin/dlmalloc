cscope 15 $HOME/dlmalloc/src               0000679358
	@/home/iybang/dlmalloc/src/.#os.c

	@/home/iybang/dlmalloc/src/assert.h

1 #i‚de‡
MALLOC_ASSERT_H


2 
	#MALLOC_ASSERT_H


	)

4 
	~<°dlib.h
>

6 #ifde‡
DEBUG


7 
	#dl_as£π
(
x
)\

9 i‡(!(
x
))\

10 
	`ab‹t
();\

11 }

	)

13 #i‚de‡
dl_as£π


14 
	#dl_as£π
(
x
)

	)

	@/home/iybang/dlmalloc/src/check.h

1 #i‚de‡
MALLOC_CHECK_H


2 
	#MALLOC_CHECK_H


	)

32 #i‡!
INSECURE


35 
	#ok_addªss
(
M
, 
a
Ë((*Ë◊Ë>(M)->
Àa°_addr
)

	)

37 
	#ok_√xt
(
p
, 
n
Ë((*Ë’Ë< (*Ë“))

	)

39 
	#ok_öu£
(
p
Ë
	`is_öu£
’)

	)

41 
	#ok_¥ev_öu£
(
p
Ë
	`¥ev_öu£
’)

	)

45 
	#ok_addªss
(
M
, 
a
Ë(1)

	)

46 
	#ok_√xt
(
b
, 
n
Ë(1)

	)

47 
	#ok_öu£
(
p
Ë(1)

	)

48 
	#ok_¥ev_öu£
(
p
Ë(1)

	)

52 #i‡(
FOOTERS
 && !
INSECURE
)

55 
	#ok_magic
(
M
Ë((M)->
magic
 =
∑øms
.magic)

	)

59 
	#ok_magic
(
M
Ë(1)

	)

	@/home/iybang/dlmalloc/src/chunk.c

1 
	~<°dlib.h
>

3 
	~"as£π.h
"

4 
	~"check.h
"

5 
	~"chunk.h
"

6 
	~"c⁄fig.h
"

7 
	~"debug.h
"

8 
	~"îr‹.h
"

9 
	~"os.h
"

10 
	~"£gmít.h
"

11 
	~"°©e.h
"

14 
	$ö£π_chunk
(
mÆloc_°©e
 *
°©e
, 
mÆloc_chunk
 *
chunk
, 
size_t
 
size
) {

15 i‡(
	`is_smÆl
(
size
)) {

16 
	`ö£π_smÆl_chunk
(
°©e
, 
chunk
, 
size
);

19 
	`ö£π_œrge_chunk
(
°©e
, (
mÆloc_åì_chunk
 *Ë
chunk
, 
size
);

21 
	}
}

23 
	$u∆ök_chunk
(
mÆloc_°©e
 *
°©e
, 
mÆloc_chunk
 *
chunk
, 
size_t
 
size
) {

24 i‡(
	`is_smÆl
(
size
)) {

25 
	`u∆ök_smÆl_chunk
(
°©e
, 
chunk
, 
size
);

28 
	`u∆ök_œrge_chunk
(
°©e
, (
mÆloc_åì_chunk
 *Ë
chunk
);

30 
	}
}

33 
	$ö£π_smÆl_chunk
(
mÆloc_°©e
 *
°©e
, 
mÆloc_chunk
 *
chunk
, 
size_t
 
size
) {

34 
bö_ödex_t
 
ödex
 = 
	`smÆl_ödex
(
size
);

35 
mÆloc_chunk
 *
b
 = 
	`smÆl_bö_©
(
°©e
, 
ödex
);

36 
mÆloc_chunk
 *
f
 = 
b
;

37 
	`dl_as£π
(
size
 >
MIN_CHUNK_SIZE
);

38 i‡(!
	`smÆl_m≠_is_m¨ked
(
°©e
, 
ödex
)) {

39 
	`m¨k_smÆl_m≠
(
°©e
, 
ödex
);

41 i‡(
	`likñy
(
	`ok_addªss
(
°©e
, 
b
->
fd
))) {

42 
f
 = 
b
->
fd
;

45 
	`c‹ru±i⁄_îr‹
(
°©e
);

47 
b
->
fd
 = 
chunk
;

48 
f
->
bk
 = 
chunk
;

49 
chunk
->
fd
 = 
f
;

50 
chunk
->
bk
 = 
b
;

51 
	}
}

54 
	$u∆ök_smÆl_chunk
(
mÆloc_°©e
 *
°©e
, 
mÆloc_chunk
 *
chunk
, 
size_t
 
size
) {

55 
mÆloc_chunk
 *
f
 = 
chunk
->
fd
;

56 
mÆloc_chunk
 *
b
 = 
chunk
->
bk
;

57 
bö_ödex_t
 
I
 = 
	`smÆl_ödex
(
size
);

58 
	`dl_as£π
(
chunk
 !
b
);

59 
	`dl_as£π
(
chunk
 !
f
);

60 
	`dl_as£π
(
	`chunk_size
(
chunk
Ë=
	`smÆl_ödex_to_size
(
I
));

61 i‡(
	`likñy
(
f
 =
	`smÆl_bö_©
(
°©e
, 
I
Ë|| (
	`ok_addªss
(°©e, fË&& f->
bk
 =
chunk
))) {

62 i‡(
b
 =
f
) {

63 
	`˛ór_smÆl_m≠
(
°©e
, 
I
);

65 i‡(
	`likñy
(
b
 =
	`smÆl_bö_©
(
°©e
, 
I
Ë|| (
	`ok_addªss
(°©e, bË&& b->
fd
 =
chunk
))) {

66 
f
->
bk
 = 
b
;

67 
b
->
fd
 = 
f
;

70 
	`c‹ru±i⁄_îr‹
(
°©e
);

74 
	`c‹ru±i⁄_îr‹
(
°©e
);

76 
	}
}

79 
	$u∆ök_fú°_smÆl_chunk
(
mÆloc_°©e
 *
°©e
, 
mÆloc_chunk
 *
b
, mÆloc_chunk *
chunk
, 
bö_ödex_t
 
ödex
) {

80 
mÆloc_chunk
 *
f
 = 
chunk
->
fd
;

81 
	`dl_as£π
(
chunk
 !
b
);

82 
	`dl_as£π
(
chunk
 !
f
);

83 
	`dl_as£π
(
	`chunk_size
(
chunk
Ë=
	`smÆl_ödex_to_size
(
ödex
));

84 i‡(
b
 =
f
) {

85 
	`˛ór_smÆl_m≠
(
°©e
, 
ödex
);

87 i‡(
	`likñy
(
	`ok_addªss
(
°©e
, 
f
Ë&& f->
bk
 =
chunk
)) {

88 
f
->
bk
 = 
b
;

89 
b
->
fd
 = 
f
;

92 
	`c‹ru±i⁄_îr‹
(
°©e
);

94 
	}
}

98 
	$ª∂a˚_dv
(
mÆloc_°©e
 *
°©e
, 
mÆloc_chunk
 *
chunk
, 
size_t
 
size
) {

99 
size_t
 
dv_size
 = 
°©e
->dv_size;

100 
	`dl_as£π
(
	`is_smÆl
(
dv_size
));

101 i‡(
dv_size
 != 0) {

102 
	`ö£π_smÆl_chunk
(
°©e
, sèã->
dv
, 
dv_size
);

104 
°©e
->
dv_size
 = 
size
;

105 
°©e
->
dv
 = 
chunk
;

106 
	}
}

109 
	$ö£π_œrge_chunk
(
mÆloc_°©e
 *
°©e
, 
mÆloc_åì_chunk
 *
chunk
, 
size_t
 
size
) {

110 
mÆloc_åì_chunk
 **
H
;

111 
bö_ödex_t
 
I
;

112 
	`compuã_åì_ödex
(
size
, 
I
);

113 
H
 = 
	`åì_bö_©
(
°©e
, 
I
);

114 
chunk
->
ödex
 = 
I
;

115 
chunk
->
chûd
[0] = chunk->child[1] = 0;

116 i‡(!
	`åì_m≠_is_m¨ked
(
°©e
, 
I
)) {

117 
	`m¨k_åì_m≠
(
°©e
, 
I
);

118 *
H
 = 
chunk
;

119 
chunk
->
∑ª¡
 = (
mÆloc_åì_chunk
 *Ë
H
;

120 
chunk
->
fd
 = chunk->
bk
 = chunk;

123 
mÆloc_åì_chunk
 *
T
 = *
H
;

124 
size_t
 
K
 = 
size
 << 
	`À·shi·_f‹_åì_ödex
(
I
);

126 i‡(
	`chunk_size
(
T
Ë!
size
) {

127 
mÆloc_åì_chunk
 **
C
 = &(
T
->
chûd
[(
K
 >> (
SIZE_T_BITSIZE
 - (
size_t
) 1)) & 1]);

128 
K
 <<= 1;

129 i‡(*
C
 != 0) {

130 
T
 = *
C
;

132 i‡(
	`likñy
(
	`ok_addªss
(
°©e
, 
C
))) {

133 *
C
 = 
chunk
;

134 
chunk
->
∑ª¡
 = 
T
;

135 
chunk
->
fd
 = chunk->
bk
 = chunk;

139 
	`c‹ru±i⁄_îr‹
(
°©e
);

144 
mÆloc_åì_chunk
 *
F
 = 
T
->
fd
;

145 i‡(
	`likñy
(
	`ok_addªss
(
°©e
, 
T
Ë&& ok_addªss(°©e, 
F
))) {

146 
T
->
fd
 = 
F
->
bk
 = 
chunk
;

147 
chunk
->
fd
 = 
F
;

148 
chunk
->
bk
 = 
T
;

149 
chunk
->
∑ª¡
 = 0;

153 
	`c‹ru±i⁄_îr‹
(
°©e
);

159 
	}
}

177 
	$u∆ök_œrge_chunk
(
mÆloc_°©e
 *
°©e
, 
mÆloc_åì_chunk
 *
chunk
) {

178 
mÆloc_åì_chunk
 *
XP
 = 
chunk
->
∑ª¡
;

179 
mÆloc_åì_chunk
 *
R
;

180 i‡(
chunk
->
bk
 != chunk) {

181 
mÆloc_åì_chunk
 *
F
 = 
chunk
->
fd
;

182 
R
 = 
chunk
->
bk
;

183 i‡(
	`likñy
(
	`ok_addªss
(
°©e
, 
F
Ë&& F->
bk
 =
chunk
 && 
R
->
fd
 == chunk)) {

184 
F
->
bk
 = 
R
;

185 
R
->
fd
 = 
F
;

188 
	`c‹ru±i⁄_îr‹
(
°©e
);

192 
mÆloc_åì_chunk
 **
RP
;

193 i‡(((
R
 = *(
RP
 = &(
chunk
->
chûd
[1]))) != 0) || ((R = *(RP = &(chunk->child[0]))) != 0)) {

194 
mÆloc_åì_chunk
 **
CP
;

195 (*(
CP
 = &(
R
->
chûd
[1])) != 0) || (*(CP = &(R->child[0])) != 0)) {

196 
R
 = *(
RP
 = 
CP
);

198 i‡(
	`likñy
(
	`ok_addªss
(
°©e
, 
RP
))) {

199 *
RP
 = 0;

202 
	`c‹ru±i⁄_îr‹
(
°©e
);

206 i‡(
XP
 != 0) {

207 
mÆloc_åì_chunk
 **
H
 = 
	`åì_bö_©
(
°©e
, 
chunk
->
ödex
);

208 i‡(
chunk
 =*
H
) {

209 i‡((*
H
 = 
R
) == 0) {

210 
	`˛ór_åì_m≠
(
°©e
, 
chunk
->
ödex
);

213 i‡(
	`likñy
(
	`ok_addªss
(
°©e
, 
XP
))) {

214 i‡(
XP
->
chûd
[0] =
chunk
) {

215 
XP
->
chûd
[0] = 
R
;

218 
XP
->
chûd
[1] = 
R
;

222 
	`c‹ru±i⁄_îr‹
(
°©e
);

224 i‡(
R
 != 0) {

225 i‡(
	`likñy
(
	`ok_addªss
(
°©e
, 
R
))) {

226 
mÆloc_åì_chunk
 *
C0
, *
C1
;

227 
R
->
∑ª¡
 = 
XP
;

228 i‡((
C0
 = 
chunk
->
chûd
[0]) != 0) {

229 i‡(
	`likñy
(
	`ok_addªss
(
°©e
, 
C0
))) {

230 
R
->
chûd
[0] = 
C0
;

231 
C0
->
∑ª¡
 = 
R
;

234 
	`c‹ru±i⁄_îr‹
(
°©e
);

237 i‡((
C1
 = 
chunk
->
chûd
[1]) != 0) {

238 i‡(
	`likñy
(
	`ok_addªss
(
°©e
, 
C1
))) {

239 
R
->
chûd
[1] = 
C1
;

240 
C1
->
∑ª¡
 = 
R
;

243 
	`c‹ru±i⁄_îr‹
(
°©e
);

248 
	`c‹ru±i⁄_îr‹
(
°©e
);

252 
	}
}

258 
	$di•o£_chunk
(
mÆloc_°©e
 *
°©e
, 
mÆloc_chunk
 *
chunk
, 
size_t
 
size
) {

260 
‰ì_°©e
 = 0;

261 
size_t
 
√w_èg
 = 
	`gë_chunk_èg
(
chunk
Ë+ 
TAG_OFFSET
;

263 if(
√w_èg
 =
TAG_BITS
){

264 
	`bœckli°_chunk
(
°©e
, 
chunk
);

268 
mÆloc_chunk
* 
ba£
 = 
chunk
;

269 
size_t
 
csize
 = 
size
;

270 
mÆloc_chunk
 *
√xt
 = 
	`is_√xt_exhau°ed
(
chunk
)? 0: 
	`chunk_∂us_off£t
(chunk, 
size
);

271 i‡(!
	`¥ev_öu£
(
chunk
)) {

272 
size_t
 
¥ev_size
 = 
	`gë_¥ev_size
(
chunk
);

273 i‡(
	`is_mm≠≥d
(
chunk
)) {

274 
size
 +
¥ev_size
 + 
MMAP_FOOT_PAD
;

275 i‡(
	`ˇŒ_munm≠
((*Ë
chunk
 - 
¥ev_size
, 
size
) == 0) {

276 
°©e
->
foŸ¥öt
 -
size
;

280 
mÆloc_chunk
 *
¥ev
 = 
	`is_¥ev_exhau°ed
(
chunk
)? 0: 
	`chunk_möus_off£t
(chunk, 
¥ev_size
);

282 i‡–
¥ev
 !0 && 
	`likñy
(
	`ok_addªss
(
°©e
,Örev))) {

283 
size_t
 
¥ev_èg
 = 
	`gë_chunk_èg
(
¥ev
);

284 
√w_èg
 = 
	`èg_max
“ew_èg, 
	`gë_chunk_èg
(
¥ev
));

285 
size
 +
¥ev_size
;

286 
chunk
 = 
¥ev
;

287 i‡(
¥ev
 !
°©e
->
dv
) {

288 
	`u∆ök_chunk
(
°©e
, 
¥ev
, 
¥ev_size
);

290 i‡(
√xt
 =0 || (“ext->
hód
 & 
INUSE_BITS
) == INUSE_BITS)) {

291 
	`£t_chunk_èg
(
chunk
, 
√w_èg
);

292 if(
¥ev_èg
 =
√w_èg
){

293 
	`mã_cﬁ‹_èg
(
ba£
, 
csize
, 
	`èg_to_öt
(
√w_èg
));

295 
	`mã_cﬁ‹_èg
(
chunk
, 
size
, 
	`èg_to_öt
(
√w_èg
));

298 
°©e
->
dv_size
 = 
size
;

299 
chunk
->
hód
 = 
size
| 
√w_èg
 | 
PREV_INUSE_BIT
;

300 if(
√xt
 == 0){

301 
chunk
->
¥ev_foŸ
 |
NEXT_EXH_BIT
;

303 
√xt
->
¥ev_foŸ
 = (√xt->¥ev_foŸ & 
NEXT_EXH_BIT
Ë| 
size
;

304 
√xt
->
hód
 &~
PREV_INUSE_BIT
;

309 
	`c‹ru±i⁄_îr‹
(
°©e
);

313 i‡(
√xt
 =0 || 
	`likñy
(
	`ok_addªss
(
°©e
,Çext))) {

314 i‡(
√xt
 !=0 && !
	`cuº_öu£
(next)) {

316 
size_t
 
√xt_èg
 = 
	`gë_chunk_èg
(
√xt
);

317 
size_t
 
nsize
 = 
	`chunk_size
(
√xt
);

318 if(
√xt_èg
 > 
√w_èg
){

319 
√w_èg
 = 
√xt_èg
;

320 }if(
√w_èg
 !
√xt_èg
){

321 
	`£t_chunk_èg
(
√xt
, 
√w_èg
);

324 if(!
	`cuº_öu£
(
chunk
)){

325 
size_t
 
¥ev_èg
 = 
	`gë_chunk_èg
(
chunk
);

326 
	`£t_chunk_èg
(
ba£
, 
√w_èg
);

327 if(
¥ev_èg
 =
√xt_èg
 &&Çext_èg =
√w_èg
){

328 
	`mã_cﬁ‹_èg
(
ba£
, 
csize
, 
	`èg_to_öt
(
√w_èg
));

329 }if(
¥ev_èg
 =
√w_èg
){

330 if(
√xt
 =
°©e
->
t›
){

331 
	`mã_cﬁ‹_èg
(
ba£
, 
°©e
->
t›_cﬁ‹ed_size
+
csize
, 
	`èg_to_öt
(
√w_èg
));

333 
	`mã_cﬁ‹_èg
(
ba£
, 
csize
+
nsize
, 
	`èg_to_öt
(
√w_èg
));

335 }if(
√w_èg
 =
√xt_èg
){

336 
	`mã_cﬁ‹_èg
(
chunk
, 
size
, 
	`èg_to_öt
(
√w_èg
));

338 if(
√xt
 =
°©e
->
t›
){

339 
	`mã_cﬁ‹_èg
(
chunk
, 
°©e
->
t›_cﬁ‹ed_size
 + 
size
, 
	`èg_to_öt
(
√w_èg
));

341 
	`mã_cﬁ‹_èg
(
chunk
, 
size
+
nsize
, 
	`èg_to_öt
(
√w_èg
));

344 
	`£t_chunk_èg
(
ba£
, 
√w_èg
);

346 if(
√w_èg
 =
√xt_èg
){

347 
	`mã_cﬁ‹_èg
(
chunk
, 
size
, 
	`èg_to_öt
(
√w_èg
));

348 }if(
√xt
 =
°©e
->
t›
){

349 
	`mã_cﬁ‹_èg
(
chunk
, 
°©e
->
t›_cﬁ‹ed_size
 + 
size
, 
	`èg_to_öt
(
√w_èg
));

351 
	`mã_cﬁ‹_èg
(
chunk
, 
size
+
nsize
, 
	`èg_to_öt
(
√w_èg
));

355 i‡(
√xt
 =
°©e
->
t›
) {

356 
size_t
 
tsize
 = 
°©e
->
t›_size
 +
size
;

357 
°©e
->
t›_cﬁ‹ed_size
 +
size
;

358 
°©e
->
t›
 = 
chunk
;

359 
chunk
->
hód
 = 
tsize
 | 
PREV_INUSE_BIT
 | 
√w_èg
;

360 i‡(
chunk
 =
°©e
->
dv
) {

361 
°©e
->
dv
 = 0;

362 
°©e
->
dv_size
 = 0;

366 i‡(
√xt
 =
°©e
->
dv
) {

367 
size_t
 
dsize
 = 
°©e
->
dv_size
 +
size
;

368 
°©e
->
dv
 = 
chunk
;

369 
chunk
->
¥ev_foŸ
 |(
√xt
->¥ev_foŸ & 
NEXT_EXH_BIT
);

370 
	`£t_size_™d_¥ev_öu£_of_‰ì_chunk
(
chunk
, 
dsize
);

371 
	`£t_chunk_èg
(
chunk
, 
√w_èg
);

375 
size
 +
nsize
;

376 
chunk
->
¥ev_foŸ
 |(
√xt
->¥ev_foŸ & 
NEXT_EXH_BIT
);

377 
	`u∆ök_chunk
(
°©e
, 
√xt
, 
nsize
);

378 
	`£t_size_™d_¥ev_öu£_of_‰ì_chunk
(
chunk
, 
size
);

379 
	`£t_chunk_èg
(
chunk
, 
√w_èg
);

380 i‡(
chunk
 =
°©e
->
dv
) {

381 
°©e
->
dv_size
 = 
size
;

387 if(!
	`cuº_öu£
(
chunk
)){

388 
size_t
 
¥ev_èg
 = 
	`gë_chunk_èg
(
chunk
);

389 if(
√w_èg
 =
¥ev_èg
){

390 
	`mã_cﬁ‹_èg
(
ba£
, 
csize
, 
	`èg_to_öt
(
√w_èg
));

392 
	`mã_cﬁ‹_èg
(
chunk
, 
size
, 
	`èg_to_öt
(
√w_èg
));

394 
	`£t_chunk_èg
(
ba£
, 
√w_èg
);

396 
	`mã_cﬁ‹_èg
(
chunk
, 
size
, 
	`èg_to_öt
(
√w_èg
));

398 
chunk
->
hód
 = 
√w_èg
 | 
size
 | 
PREV_INUSE_BIT
;

399 if(
√xt
 ==0){

400 
chunk
->
¥ev_foŸ
 |
NEXT_EXH_BIT
;

402 
√xt
->
¥ev_foŸ
 = (√xt->¥ev_foŸ & 
NEXT_EXH_BIT
)|
size
;

403 
√xt
->
hód
 &~
PREV_INUSE_BIT
;

406 
	`ö£π_chunk
(
°©e
, 
chunk
, 
size
);

409 
	`c‹ru±i⁄_îr‹
(
°©e
);

411 
	}
}

	@/home/iybang/dlmalloc/src/chunk.h

1 #i‚de‡
MALLOC_CHUNK_H


2 
	#MALLOC_CHUNK_H


	)

4 
	~<sys/ty≥s.h
>

6 
	~"c⁄fig.h
"

7 
	~"tmã.h
"

9 
	#CHUNK_ALIGN_MASK
 (
MALLOC_ALIGNMENT
 - ((
size_t
Ë1))

	)

13 
ölöe
 
	$is_Æig√d
(*
p
) {

14  ((
size_t
Ë
p
 & 
CHUNK_ALIGN_MASK
) == 0;

15 
	}
}

18 
ölöe
 
size_t
 
	$Æign_off£t
(*
p
) {

19  ((
size_t
Ë
p
 & 
CHUNK_ALIGN_MASK
) == 0

21 : (
MALLOC_ALIGNMENT
 - ((
size_t
Ë
p
 & 
CHUNK_ALIGN_MASK
)) & CHUNK_ALIGN_MASK;

22 
	}
}

29 
	#TOP_FOOT_SIZE
 \

30 (
	`Æign_off£t
(
	`chunk_to_mem
(0)Ë+ 
	`∑d_ªque°
((
mÆloc_£gmít
)Ë+ 
MIN_CHUNK_SIZE
)

	)

32 
	s™y_chunk
 {

34 
size_t
 
	m¥ev_foŸ
;

35 
size_t
 
	mhód
;

44 
	#PREV_INUSE_BIT
 ((
size_t
Ë1)

	)

45 
	#CURR_INUSE_BIT
 ((
size_t
Ë2)

	)

46 
	#INUSE_BITS
 (
PREV_INUSE_BIT
 | 
CURR_INUSE_BIT
)

	)

50 
	#TAG_MASK
 ((
size_t
)-1 >> 4)

	)

51 
	#TAG_BITS
 ~((
size_t
)
TAG_MASK
)

	)

52 
	#TAG_OFFSET
 (
TAG_MASK
 + 1U)

	)

53 
	#FLAG_BITS
 (
PREV_INUSE_BIT
 | 
CURR_INUSE_BIT
)

	)

54 
	#SIZE_BITS
 (
TAG_MASK
 & ~
FLAG_BITS
)

	)

55 
	#TAG_SHIFT
 ((((
size_t
))-1Ë<< 3)

	)

56 
	#PREV_EXH_BIT
 ((
size_t
)1)

	)

57 
	#NEXT_EXH_BIT
 ((
size_t
)2)

	)

58 
	#NEXT_PEN_BIT
 ((
size_t
)4)

	)

59 
	#EXHAUSTION_BITS
 (
NEXT_PEN_BIT
 | 
NEXT_EXH_BIT
 | 
PREV_EXH_BIT
)

	)

63 
	#FENCEPOST_HEAD
 (
INUSE_BITS
 | (
size_t
))

	)

65 
ölöe
 
size_t
 
	$chunk_size
(*
chunk
) {

66  ((
™y_chunk
 *Ë
chunk
)->
hód
 & 
SIZE_BITS
;

67 
	}
}

70 
ölöe
 
size_t
 
	$gë_¥ev_size
(* 
p
){

71  ((
™y_chunk
*)
p
)->
¥ev_foŸ
 & ~
EXHAUSTION_BITS
;

72 
	}
}

74 
ölöe
 
size_t
 
	$gë_foŸ
(*
chunk
, 
size_t
 
size
) {

75  ((
™y_chunk
 *Ë((*Ë
chunk
 + 
size
))->
¥ev_foŸ
;

76 
	}
}

78 
ölöe
 
	$£t_foŸ
(*
chunk
, 
size_t
 
size
) {

79 if((((
™y_chunk
*)
chunk
)->
¥ev_foŸ
 & 
NEXT_EXH_BIT
) != NEXT_EXH_BIT){

80 
™y_chunk
* 
√xt
 = (™y_chunk*)((*)
chunk
 + 
size
);

81 
√xt
->
¥ev_foŸ
 = (√xt->¥ev_foŸ & 
EXHAUSTION_BITS
Ë| 
size
;

83 
	}
}

85 
ölöe
 
	$cuº_öu£
(*
chunk
) {

86  ((
™y_chunk
 *Ë
chunk
)->
hód
 & 
CURR_INUSE_BIT
;

87 
	}
}

89 
ölöe
 
	$¥ev_öu£
(*
chunk
) {

90  ((
™y_chunk
 *Ë
chunk
)->
hód
 & 
PREV_INUSE_BIT
;

91 
	}
}

93 
ölöe
 
	$is_öu£
(*
chunk
) {

94  (((
™y_chunk
 *Ë
chunk
)->
hód
 & 
FLAG_BITS
Ë!
PREV_INUSE_BIT
;

95 
	}
}

97 
ölöe
 
	$is_mm≠≥d
(*
chunk
) {

98  (((
™y_chunk
 *Ë
chunk
)->
hód
 & 
INUSE_BITS
) == 0;

99 
	}
}

101 
ölöe
 
	$˛ór_¥ev_öu£
(*
chunk
) {

102 ((
™y_chunk
 *Ë
chunk
)->
hód
 &~
PREV_INUSE_BIT
;

103 
	}
}

106 
ölöe
 
	$£t_size_™d_¥ev_öu£_of_‰ì_chunk
(*
chunk
, 
size_t
 
size
) {

107 ((
™y_chunk
 *Ë
chunk
)->
hód
 = (((™y_chunk*)chunk)->hód & 
TAG_BITS
Ë| 
size
 | 
PREV_INUSE_BIT
;

108 
	`£t_foŸ
(
chunk
, 
size
);

109 
	}
}

112 
ölöe
 
	$£t_‰ì_wôh_¥ev_öu£
(*
chunk
, 
size_t
 
size
, *
n
) {

113 
	`˛ór_¥ev_öu£
(
n
);

114 
	`£t_size_™d_¥ev_öu£_of_‰ì_chunk
(
chunk
, 
size
);

115 
	}
}

254 
	smÆloc_chunk
 {

255 
size_t
 
	m¥ev_foŸ
;

256 
size_t
 
	mhód
;

257 
mÆloc_chunk
 *
	mfd
;

258 
mÆloc_chunk
 *
	mbk
;

261 
	tbö_ödex_t
;

262 
	tbö_m≠_t
;

263 
	tÊag_t
;

267 
	#MALLOC_CHUNK_SIZE
 ((
mÆloc_chunk
))

	)

269 #i‡
FOOTERS


270 
	#CHUNK_OVERHEAD
 ((
size_t
Ë* 2)

	)

272 
	#CHUNK_OVERHEAD
 ((
size_t
Ë* 2)

	)

276 
	#MMAP_CHUNK_OVERHEAD
 ((
size_t
Ë* 2)

	)

278 
	#MMAP_FOOT_PAD
 ((
size_t
Ë* 4)

	)

281 
	#MIN_CHUNK_SIZE
 ((
MALLOC_CHUNK_SIZE
 + 
CHUNK_ALIGN_MASK
Ë& ~CHUNK_ALIGN_MASK)

	)

284 
ölöe
 *
	$chunk_to_mem
(*
p
) {

285  (*Ë((*Ë
p
 + (
size_t
) * 2);

286 
	}
}

288 
ölöe
 
mÆloc_chunk
 *
	$mem_to_chunk
(*
p
) {

289  (
mÆloc_chunk
 *Ë((*Ë
p
 - (
size_t
) * 2);

290 
	}
}

293 
ölöe
 
mÆloc_chunk
 *
	$Æign_as_chunk
(*
p
) {

294  (
mÆloc_chunk
 *Ë(
p
 + 
	`Æign_off£t
(
	`chunk_to_mem
(p)));

295 
	}
}

298 
	#MAX_REQUEST
 ((-
MIN_CHUNK_SIZE
Ë<< 2)

	)

299 
	#MIN_REQUEST
 (
MIN_CHUNK_SIZE
 - 
CHUNK_OVERHEAD
 - (
size_t
Ë1)

	)

302 
ölöe
 
size_t
 
	$∑d_ªque°
(
size_t
 
ªq
) {

303  (
ªq
 + 
CHUNK_OVERHEAD
 + 
CHUNK_ALIGN_MASK
) & ~CHUNK_ALIGN_MASK;

304 
	}
}

307 
ölöe
 
size_t
 
	$ªque°_to_size
(
size_t
 
ªq
) {

308  
ªq
 < 
MIN_REQUEST
 ? 
MIN_CHUNK_SIZE
 : 
	`∑d_ªque°
(req);

309 
	}
}

312 
ölöe
 
mÆloc_chunk
 *
	$chunk_∂us_off£t
(*
chunk
, 
size_t
 
size
) {

313  (
mÆloc_chunk
 *Ë(((*Ë
chunk
Ë+ 
size
);

314 
	}
}

316 
ölöe
 
mÆloc_chunk
 *
	$chunk_möus_off£t
(*
chunk
, 
size_t
 
size
) {

317  (
mÆloc_chunk
 *Ë(((*Ë
chunk
Ë- 
size
);

318 
	}
}

321 
ölöe
 
mÆloc_chunk
 *
	$√xt_chunk
(*
chunk
) {

322  (
mÆloc_chunk
 *Ë(((*Ë
chunk
Ë+ (((
™y_chunk
 *Ëchunk)->
hód
 & 
SIZE_BITS
));

323 
	}
}

325 
ölöe
 
mÆloc_chunk
 *
	$¥ev_chunk
(*
chunk
) {

326  (
mÆloc_chunk
 *Ë(((*Ë
chunk
Ë- 
	`gë_¥ev_size
(((
™y_chunk
 *) chunk)));

327 
	}
}

330 
ölöe
 
size_t
 
	$ovîhód_f‹
(*
chunk
) {

331  
	`is_mm≠≥d
(
chunk
Ë? 
MMAP_CHUNK_OVERHEAD
 : 
CHUNK_OVERHEAD
;

332 
	}
}

335 
ölöe
 
	$ˇŒoc_mu°_˛ór
(*
chunk
) {

336  !
	`is_mm≠≥d
(
chunk
);

337 
	}
}

341 
	gmÆloc_°©e
;

343 #i‡!
FOOTERS


345 
ölöe
 
	$m¨k_öu£_foŸ
(
mÆloc_°©e
 *
°©e
, *
chunk
, 
size_t
 
size
) {

346 (Ë
°©e
;

347 (Ë
chunk
;

348 (Ë
size
;

349 
	}
}

354 
ölöe
 
	$£t_öu£
(
mÆloc_°©e
 *
°©e
, *
chunk
, 
size_t
 
size
) {

355 (Ë
°©e
;

356 ((
™y_chunk
 *Ë
chunk
)->
hód
 = (((™y_chunk *Ëchunk)->hód & 
PREV_INUSE_BIT
Ë| 
size
 | 
CURR_INUSE_BIT
;

357 ((
mÆloc_chunk
 *Ë(((*Ë
chunk
Ë+ 
size
))->
hód
 |
PREV_INUSE_BIT
;

358 
	}
}

360 
ölöe
 
is_√xt_exhau°ed
(
mÆloc_chunk
* 
p
);

363 
ölöe
 
	$£t_öu£_™d_¥ev_öu£
(
mÆloc_°©e
 *
°©e
, *
chunk
, 
size_t
 
size
) {

364 (Ë
°©e
;

365 ((
™y_chunk
 *Ë
chunk
)->
hód
 = (((™y_chunk*Ëchunk)->hód & 
TAG_BITS
Ë| 
size
 | 
PREV_INUSE_BIT
 | 
CURR_INUSE_BIT
;

366 if(!
	`is_√xt_exhau°ed
(
chunk
))

367 ((
mÆloc_chunk
 *Ë(((*Ë
chunk
Ë+ 
size
))->
hód
 |
PREV_INUSE_BIT
;

368 
	}
}

371 
ölöe
 
	$£t_size_™d_¥ev_öu£_of_öu£_chunk
(
mÆloc_°©e
 *
°©e
, *
chunk
, 
size_t
 
size
) {

372 (Ë
°©e
;

373 ((
™y_chunk
 *Ë
chunk
)->
hód
 = (((™y_chunk*)chunk)->hód & 
TAG_BITS
Ë| 
size
 | 
INUSE_BITS
;

374 
	}
}

379 
	#m¨k_öu£_foŸ
(
M
, 
p
, 
s
)\

380 (((
mÆloc_chunk
 *)((*)(
p
Ë+ (
s
)))->
¥ev_foŸ
 = ((
size_t
)(
M
Ë^ 
∑øms
.
magic
))

	)

382 
	#gë_°©e_f‹
(
p
)\

383 ((
mÆloc_°©e
 *)(((
mÆloc_chunk
 *)((*)(
p
) +\

384 (
	`chunk_size
(
p
))))->
¥ev_foŸ
 ^ 
∑øms
.
magic
))

	)

386 
	#£t_öu£
(
M
, 
p
, 
s
)\

387 ((
p
)->
hód
 = ((’)->hód & 
PREV_INUSE_BIT
Ë| 
s
 | 
CURR_INUSE_BIT
),\

388 (((
mÆloc_chunk
 *)(((*)(
p
)Ë+ (
s
)))->
hód
 |
PREV_INUSE_BIT
), \

389 
	`m¨k_öu£_foŸ
(
M
,
p
,
s
))

	)

391 
	#£t_öu£_™d_¥ev_öu£
(
M
, 
p
, 
s
)\

392 ((
p
)->
hód
 = (
s
 | 
PREV_INUSE_BIT
 | 
CURR_INUSE_BIT
),\

393 (((
mÆloc_chunk
 *)(((*)(
p
)Ë+ (
s
)))->
hód
 |
PREV_INUSE_BIT
),\

394 
	`m¨k_öu£_foŸ
(
M
, 
p
, 
s
))

	)

396 
	#£t_size_™d_¥ev_öu£_of_öu£_chunk
(
M
, 
p
, 
s
)\

397 ((
p
)->
hód
 = (
s
 | 
PREV_INUSE_BIT
 | 
CURR_INUSE_BIT
),\

398 
	`m¨k_öu£_foŸ
(
M
, 
p
, 
s
))

	)

493 
	smÆloc_åì_chunk
 {

495 
size_t
 
	m¥ev_foŸ
;

496 
size_t
 
	mhód
;

497 
mÆloc_åì_chunk
 *
	mfd
;

498 
mÆloc_åì_chunk
 *
	mbk
;

500 
mÆloc_åì_chunk
 *
	mchûd
[2];

501 
mÆloc_åì_chunk
 *
	m∑ª¡
;

502 
bö_ödex_t
 
	mödex
;

506 
ölöe
 
mÆloc_åì_chunk
 *
	$À·mo°_chûd
(
mÆloc_åì_chunk
 *
t
) {

507  
t
->
chûd
[0] != 0 ?Å->child[0] :Å->child[1];

508 
	}
}

510 
	#compuã_åì_ödex
(
S
, 
I
)\

512 
X
 = 
S
 >> 
TREE_BIN_SHIFT
;\

513 i‡(
X
 == 0)\

514 
I
 = 0;\

515 i‡(
X
 > 0xFFFF)\

516 
I
 = 
NUM_TREE_BINS
-1;\

518 
K
 = (Ë(
X
)*
__CHAR_BIT__
 - 1 - (Ë
	`__buûtö_˛z
(X); \

519 
I
 = (
bö_ödex_t
Ë((
K
 << 1Ë+ ((
S
 >> (K + (
TREE_BIN_SHIFT
-1)) & 1)));\

521 }

	)

525 
ölöe
 
size_t
 
	$èg_max
(
size_t
 
x
, size_à
y
){

526  
x
 > 
y
? x: y;

527 
	}
}

529 
ölöe
 
u_öt8_t
 
	$èg_to_öt
(
size_t
 
èg
){

530  
èg
 >> 
TAG_SHIFT
;

531 
	}
}

533 
ölöe
 
size_t
 
	$öt_to_èg
(
u_öt8_t
 
öt_èg
){

534  
öt_èg
 << 
TAG_SHIFT
;

535 
	}
}

537 
ölöe
 
size_t
 
	$gë_chunk_èg
(
mÆloc_chunk
* 
p
){

538  
p
->
hód
 & 
TAG_BITS
;

539 
	}
}

541 
ölöe
 
	$is_exhau°ed
(
mÆloc_chunk
* 
p
){

542  ((
	`gë_chunk_èg
(
p
Ë+ 
TAG_OFFSET
Ë=
TAG_BITS
);

543 
	}
}

545 
ölöe
 
	$is_ußbÀ
(
mÆloc_chunk
* 
p
){

546  (
p
->
hód
 & 
TAG_BITS
) != TAG_BITS;

547 
	}
}

549 
ölöe
 
	$£t_chunk_èg
(
mÆloc_chunk
* 
p
, 
size_t
 
èg
){

550 
p
->
hód
 &
TAG_MASK
,Ö->hód |
èg
;

551 
	}
}

553 
ölöe
 
	$is_√xt_exhau°ed
(
mÆloc_chunk
* 
p
){

554  (
p
->
¥ev_foŸ
 & 
NEXT_EXH_BIT
) == NEXT_EXH_BIT;

555 
	}
}

557 
ölöe
 
	$is_¥ev_exhau°ed
(
mÆloc_chunk
* 
p
){

558  (
p
->
¥ev_foŸ
 & 
PREV_EXH_BIT
) == PREV_EXH_BIT;

559 
	}
}

561 
ölöe
 
	$is_√xt_≥ndög_dñëi⁄
(
mÆloc_chunk
* 
p
){

562  (
p
->
¥ev_foŸ
 & 
NEXT_PEN_BIT
) == NEXT_PEN_BIT;

563 
	}
}

568 
ö£π_chunk
(
mÆloc_°©e
 *, 
mÆloc_chunk
 *, 
size_t
);

570 
u∆ök_chunk
(
mÆloc_°©e
 *, 
mÆloc_chunk
 *, 
size_t
);

572 
ö£π_smÆl_chunk
(
mÆloc_°©e
 *, 
mÆloc_chunk
 *, 
size_t
);

574 
u∆ök_smÆl_chunk
(
mÆloc_°©e
 *, 
mÆloc_chunk
 *, 
size_t
);

576 
u∆ök_fú°_smÆl_chunk
(
mÆloc_°©e
 *, 
mÆloc_chunk
 *, mÆloc_chunk *, 
bö_ödex_t
);

578 
ª∂a˚_dv
(
mÆloc_°©e
 *, 
mÆloc_chunk
 *, 
size_t
);

580 
ö£π_œrge_chunk
(
mÆloc_°©e
 *, 
mÆloc_åì_chunk
 *, 
size_t
);

582 
u∆ök_œrge_chunk
(
mÆloc_°©e
 *, 
mÆloc_åì_chunk
 *);

584 
di•o£_chunk
(
mÆloc_°©e
 *, 
mÆloc_chunk
 *, 
size_t
);

	@/home/iybang/dlmalloc/src/config.h

1 #i‚de‡
MALLOC_CONFIG_H


2 
	#MALLOC_CONFIG_H


	)

4 
	~<sys/ty≥s.h
>

6 #i‚de‡
OVERRIDE


7 
	#OVERRIDE
 1

	)

10 #ifde‡
EMULATE_SBRK


14 #i‚de‡
USE_LOCKS


15 
	#USE_LOCKS
 1

	)

18 #i‚de‡
LOCK_AT_FORK


19 
	#LOCK_AT_FORK
 0

	)

22 #i‚de‡
FOOTERS


23 
	#FOOTERS
 0

	)

26 #i‚de‡
INSECURE


27 
	#INSECURE
 0

	)

31 
	#MAX_SIZE_T
 (~(
size_t
Ë0)

	)

32 
	#SIZE_T_BITSIZE
 ( (
size_t
Ë<< 3)

	)

34 #i‚de‡
MALLOC_ALIGNMENT


35 
	#MALLOC_ALIGNMENT
 ((
size_t
Ë(2 * (*)))

	)

38 #i‚de‡
MORECORE_CONTIGUOUS


39 
	#MORECORE_CONTIGUOUS
 1

	)

42 #i‚de‡
DEFAULT_GRANULARITY


43 #i‡(
MORECORE_CONTIGUOUS
)

44 
	#DEFAULT_GRANULARITY
 (0Ë

	)

46 
	#DEFAULT_GRANULARITY
 ((
size_t
Ë64U * (size_tË1024U)

	)

50 #i‚de‡
DEFAULT_TRIM_THRESHOLD


51 
	#DEFAULT_TRIM_THRESHOLD
 ((
size_t
Ë2U * (size_tË1024U * (size_tË1024U)

	)

54 #i‚de‡
DEFAULT_MMAP_THRESHOLD


55 
	#DEFAULT_MMAP_THRESHOLD
 ((
size_t
Ë256U * (size_tË1024U)

	)

58 #i‚de‡
MAX_RELEASE_CHECK_RATE


59 
	#MAX_RELEASE_CHECK_RATE
 4095

	)

62 
	#USE_MMAP_BIT
 (1U)

	)

64 
	#USE_LOCK_BIT
 (2U)

	)

66 
	#USE_NONCONTIGUOUS_BIT
 (4U)

	)

68 
	#EXTERN_BIT
 (8U)

	)

70 #i‡
deföed
(
__GNUC__
Ë|| deföed(
__˛™g__
)

71 
	#likñy
(
x
Ë
	`__buûtö_ex≥˘
((x),1)

	)

72 
	#u∆ikñy
(
x
Ë
	`__buûtö_ex≥˘
((x),0)

	)

74 
	#likñy
(
x
Ë(x)

	)

75 
	#u∆ikñy
(
x
Ë(x)

	)

78 #i‡
deföed
(
__GNUC__
Ë|| deföed(
__˛™g__
)

79 
	#dl_f‹˚_ölöe
 
__ölöe
 
	`__©åibuã__
((
Æways_ölöe
))

	)

81 
	#dl_f‹˚_ölöe
 
ölöe


	)

84 #i‡
deföed
(
__GNUC__
Ë|| deföed(
__˛™g__
)

85 
	#dl_exp‹t
 
	`__©åibuã__
((
	`visibûôy
 ("deÁu…")))

	)

87 
	#dl_exp‹t


	)

90 #i‡(
deföed
(
__GNUC__
Ë|| deföed(
__˛™g__
)Ë&& !deföed(
__MACH__
)

91 #i‡(
deföed
(
__GNUC__
) && __GNUC__ >= 9)

92 
	#DL_FORWARD
(
fun
Ë
	`__©åibuã__
((
	`Æüs
(#fun), 
u£d
, 
	`visibûôy
("deÁu…"), 
	`c›y
(fun)))

	)

94 
	#DL_FORWARD
(
fun
Ë
	`__©åibuã__
((
	`Æüs
(#fun), 
u£d
, 
	`visibûôy
("deÁu…")))

	)

96 
	#DL_FORWARD_1
(
fun
, 
x
Ë
	`DL_FORWARD
(fun)

	)

97 
	#DL_FORWARD_2
(
fun
, 
x
, 
y
Ë
	`DL_FORWARD
(fun)

	)

98 
	#DL_FORWARD_3
(
fun
, 
x
, 
y
, 
z
Ë
	`DL_FORWARD
(fun)

	)

99 
	#DL_FORWARD0_1
(
fun
, 
x
Ë
	`DL_FORWARD
(fun)

	)

100 
	#DL_FORWARD0_2
(
fun
, 
x
, 
y
Ë
	`DL_FORWARD
(fun)

	)

101 
	#DL_FORWARD0_3
(
fun
, 
x
, 
y
, 
z
Ë
	`DL_FORWARD
(fun)

	)

103 
	#DL_FORWARD_1
(
fun
, 
x
Ë{  
	`fun
(x); }

	)

104 
	#DL_FORWARD_2
(
fun
, 
x
, 
y
Ë{  
	`fun
(x, y); }

	)

105 
	#DL_FORWARD_3
(
fun
, 
x
, 
y
, 
z
Ë{  
	`fun
(x, y, z); }

	)

106 
	#DL_FORWARD0_1
(
fun
, 
x
Ë{ 
	`fun
(x); }

	)

107 
	#DL_FORWARD0_2
(
fun
, 
x
, 
y
Ë{ 
	`fun
(x, y); }

	)

108 
	#DL_FORWARD0_3
(
fun
, 
x
, 
y
, 
z
Ë{ 
	`fun
(x, y, z); }

	)

112 #i‚de‡
USE_DL_PREFIX


113 
	#USE_DL_PREFIX
 1

	)

117 #i‡!
USE_DL_PREFIX


118 
	#dl_ˇŒoc
 
ˇŒoc


	)

119 
	#dl_‰ì
 
‰ì


	)

120 
	#dl_mÆloc
 
mÆloc


	)

121 
	#dl_memÆign
 
memÆign


	)

122 
	#dl_posix_memÆign
 
posix_memÆign


	)

123 
	#dl_ªÆloc
 
ªÆloc


	)

124 
	#dl_ªÆloc_ö_∂a˚
 
ªÆloc_ö_∂a˚


	)

125 
	#dl_vÆloc
 
vÆloc


	)

126 
	#dl_pvÆloc
 
pvÆloc


127 
	#dl_mÆlöfo
 
mÆlöfo


	)

128 
	#dl_mÆl›t
 
mÆl›t


	)

129 
	#dl_mÆloc_åim
 
mÆloc_åim


	)

130 
	#dl_mÆloc_°©s
 
mÆloc_°©s


	)

131 
	#dl_mÆloc_ußbÀ_size
 
mÆloc_ußbÀ_size


	)

132 
	#dl_mÆloc_foŸ¥öt
 
mÆloc_foŸ¥öt


	)

133 
	#dl_mÆloc_max_foŸ¥öt
 
mÆloc_max_foŸ¥öt


	)

134 
	#dl_mÆloc_foŸ¥öt_limô
 
mÆloc_foŸ¥öt_limô


	)

135 
	#dl_mÆloc_£t_foŸ¥öt_limô
 
mÆloc_£t_foŸ¥öt_limô


	)

136 
	#dl_mÆloc_ö•e˘_Æl
 
mÆloc_ö•e˘_Æl


	)

137 
	#dl_ödïídít_ˇŒoc
 
ödïídít_ˇŒoc


	)

138 
	#dl_ödïídít_comÆloc
 
ödïídít_comÆloc


	)

139 
	#dl_bulk_‰ì
 
bulk_‰ì


	)

	@/home/iybang/dlmalloc/src/debug.c

1 
	~"as£π.h
"

2 
	~"check.h
"

3 
	~"c⁄fig.h
"

4 
	~"debug.h
"

5 
	~"öô.h
"

6 
	~"os.h
"

7 
	~"£gmít.h
"

9 #ifde‡
DEBUG


12 
ölöe
 
	$√xt_¥ev_öu£
(*
chunk
) {

13  (
	`√xt_chunk
(
chunk
)->
hód
Ë& 
PREV_INUSE_BIT
;

14 
	}
}

17 
	$check_™y_chunk
(
mÆloc_°©e
 *
°©e
, 
mÆloc_chunk
 *
chunk
) {

18 
	`dl_as£π
((
	`is_Æig√d
(
	`chunk_to_mem
(
chunk
))Ë|| (chunk->
hód
 =
FENCEPOST_HEAD
));

19 
	`dl_as£π
(
	`ok_addªss
(
°©e
, 
chunk
));

20 
	}
}

23 
	$check_t›_chunk
(
mÆloc_°©e
 *
°©e
, 
mÆloc_chunk
 *
chunk
) {

24 
mÆloc_£gmít
 *
•
 = 
	`£gmít_hﬁdög
(
°©e
, (*Ë
chunk
);

25 
size_t
 
sz
 = 
	`chunk_size
(
chunk
);

26 
	`dl_as£π
(
•
 != 0);

27 
	`dl_as£π
((
	`is_Æig√d
(
	`chunk_to_mem
(
chunk
))Ë|| (chunk->
hód
 =
FENCEPOST_HEAD
));

28 
	`dl_as£π
(
	`ok_addªss
(
°©e
, 
chunk
));

29 
	`dl_as£π
(
sz
 =
°©e
->
t›_size
);

30 
	`dl_as£π
(
sz
 > 0);

31 
	`dl_as£π
(
sz
 =((
•
->
ba£
 + sp->
size
Ë- (*Ë
chunk
Ë- 
TOP_FOOT_SIZE
);

32 
	`dl_as£π
(
	`¥ev_öu£
(
chunk
));

33 
	`dl_as£π
(!
	`¥ev_öu£
(
	`chunk_∂us_off£t
(
chunk
, 
sz
)));

34 
	}
}

37 
	$check_mm≠≥d_chunk
(
mÆloc_°©e
 *
°©e
, 
mÆloc_chunk
 *
chunk
) {

38 
size_t
 
sz
 = 
	`chunk_size
(
chunk
);

39 
size_t
 
Àn
 = 
sz
 + (
chunk
->
¥ev_foŸ
Ë+ 
MMAP_FOOT_PAD
;

40 
	`dl_as£π
(
	`is_mm≠≥d
(
chunk
));

41 
	`dl_as£π
(
	`u£_mm≠
(
°©e
));

42 
	`dl_as£π
((
	`is_Æig√d
(
	`chunk_to_mem
(
chunk
))Ë|| (chunk->
hód
 =
FENCEPOST_HEAD
));

43 
	`dl_as£π
(
	`ok_addªss
(
°©e
, 
chunk
));

44 
	`dl_as£π
(!
	`is_smÆl
(
sz
));

45 
	`dl_as£π
((
Àn
 & (
∑øms
.
∑ge_size
 - (
size_t
) 1)) == 0);

46 
	`dl_as£π
(
	`chunk_∂us_off£t
(
chunk
, 
sz
)->
hód
 =
FENCEPOST_HEAD
);

47 
	`dl_as£π
(
	`chunk_∂us_off£t
(
chunk
, 
sz
 + (
size_t
))->
hód
 == 0);

48 
	}
}

51 
	$check_öu£_chunk
(
mÆloc_°©e
 *
°©e
, 
mÆloc_chunk
 *
chunk
) {

52 
	`check_™y_chunk
(
°©e
, 
chunk
);

55 
	`dl_as£π
(
	`is_ußbÀ
(
chunk
))

58 
	`dl_as£π
(
	`is_öu£
(
chunk
));

59 
	`dl_as£π
(
	`is_√xt_exhau°ed
(
chunk
Ë|| 
	`√xt_¥ev_öu£
((
™y_chunk
 *) chunk));

61 
	`dl_as£π
(
	`is_mm≠≥d
(
chunk
Ë|| 
	`¥ev_öu£
(chunkË|| 
	`√xt_chunk
(
	`¥ev_chunk
(chunk)) == chunk);

62 i‡(
	`is_mm≠≥d
(
chunk
)) {

63 
	`check_mm≠≥d_chunk
(
°©e
, 
chunk
);

65 
	}
}

68 
	$check_mÆlo˚d_chunk
(
mÆloc_°©e
 *
°©e
, *
mem
, 
size_t
 
size
) {

69 i‡(
mem
 != 0) {

70 
mÆloc_chunk
 *
p
 = 
	`mem_to_chunk
(
mem
);

71 
size_t
 
sz
 = 
	`chunk_size
(
p
);

72 
	`check_öu£_chunk
(
°©e
, 
p
);

73 
	`dl_as£π
((
sz
 & 
CHUNK_ALIGN_MASK
) == 0);

74 
	`dl_as£π
(
sz
 >
MIN_CHUNK_SIZE
);

75 
	`dl_as£π
(
sz
 >
size
);

77 
	`dl_as£π
(
	`is_mm≠≥d
(
p
Ë|| 
sz
 < (
size
 + 
MIN_CHUNK_SIZE
));

79 
	}
}

82 
	$check_‰ì_chunk
(
mÆloc_°©e
 *
°©e
, 
mÆloc_chunk
 *
chunk
) {

83 
size_t
 
sz
 = 
	`chunk_size
(
chunk
);

84 
mÆloc_chunk
 *
√xt
 = 
	`chunk_∂us_off£t
(
chunk
, 
sz
);

85 
	`check_™y_chunk
(
°©e
, 
chunk
);

86 
	`dl_as£π
(!
	`is_öu£
(
chunk
));

87 
	`dl_as£π
(
	`is_√xt_exhau°ed
(
chunk
Ë|| !
	`√xt_¥ev_öu£
(chunk));

88 
	`dl_as£π
 (!
	`is_mm≠≥d
(
chunk
));

89 i‡(
chunk
 !
°©e
->
dv
 && chunk !°©e->
t›
) {

90 i‡(
sz
 >
MIN_CHUNK_SIZE
) {

91 
	`dl_as£π
((
sz
 & 
CHUNK_ALIGN_MASK
) == 0);

92 
	`dl_as£π
(
	`is_Æig√d
(
	`chunk_to_mem
(
chunk
)));

93 
	`dl_as£π
(
	`¥ev_öu£
(
chunk
));

94 #i‡
DBG


95 
	`dl_as£π
(
	`is_√xt_exhau°ed
(
chunk
Ë|| 
	`gë_¥ev_size
(
√xt
Ë=
sz
);

96 
	`dl_as£π
 (
√xt
 =
°©e
->
t›
 || 
	`is_√xt_exhau°ed
(
chunk
Ë|| 
	`is_öu£
(next));

98 
	`dl_as£π
(
chunk
->
fd
->
bk
 == chunk);

99 
	`dl_as£π
(
chunk
->
bk
->
fd
 == chunk);

102 
	`dl_as£π
(
sz
 =(
size_t
));

105 
	}
}

108 
	$check_åì
(
mÆloc_°©e
 *
°©e
, 
mÆloc_åì_chunk
 *
chunk
) {

109 
mÆloc_åì_chunk
 *
hód
 = 0;

110 
mÆloc_åì_chunk
 *
u
 = 
chunk
;

111 
bö_ödex_t
 
tödex
 = 
chunk
->
ödex
;

112 
size_t
 
tsize
 = 
	`chunk_size
(
chunk
);

113 
bö_ödex_t
 
idx
;

114 
	`compuã_åì_ödex
(
tsize
, 
idx
);

115 
	`dl_as£π
(
tödex
 =
idx
);

116 
	`dl_as£π
(
tsize
 >
MIN_LARGE_SIZE
);

117 
	`dl_as£π
(
tsize
 >
	`mösize_f‹_åì_ödex
(
idx
));

118 
	`dl_as£π
((
idx
 =
NUM_TREE_BINS
 - 1Ë|| (
tsize
 < 
	`mösize_f‹_åì_ödex
((idx + 1))));

122 
	`check_™y_chunk
(
°©e
, ((
mÆloc_chunk
 *Ë
u
));

123 
	`dl_as£π
(
u
->
ödex
 =
tödex
);

124 
	`dl_as£π
(
	`chunk_size
(
u
Ë=
tsize
);

125 
	`dl_as£π
(!
	`is_öu£
(
u
));

126 
	`dl_as£π
(!
	`√xt_¥ev_öu£
(
u
));

127 
	`dl_as£π
(
u
->
fd
->
bk
 == u);

128 
	`dl_as£π
(
u
->
bk
->
fd
 == u);

129 i‡(
u
->
∑ª¡
 == 0) {

130 
	`dl_as£π
(
u
->
chûd
[0] == 0);

131 
	`dl_as£π
(
u
->
chûd
[1] == 0);

134 
	`dl_as£π
(
hód
 == 0);

135 
hód
 = 
u
;

136 
	`dl_as£π
(
u
->
∑ª¡
 != u);

137 
	`dl_as£π
 (
u
->
∑ª¡
->
chûd
[0] == u

138 || 
u
->
∑ª¡
->
chûd
[1] == u

139 || *((
mÆloc_åì_chunk
 **Ë(
u
->
∑ª¡
)) == u);

140 i‡(
u
->
chûd
[0] != 0) {

141 
	`dl_as£π
(
u
->
chûd
[0]->
∑ª¡
 == u);

142 
	`dl_as£π
(
u
->
chûd
[0] != u);

143 
	`check_åì
(
°©e
, 
u
->
chûd
[0]);

145 i‡(
u
->
chûd
[1] != 0) {

146 
	`dl_as£π
(
u
->
chûd
[1]->
∑ª¡
 == u);

147 
	`dl_as£π
(
u
->
chûd
[1] != u);

148 
	`check_åì
(
°©e
, 
u
->
chûd
[1]);

150 i‡(
u
->
chûd
[0] != 0 && u->child[1] != 0) {

151 
	`dl_as£π
(
	`chunk_size
(
u
->
chûd
[0]) < chunk_size(u->child[1]));

154 
u
 = u->
fd
;

156 
u
 !
chunk
);

157 
	`dl_as£π
(
hód
 != 0);

158 
	}
}

161 
	$check_åì_bö
(
mÆloc_°©e
 *
°©e
, 
bö_ödex_t
 
ödex
) {

162 
mÆloc_åì_chunk
 **
tb
 = 
	`åì_bö_©
(
°©e
, 
ödex
);

163 
mÆloc_åì_chunk
 *
t
 = *
tb
;

164 
em±y
 = (
°©e
->
åì_m≠
 & (1U << 
ödex
)) == 0;

165 i‡(
t
 == 0) {

166 
	`dl_as£π
(
em±y
);

168 i‡(!
em±y
) {

169 
	`check_åì
(
°©e
, 
t
);

171 
	}
}

174 
	$check_smÆl_bö
(
mÆloc_°©e
 *
°©e
, 
bö_ödex_t
 
ödex
) {

175 
mÆloc_chunk
 *
b
 = 
	`smÆl_bö_©
(
°©e
, 
ödex
);

176 
mÆloc_chunk
 *
p
 = 
b
->
bk
;

177 
em±y
 = (
°©e
->
smÆl_m≠
 & (1U << 
ödex
)) == 0;

178 i‡(
p
 =
b
) {

179 
	`dl_as£π
(
em±y
);

181 i‡(!
em±y
) {

182 ; 
p
 !
b
;Ö =Ö->
bk
) {

183 
size_t
 
size
 = 
	`chunk_size
(
p
);

185 
	`check_‰ì_chunk
(
°©e
, 
p
);

187 
	`dl_as£π
(
	`smÆl_ödex
(
size
Ë=
ödex
);

188 
	`dl_as£π
(
p
->
bk
 =
b
 || 
	`chunk_size
(p->bk) == chunk_size(p));

190 
mÆloc_chunk
 *
q
 = 
	`√xt_chunk
(
p
);

191 i‡(
q
->
hód
 !
FENCEPOST_HEAD
) {

192 
	`check_öu£_chunk
(
°©e
, 
q
);

196 
	}
}

199 
	$bö_föd
(
mÆloc_°©e
 *
°©e
, 
mÆloc_chunk
 *
chunk
) {

200 
size_t
 
size
 = 
	`chunk_size
(
chunk
);

201 i‡(
	`is_smÆl
(
size
)) {

202 
bö_ödex_t
 
sidx
 = 
	`smÆl_ödex
(
size
);

203 
mÆloc_chunk
 *
b
 = 
	`smÆl_bö_©
(
°©e
, 
sidx
);

204 i‡(
	`smÆl_m≠_is_m¨ked
(
°©e
, 
sidx
)) {

205 
mÆloc_chunk
 *
p
 = 
b
;

207 i‡(
p
 =
chunk
) {

211 (
p
 =Ö->
fd
Ë!
b
);

215 
bö_ödex_t
 
tidx
;

216 
	`compuã_åì_ödex
(
size
, 
tidx
);

217 i‡(
	`åì_m≠_is_m¨ked
(
°©e
, 
tidx
)) {

218 
mÆloc_åì_chunk
 *
t
 = *
	`åì_bö_©
(
°©e
, 
tidx
);

219 
size_t
 
sizebôs
 = 
size
 << 
	`À·shi·_f‹_åì_ödex
(
tidx
);

220 
t
 !0 && 
	`chunk_size
—Ë!
size
) {

221 
t
 =Å->
chûd
[(
sizebôs
 >> (
SIZE_T_BITSIZE
 - (
size_t
) 1)) & 1];

222 
sizebôs
 <<= 1;

224 i‡(
t
 != 0) {

225 
mÆloc_åì_chunk
 *
u
 = 
t
;

227 i‡(
u
 =(
mÆloc_åì_chunk
 *Ë
chunk
) {

231 (
u
 = u->
fd
Ë!
t
);

236 
	}
}

239 
size_t
 
	$åavî£_™d_check
(
mÆloc_°©e
 *
°©e
) {

240 
size_t
 
sum
 = 0;

241 i‡(
	`is_öôülized
(
°©e
)) {

242 
mÆloc_£gmít
 *
s
 = &
°©e
->
£gmít
;

243 
sum
 +
°©e
->
t›_size
 + 
TOP_FOOT_SIZE
;

244 
s
 != 0) {

245 
mÆloc_chunk
 *
q
 = 
	`Æign_as_chunk
(
s
->
ba£
);

246 
mÆloc_chunk
 *
œ°q
 = 0;

247 
	`dl_as£π
(
	`¥ev_öu£
(
q
));

248 
	`£gmít_hﬁds
(
s
, 
q
Ë&& q !
°©e
->
t›
 && q->
hód
 !
FENCEPOST_HEAD
) {

249 
sum
 +
	`chunk_size
(
q
);

250 i‡(
	`is_öu£
(
q
)) {

251 
	`dl_as£π
(!
	`bö_föd
(
°©e
, 
q
));

252 
	`check_öu£_chunk
(
°©e
, 
q
);

255 
	`dl_as£π
(
q
 =
°©e
->
dv
 || 
	`bö_föd
(state, q));

256 
	`dl_as£π
(
œ°q
 =0 || 
	`is_öu£
(lastq));

257 
	`check_‰ì_chunk
(
°©e
, 
q
);

259 
œ°q
 = 
q
;

260 
q
 = 
	`√xt_chunk
(q);

262 
s
 = s->
√xt
;

265  
sum
;

266 
	}
}

269 
	$check_mÆloc_°©e
(
mÆloc_°©e
 *
°©e
) {

270 
bö_ödex_t
 
i
;

271 
size_t
 
tŸÆ
;

273 
i
 = 0; i < 
NUM_SMALL_BINS
; ++i) {

274 
	`check_smÆl_bö
(
°©e
, 
i
);

276 
i
 = 0; i < 
NUM_TREE_BINS
; ++i) {

277 
	`check_åì_bö
(
°©e
, 
i
);

280 i‡(
°©e
->
dv_size
 != 0) {

281 
	`check_™y_chunk
(
°©e
, sèã->
dv
);

282 
	`dl_as£π
(
°©e
->
dv_size
 =
	`chunk_size
(°©e->
dv
));

283 
	`dl_as£π
(
°©e
->
dv_size
 >
MIN_CHUNK_SIZE
);

284 
	`dl_as£π
(
	`bö_föd
(
°©e
, sèã->
dv
) == 0);

287 i‡(
°©e
->
t›
 != 0) {

288 
	`check_t›_chunk
(
°©e
, sèã->
t›
);

290 
	`dl_as£π
(
°©e
->
t›_size
 > 0);

291 
	`dl_as£π
(
	`bö_föd
(
°©e
, sèã->
t›
) == 0);

294 
tŸÆ
 = 
	`åavî£_™d_check
(
°©e
);

295 
	`dl_as£π
(
tŸÆ
 <
°©e
->
foŸ¥öt
);

296 
	`dl_as£π
(
°©e
->
foŸ¥öt
 <°©e->
max_foŸ¥öt
);

297 
	}
}

	@/home/iybang/dlmalloc/src/debug.h

1 #i‚de‡
MALLOC_DEBUG_H


2 
	#MALLOC_DEBUG_H


	)

4 
	~"chunk.h
"

5 
	~"c⁄fig.h
"

6 
	~"°©e.h
"

8 #ifde‡
DEBUG


10 
check_t›_chunk
(
mÆloc_°©e
 *, 
mÆloc_chunk
 *);

12 
check_mm≠≥d_chunk
(
mÆloc_°©e
 *, 
mÆloc_chunk
 *);

14 
check_öu£_chunk
(
mÆloc_°©e
 *, 
mÆloc_chunk
 *);

16 
check_mÆlo˚d_chunk
(
mÆloc_°©e
 *, *, 
size_t
);

18 
check_‰ì_chunk
(
mÆloc_°©e
 *, 
mÆloc_chunk
 *);

20 
check_mÆloc_°©e
(
mÆloc_°©e
 *);

24 
	#check_t›_chunk
(
M
, 
P
)

	)

25 
	#check_mm≠≥d_chunk
(
M
, 
P
)

	)

26 
	#check_öu£_chunk
(
M
, 
P
)

	)

27 
	#check_mÆlo˚d_chunk
(
M
, 
P
, 
N
)

	)

28 
	#check_‰ì_chunk
(
M
, 
P
)

	)

29 
	#check_mÆloc_°©e
(
M
)

	)

	@/home/iybang/dlmalloc/src/error.c

1 
	~<°dlib.h
>

2 
	~<î∫o.h
>

4 
	~"îr‹.h
"

6 
ölöe
 
	$mÆloc_Áûuª
() {

7 
î∫o
 = 
ENOMEM
;

8 
	}
}

13 
ölöe
 
	$c‹ru±i⁄_îr‹
(
mÆloc_°©e
 *
°©e
) {

14 (Ë
°©e
;

15 
	`ab‹t
();

16 
	}
}

24 
ölöe
 
	$ußge_îr‹
(
mÆloc_°©e
 *
°©e
, *
p
) {

25 (Ë
°©e
;

26 (Ë
p
;

27 
	`ab‹t
();

28 
	}
}

	@/home/iybang/dlmalloc/src/error.h

1 #i‚de‡
MALLOC_ERROR_H


2 
	#MALLOC_ERROR_H


	)

4 
	~"c⁄fig.h
"

6 
	gmÆloc_°©e
;

8 
mÆloc_Áûuª
();

13 
c‹ru±i⁄_îr‹
(
mÆloc_°©e
 *
°©e
);

21 
ußge_îr‹
(
mÆloc_°©e
 *
°©e
, *
p
);

	@/home/iybang/dlmalloc/src/heap-default.c

1 
	~<î∫o.h
>

2 
	~<sys/ty≥s.h
>

3 
	~<°rög.h
>

5 
	~"as£π.h
"

6 
	~"check.h
"

7 
	~"chunk.h
"

8 
	~"c⁄fig.h
"

9 
	~"debug.h
"

10 
	~"îr‹.h
"

11 
	~"hóp.h
"

12 
	~"öô.h
"

13 
	~"lock.h
"

14 
	~"mÆloc.h
"

15 
	~"os.h
"

17 
dl_exp‹t
 *
	$dl_mÆloc
(
size_t
 
byãs
) {

18 #i‡
USE_LOCKS


19 
	`ísuª_öôüliz©i⁄
();

21  
	`dl_mÆloc_im∂
(&
globÆ_mÆloc_°©e
, 
byãs
);

22 
	}
}

24 
dl_exp‹t
 
	$dl_‰ì
(*
mem
) {

25 i‡(
mem
 != 0) {

26 
mÆloc_chunk
 *
p
 = 
	`mem_to_chunk
(
mem
);

27 #i‡
FOOTERS


28 
mÆloc_°©e
 *
°©e
 = 
	`gë_°©e_f‹
(
p
);

29 i‡(!
	`ok_magic
(
°©e
)) {

30 
	`ußge_îr‹
(
°©e
, 
p
);

34 
mÆloc_°©e
 *
°©e
 = &
globÆ_mÆloc_°©e
;

36 
	`dl_‰ì_im∂
(
°©e
, 
p
);

38 
	}
}

40 
dl_exp‹t
 *
	$dl_ˇŒoc
(
size_t
 
n_ñemíts
, size_à
ñem_size
) {

41 
size_t
 
ªq
 = 0;

42 i‡(
n_ñemíts
 != 0) {

43 
ªq
 = 
n_ñemíts
 * 
ñem_size
;

44 i‡(((
n_ñemíts
 | 
ñem_size
Ë& ~(
size_t
Ë0xffffË&& (
ªq
 /Ç_elements !=Élem_size)) {

45 
ªq
 = 
MAX_SIZE_T
;

48 *
mem
 = 
	`dl_mÆloc
(
ªq
);

49 i‡(
mem
 !0 && 
	`ˇŒoc_mu°_˛ór
(
	`mem_to_chunk
(mem))) {

50 
	`mem£t
(
mem
, 0, 
ªq
);

52  
mem
;

53 
	}
}

55 
dl_exp‹t
 *
	$dl_ªÆloc
(*
ﬁd_mem
, 
size_t
 
byãs
) {

56 *
mem
 = 0;

57 i‡(
ﬁd_mem
 == 0) {

58 
mem
 = 
	`dl_mÆloc
(
byãs
);

60 i‡(
byãs
 >
MAX_REQUEST
) {

61 
	`mÆloc_Áûuª
();

63 #ifde‡
REALLOC_ZERO_BYTES_FREES


64 i‡(
byãs
 == 0) {

65 
	`dl_‰ì
(
ﬁd_mem
);

69 
size_t
 
nb
 = 
	`ªque°_to_size
(
byãs
);

70 
mÆloc_chunk
 *
ﬁd_p
 = 
	`mem_to_chunk
(
ﬁd_mem
);

71 #i‡!
FOOTERS


72 
mÆloc_°©e
 *
°©e
 = &
globÆ_mÆloc_°©e
;

74 
mÆloc_°©e
 *
°©e
 = 
	`gë_°©e_f‹
(
ﬁd_p
);

75 i‡(!
	`ok_magic
(
°©e
)) {

76 
	`ußge_îr‹
(
°©e
, 
ﬁd_mem
);

80 i‡(!
	`PREACTION
(
°©e
)) {

81 
mÆloc_chunk
 *
√w_p
 = 
	`åy_ªÆloc_chunk
(
°©e
, 
ﬁd_p
, 
nb
, 1);

82 
	`POSTACTION
(
°©e
);

83 i‡(
√w_p
 != 0) {

84 
	`check_öu£_chunk
(
°©e
, 
√w_p
);

85 
mem
 = 
	`chunk_to_mem
(
√w_p
);

88 
mem
 = 
	`öã∫Æ_mÆloc
(
°©e
, 
byãs
);

89 i‡(
mem
 != 0) {

90 
size_t
 
oc
 = 
	`chunk_size
(
ﬁd_p
Ë- 
	`ovîhód_f‹
(old_p);

91 
	`mem˝y
(
mem
, 
ﬁd_mem
, 
oc
 < 
byãs
 ? oc : bytes);

92 
	`öã∫Æ_‰ì
(
°©e
, 
ﬁd_mem
);

97  
mem
;

98 
	}
}

100 
dl_exp‹t
 *
	$dl_ªÆloc_ö_∂a˚
(*
ﬁd_mem
, 
size_t
 
byãs
) {

101 *
mem
 = 0;

102 i‡(
ﬁd_mem
 != 0) {

103 i‡(
byãs
 >
MAX_REQUEST
) {

104 
	`mÆloc_Áûuª
();

107 
size_t
 
nb
 = 
	`ªque°_to_size
(
byãs
);

108 
mÆloc_chunk
 *
ﬁd_p
 = 
	`mem_to_chunk
(
ﬁd_mem
);

109 #i‡!
FOOTERS


110 
mÆloc_°©e
 *
°©e
 = &
globÆ_mÆloc_°©e
;

112 
mÆloc_°©e
 *
°©e
 = 
	`gë_°©e_f‹
(
ﬁd_p
);

113 i‡(!
	`ok_magic
(
°©e
)) {

114 
	`ußge_îr‹
(
°©e
, 
ﬁd_mem
);

118 i‡(!
	`PREACTION
(
°©e
)) {

119 
mÆloc_chunk
 *
√w_p
 = 
	`åy_ªÆloc_chunk
(
°©e
, 
ﬁd_p
, 
nb
, 0);

120 
	`POSTACTION
(
°©e
);

121 i‡(
√w_p
 =
ﬁd_p
) {

122 
	`check_öu£_chunk
(
°©e
, 
√w_p
);

123 
mem
 = 
ﬁd_mem
;

128  
mem
;

129 
	}
}

131 
dl_exp‹t
 dl_exp‹à*
	$dl_memÆign
(
size_t
 
Æignmít
, size_à
byãs
) {

132 i‡(
Æignmít
 <
MALLOC_ALIGNMENT
) {

133  
	`dl_mÆloc
(
byãs
);

135  
	`öã∫Æ_memÆign
(&
globÆ_mÆloc_°©e
, 
Æignmít
, 
byãs
);

136 
	}
}

138 
dl_exp‹t
 
	$dl_posix_memÆign
(**
µ
, 
size_t
 
Æignmít
, size_à
byãs
) {

139 *
mem
 = 0;

140 i‡(
Æignmít
 =
MALLOC_ALIGNMENT
) {

141 
mem
 = 
	`dl_mÆloc
(
byãs
);

144 
size_t
 
d
 = 
Æignmít
 / (*);

145 
size_t
 
r
 = 
Æignmít
 % (*);

146 i‡(
r
 !0 || 
d
 =0 || (d & (d - (
size_t
) 1)) != 0) {

147  
EINVAL
;

149 i‡(
byãs
 <
MAX_REQUEST
 - 
Æignmít
) {

150 i‡(
Æignmít
 < 
MIN_CHUNK_SIZE
) {

151 
Æignmít
 = 
MIN_CHUNK_SIZE
;

153 
mem
 = 
	`öã∫Æ_memÆign
(&
globÆ_mÆloc_°©e
, 
Æignmít
, 
byãs
);

156 i‡(
mem
 == 0) {

157  
ENOMEM
;

160 *
µ
 = 
mem
;

163 
	}
}

165 
dl_exp‹t
 *
	$dl_vÆloc
(
size_t
 
byãs
) {

166 
	`ísuª_öôüliz©i⁄
();

167 
size_t
 
∑ge_size
 = 
∑øms
.page_size;

168  
	`dl_memÆign
(
∑ge_size
, 
byãs
);

169 
	}
}

171 
dl_exp‹t
 *
	$dl_pvÆloc
(
size_t
 
byãs
) {

172 
	`ísuª_öôüliz©i⁄
();

173 
size_t
 
∑ge_size
 = 
∑øms
.page_size;

174  
	`dl_memÆign
(
∑ge_size
, (
byãs
 +Öage_sizê- (
size_t
) 1) & ~(page_size - (size_t) 1));

175 
	}
}

177 
dl_exp‹t
 **
	$dl_ödïídít_ˇŒoc
(
size_t
 
n_ñemíts
, size_à
ñem_size
, **
chunks
) {

178 
size_t
 
sz
 = 
ñem_size
;

179  
	`üŒoc
(&
globÆ_mÆloc_°©e
, 
n_ñemíts
, &
sz
, 3, 
chunks
);

180 
	}
}

182 
dl_exp‹t
 **
	$dl_ödïídít_comÆloc
(
size_t
 
n_ñemíts
, size_à*
sizes
, **
chunks
) {

183  
	`üŒoc
(&
globÆ_mÆloc_°©e
, 
n_ñemíts
, 
sizes
, 0, 
chunks
);

184 
	}
}

186 
dl_exp‹t
 
size_t
 
	$dl_bulk_‰ì
(**
¨øy
, 
size_t
 
√Àm
) {

187  
	`öã∫Æ_bulk_‰ì
(&
globÆ_mÆloc_°©e
, 
¨øy
, 
√Àm
);

188 
	}
}

190 
dl_exp‹t
 
	$dl_mÆloc_åim
(
size_t
 
∑d
) {

191 
ªsu…
 = 0;

192 
	`ísuª_öôüliz©i⁄
();

193 i‡(!
	`PREACTION
(&
globÆ_mÆloc_°©e
)) {

194 
ªsu…
 = 
	`sys_åim
(&
globÆ_mÆloc_°©e
, 
∑d
);

195 
	`POSTACTION
(&
globÆ_mÆloc_°©e
);

197  
ªsu…
;

198 
	}
}

200 
dl_exp‹t
 
	$dl_mÆl›t
(
∑øm_numbî
, 
vÆue
) {

201  
	`ch™ge_∑øm
(
∑øm_numbî
, 
vÆue
);

202 
	}
}

204 #i‡
OVERRIDE


206 
dl_exp‹t
 *
	$mÆloc
(
size_t
 
size
Ë
	`DL_FORWARD_1
(
dl_mÆloc
, size);

208 
dl_exp‹t
 *
	$ˇŒoc
(
size_t
 
num
, size_à
size
Ë
	`DL_FORWARD_2
(
dl_ˇŒoc
,Çum, size);

210 
dl_exp‹t
 *
	$ªÆloc
(*
p
, 
size_t
 
√w_size
Ë
	`DL_FORWARD_2
(
dl_ªÆloc
,Ö,Çew_size);

212 
dl_exp‹t
 
	$‰ì
(*
p
Ë
	`DL_FORWARD0_1
(
dl_‰ì
,Ö);

	@/home/iybang/dlmalloc/src/heap-user.c

1 
	~<î∫o.h
>

2 
	~<sys/ty≥s.h
>

3 
	~<°rög.h
>

5 
	~"as£π.h
"

6 
	~"check.h
"

7 
	~"chunk.h
"

8 
	~"c⁄fig.h
"

9 
	~"debug.h
"

10 
	~"îr‹.h
"

11 
	~"hóp.h
"

12 
	~"öô.h
"

13 
	~"lock.h
"

14 
	~"mÆloc.h
"

15 
	~"os.h
"

17 
mÆloc_°©e
 *
	$öô_u£r_°©e
(*
tba£
, 
size_t
 
tsize
) {

18 
size_t
 
msize
 = 
	`∑d_ªque°
((
mÆloc_°©e
));

19 
mÆloc_chunk
 *
hóp
 = 
	`Æign_as_chunk
(
tba£
);

20 
mÆloc_°©e
 *
°©e
 = (mÆloc_°©ê*Ë(
	`chunk_to_mem
(
hóp
));

21 
	`mem£t
(
°©e
, 0, 
msize
);

22 (Ë
	`INITIAL_LOCK
(&
°©e
->
muãx
);

23 
hóp
->
hód
 = 
msize
 | 
INUSE_BITS
;

24 
°©e
->
£gmít
.
ba£
 = sèã->
Àa°_addr
 = 
tba£
;

25 
°©e
->
£gmít
.
size
 = sèã->
foŸ¥öt
 = sèã->
max_foŸ¥öt
 = 
tsize
;

26 
°©e
->
magic
 = 
∑øms
.magic;

27 
°©e
->
ªÀa£_checks
 = 
MAX_RELEASE_CHECK_RATE
;

28 
°©e
->
Êags
 = 
∑øms
.
deÁu…_Êags
;

29 
	`dißbÀ_c⁄tiguous
(
°©e
);

30 
	`öô_bös
(
°©e
);

31 
mÆloc_chunk
 *
mn
 = 
	`√xt_chunk
(
	`mem_to_chunk
(
°©e
));

32 
	`öô_t›
(
°©e
, 
mn
, (
size_t
Ë((
tba£
 + 
tsize
Ë- (*ËmnË- 
TOP_FOOT_SIZE
);

33 
	`check_t›_chunk
(
°©e
, sèã->
t›
);

34  
°©e
;

35 
	}
}

37 
dl_exp‹t
 
dl_hóp_t
 
	$dl_¸óã_hóp
(
size_t
 
ˇ∑côy
, 
locked
) {

38 
	`ísuª_öôüliz©i⁄
();

39 
mÆloc_°©e
 *
°©e
 = 0;

40 
size_t
 
msize
 = 
	`∑d_ªque°
((
mÆloc_°©e
));

41 i‡(
ˇ∑côy
 < (
size_t
Ë-(
msize
 + 
TOP_FOOT_SIZE
 + 
∑øms
.
∑ge_size
)) {

42 
size_t
 
rs
 = 
ˇ∑côy
 == 0

43 ? 
∑øms
.
gønuœrôy


44 : 
ˇ∑côy
 + 
TOP_FOOT_SIZE
 + 
msize
;

45 
size_t
 
tsize
 = 
	`gønuœrôy_Æign
(
rs
);

46 *
tba£
 = (*Ë
	`ˇŒ_mm≠
(
tsize
);

47 i‡(
tba£
 !
MFAIL
) {

48 
°©e
 = 
	`öô_u£r_°©e
(
tba£
, 
tsize
);

49 
°©e
->
£gmít
.
Êags
 = 
USE_MMAP_BIT
;

50 
	`£t_lock
(
°©e
, 
locked
);

53  (
dl_hóp_t
Ë
°©e
;

54 
	}
}

56 
dl_exp‹t
 
dl_hóp_t
 
	$dl_¸óã_hóp_wôh_ba£
(*
ba£
, 
size_t
 
ˇ∑côy
, 
locked
) {

57 
	`ísuª_öôüliz©i⁄
();

58 
mÆloc_°©e
 *
°©e
 = 0;

59 
size_t
 
msize
 = 
	`∑d_ªque°
((
mÆloc_°©e
));

60 i‡(
ˇ∑côy
 > 
msize
 + 
TOP_FOOT_SIZE


61 && 
ˇ∑côy
 < (
size_t
Ë-(
msize
 + 
TOP_FOOT_SIZE
 + 
∑øms
.
∑ge_size
)) {

62 
°©e
 = 
	`öô_u£r_°©e
((*Ë
ba£
, 
ˇ∑côy
);

63 
°©e
->
£gmít
.
Êags
 = 
EXTERN_BIT
;

64 
	`£t_lock
(
°©e
, 
locked
);

66  (
dl_hóp_t
Ë
°©e
;

67 
	}
}

69 
dl_exp‹t
 
size_t
 
	$dl_de°roy_hóp
(
dl_hóp_t
 
hóp
) {

70 
size_t
 
‰ìd
 = 0;

71 
mÆloc_°©e
 *
°©e
 = (mÆloc_°©ê*Ë
hóp
;

72 i‡(
	`ok_magic
(
°©e
)) {

73 (Ë
	`DESTROY_LOCK
(&
°©e
->
muãx
);

74 
mÆloc_£gmít
 *
£gmít
 = &
°©e
->segment;

75 
£gmít
 != 0) {

76 i‡(
	`is_mm≠≥d_£gmít
(
£gmít
Ë&& !
	`is_exã∫_£gmít
(segment)) {

77 i‡(
	`ˇŒ_munm≠
(
£gmít
->
ba£
, segmít->
size
) == 0) {

78 
‰ìd
 +
£gmít
->
size
;

81 
£gmít
 = segmít->
√xt
;

85 
	`ußge_îr‹
(
°©e
, state);

87  
‰ìd
;

88 
	}
}

90 
dl_exp‹t
 
	$dl_hóp_åack_œrge_chunks
(
dl_hóp_t
 
hóp
, 
íabÀ
) {

91 
ªt
 = 0;

92 
mÆloc_°©e
 *
°©e
 = (mÆloc_°©ê*Ë
hóp
;

93 i‡(!
	`PREACTION
(
°©e
)) {

94 i‡(!
	`u£_mm≠
(
°©e
)) {

95 
ªt
 = 1;

97 i‡(!
íabÀ
) {

98 
	`íabÀ_mm≠
(
°©e
);

101 
	`dißbÀ_mm≠
(
°©e
);

103 
	`POSTACTION
(
°©e
);

105  
ªt
;

106 
	}
}

108 
dl_exp‹t
 *
	$dl_hóp_mÆloc
(
dl_hóp_t
 
hóp
, 
size_t
 
byãs
) {

109 
mÆloc_°©e
 *
°©e
 = (mÆloc_°©ê*Ë
hóp
;

110 i‡(!
	`ok_magic
(
°©e
)) {

111 
	`ußge_îr‹
(
°©e
, state);

114  
	`dl_mÆloc_im∂
(
°©e
, 
byãs
);

115 
	}
}

117 
dl_exp‹t
 
	$dl_hóp_‰ì
(
dl_hóp_t
 
hóp
, *
mem
) {

118 i‡(
mem
 != 0) {

119 
mÆloc_chunk
 *
p
 = 
	`mem_to_chunk
(
mem
);

120 #i‡
FOOTERS


121 
mÆloc_°©e
 *
°©e
 = 
	`gë_°©e_f‹
(
p
);

122 (Ë
hóp
;

124 
mÆloc_°©e
 *
°©e
 = (mÆloc_°©ê*Ë
hóp
;

126 i‡(!
	`ok_magic
(
°©e
)) {

127 
	`ußge_îr‹
(
°©e
, 
p
);

130 
	`dl_‰ì_im∂
(
°©e
, 
p
);

132 
	}
}

134 
dl_exp‹t
 *
	$dl_hóp_ˇŒoc
(
dl_hóp_t
 
hóp
, 
size_t
 
n_ñemíts
, size_à
ñem_size
) {

135 
mÆloc_°©e
 *
°©e
 = (mÆloc_°©ê*Ë
hóp
;

136 i‡(!
	`ok_magic
(
°©e
)) {

137 
	`ußge_îr‹
(
°©e
, state);

140 
size_t
 
ªq
 = 0;

141 i‡(
n_ñemíts
 != 0) {

142 
ªq
 = 
n_ñemíts
 * 
ñem_size
;

143 i‡(((
n_ñemíts
 | 
ñem_size
Ë& ~(
size_t
Ë0xffffË&& (
ªq
 /Ç_elements !=Élem_size)) {

144 
ªq
 = 
MAX_SIZE_T
;

147 *
mem
 = 
	`öã∫Æ_mÆloc
(
°©e
, 
ªq
);

148 i‡(
mem
 !0 && 
	`ˇŒoc_mu°_˛ór
(
	`mem_to_chunk
(mem))) {

149 
	`mem£t
(
mem
, 0, 
ªq
);

151  
mem
;

152 
	}
}

154 
dl_exp‹t
 *
	$dl_hóp_ªÆloc
(
dl_hóp_t
 
hóp
, *
ﬁd_mem
, 
size_t
 
√w_size
) {

155 *
mem
 = 0;

156 i‡(
ﬁd_mem
 == 0) {

157 
mem
 = 
	`dl_hóp_mÆloc
(
hóp
, 
√w_size
);

159 i‡(
√w_size
 >
MAX_REQUEST
) {

160 
	`mÆloc_Áûuª
();

162 #ifde‡
REALLOC_ZERO_BYTES_FREES


163 i‡(
byãs
 == 0) {

164 
	`hóp_‰ì
(
hóp
, 
ﬁd_mem
);

168 
size_t
 
nb
 = 
	`ªque°_to_size
(
√w_size
);

169 
mÆloc_chunk
 *
ﬁd_p
 = 
	`mem_to_chunk
(
ﬁd_mem
);

170 #i‡!
FOOTERS


171 
mÆloc_°©e
 *
°©e
 = (mÆloc_°©ê*Ë
hóp
;

173 
mÆloc_°©e
 *
°©e
 = 
	`gë_°©e_f‹
(
ﬁd_p
);

174 i‡(!
	`ok_magic
(
°©e
)) {

175 
	`ußge_îr‹
(
°©e
, 
ﬁd_mem
);

179 i‡(!
	`PREACTION
(
°©e
)) {

180 
mÆloc_chunk
 *
√w_p
 = 
	`åy_ªÆloc_chunk
(
°©e
, 
ﬁd_p
, 
nb
, 1);

181 
	`POSTACTION
(
°©e
);

182 i‡(
√w_p
 != 0) {

183 
	`check_öu£_chunk
(
°©e
, 
√w_p
);

184 
mem
 = 
	`chunk_to_mem
(
√w_p
);

187 
mem
 = 
	`dl_hóp_mÆloc
(
°©e
, 
√w_size
);

188 i‡(
mem
 != 0) {

189 
size_t
 
oc
 = 
	`chunk_size
(
ﬁd_p
Ë- 
	`ovîhód_f‹
(old_p);

190 
	`mem˝y
(
mem
, 
ﬁd_mem
, (
oc
 < 
√w_size
) ? oc :Çew_size);

191 
	`dl_hóp_‰ì
(
°©e
, 
ﬁd_mem
);

196  
mem
;

197 
	}
}

199 
dl_exp‹t
 *
	$dl_hóp_ªÆloc_ö_∂a˚
(
dl_hóp_t
 
hóp
, *
ﬁd_mem
, 
size_t
 
√w_size
) {

200 *
mem
 = 0;

201 i‡(
ﬁd_mem
 != 0) {

202 i‡(
√w_size
 >
MAX_REQUEST
) {

203 
	`mÆloc_Áûuª
();

206 
size_t
 
nb
 = 
	`ªque°_to_size
(
√w_size
);

207 
mÆloc_chunk
 *
ﬁd_p
 = 
	`mem_to_chunk
(
ﬁd_mem
);

208 #i‡!
FOOTERS


209 
mÆloc_°©e
 *
°©e
 = (mÆloc_°©ê*Ë
hóp
;

211 
mÆloc_°©e
 *
°©e
 = 
	`gë_°©e_f‹
(
ﬁd_p
);

212 (Ë
hóp
;

213 i‡(!
	`ok_magic
(
°©e
)) {

214 
	`ußge_îr‹
(
°©e
, 
ﬁd_mem
);

218 i‡(!
	`PREACTION
(
°©e
)) {

219 
mÆloc_chunk
 *
√w_p
 = 
	`åy_ªÆloc_chunk
(
°©e
, 
ﬁd_p
, 
nb
, 0);

220 
	`POSTACTION
(
°©e
);

221 i‡(
√w_p
 =
ﬁd_p
) {

222 
	`check_öu£_chunk
(
°©e
, 
√w_p
);

223 
mem
 = 
ﬁd_mem
;

228  
mem
;

229 
	}
}

231 
dl_exp‹t
 *
	$dl_hóp_memÆign
(
dl_hóp_t
 
hóp
, 
size_t
 
Æignmít
, size_à
byãs
) {

232 
mÆloc_°©e
 *
°©e
 = (mÆloc_°©ê*Ë
hóp
;

233 i‡(!
	`ok_magic
(
°©e
)) {

234 
	`ußge_îr‹
(
°©e
, state);

237 i‡(
Æignmít
 <
MALLOC_ALIGNMENT
) {

238  
	`dl_hóp_mÆloc
(
hóp
, 
byãs
);

240  
	`öã∫Æ_memÆign
(
°©e
, 
Æignmít
, 
byãs
);

241 
	}
}

243 
dl_exp‹t
 **
	$dl_hóp_ödïídít_ˇŒoc
(
dl_hóp_t
 
hóp
, 
size_t
 
n_ñemíts
, size_à
ñem_size
, **
chunks
) {

244 
mÆloc_°©e
 *
°©e
 = (mÆloc_°©ê*Ë
hóp
;

245 i‡(!
	`ok_magic
(
°©e
)) {

246 
	`ußge_îr‹
(
°©e
, state);

249 
size_t
 
sz
 = 
ñem_size
;

250  
	`üŒoc
(
°©e
, 
n_ñemíts
, &
sz
, 3, 
chunks
);

251 
	}
}

253 
dl_exp‹t
 **
	$dl_hóp_ödïídít_comÆloc
(
dl_hóp_t
 
hóp
, 
size_t
 
n_ñemíts
, size_à*
sizes
, **
chunks
) {

254 
mÆloc_°©e
 *
°©e
 = (mÆloc_°©ê*Ë
hóp
;

255 i‡(!
	`ok_magic
(
°©e
)) {

256 
	`ußge_îr‹
(
°©e
, state);

259  
	`üŒoc
(
°©e
, 
n_ñemíts
, 
sizes
, 0, 
chunks
);

260 
	}
}

262 
dl_exp‹t
 
size_t
 
	$dl_hóp_bulk_‰ì
(
dl_hóp_t
 
hóp
, **
¨øy
, 
size_t
 
n_ñemíts
) {

263  
	`öã∫Æ_bulk_‰ì
((
mÆloc_°©e
 *Ë
hóp
, 
¨øy
, 
n_ñemíts
);

264 
	}
}

266 
dl_exp‹t
 
	$dl_hóp_åim
(
dl_hóp_t
 
hóp
, 
size_t
 
∑d
) {

267 
ªsu…
 = 0;

268 
mÆloc_°©e
 *
°©e
 = (mÆloc_°©ê*Ë
hóp
;

269 i‡(!
	`ok_magic
(
°©e
)) {

270 
	`ußge_îr‹
(
°©e
, state);

273 i‡(!
	`PREACTION
(
°©e
)) {

274 
ªsu…
 = 
	`sys_åim
(
°©e
, 
∑d
);

275 
	`POSTACTION
(
°©e
);

278  
ªsu…
;

279 
	}
}

	@/home/iybang/dlmalloc/src/heap.c

1 
	~<î∫o.h
>

2 
	~<sys/ty≥s.h
>

3 
	~<°rög.h
>

5 
	~"as£π.h
"

6 
	~"check.h
"

7 
	~"chunk.h
"

8 
	~"c⁄fig.h
"

9 
	~"debug.h
"

10 
	~"îr‹.h
"

11 
	~"hóp.h
"

12 
	~"öô.h
"

13 
	~"lock.h
"

14 
	~"os.h
"

16 * 
__mã_èg_mem
;

21 
dl_f‹˚_ölöe
 *
	$dl_mÆloc_im∂
(
mÆloc_°©e
 *
°©e
, 
size_t
 
byãs
) {

52 i‡(!
	`PREACTION
(
°©e
)) {

53 *
mem
;

54 
size_t
 
nb
;

55 i‡(
byãs
 <
MAX_SMALL_REQUEST
) {

56 
bö_m≠_t
 
smÆl_bôs
;

57 
nb
 = (
byãs
 < 
MIN_REQUEST
Ë? 
MIN_CHUNK_SIZE
 : 
	`∑d_ªque°
(bytes);

58 
bö_ödex_t
 
idx
 = 
	`smÆl_ödex
(
nb
);

59 
smÆl_bôs
 = 
°©e
->
smÆl_m≠
 >> 
idx
;

61 i‡((
smÆl_bôs
 & 0x3U) != 0) {

62 
idx
 +~
smÆl_bôs
 & 1;

63 
mÆloc_chunk
 *
b
 = 
	`smÆl_bö_©
(
°©e
, 
idx
);

64 
mÆloc_chunk
 *
p
 = 
b
->
fd
;

65 
	`dl_as£π
(
	`chunk_size
(
p
Ë=
	`smÆl_ödex_to_size
(
idx
));

66 
	`u∆ök_fú°_smÆl_chunk
(
°©e
, 
b
, 
p
, 
idx
);

67 
	`£t_öu£_™d_¥ev_öu£
(
°©e
, 
p
, 
	`smÆl_ödex_to_size
(
idx
));

68 
mem
 = 
	`chunk_to_mem
(
p
);

69 
	`check_mÆlo˚d_chunk
(
°©e
, 
mem
, 
nb
);

70 
po°a˘i⁄
;

72 i‡(
nb
 > 
°©e
->
dv_size
) {

73 i‡(
smÆl_bôs
 != 0) {

74 
bö_ödex_t
 
i
;

75 
bö_m≠_t
 
À·_bôs
 = (
smÆl_bôs
 << 
idx
Ë& 
	`À·_bôs
(
	`ödex_to_bô
(idx));

76 
bö_m≠_t
 
Àa°_bô
 = 
	`Àa°_bô
(
À·_bôs
);

77 
	`compuã_bô2idx
(
Àa°_bô
, 
i
);

78 
mÆloc_chunk
 *
b
 = 
	`smÆl_bö_©
(
°©e
, 
i
);

79 
mÆloc_chunk
 *
p
 = 
b
->
fd
;

80 
	`dl_as£π
(
	`chunk_size
(
p
Ë=
	`smÆl_ödex_to_size
(
i
));

81 
	`u∆ök_fú°_smÆl_chunk
(
°©e
, 
b
, 
p
, 
i
);

82 
size_t
 
rsize
 = 
	`smÆl_ödex_to_size
(
i
Ë- 
nb
;

84 i‡((
size_t
Ë!4 && 
rsize
 < 
MIN_CHUNK_SIZE
) {

85 
	`£t_öu£_™d_¥ev_öu£
(
°©e
, 
p
, 
	`smÆl_ödex_to_size
(
i
));

88 
	`£t_size_™d_¥ev_öu£_of_öu£_chunk
(
°©e
, 
p
, 
nb
);

89 
mÆloc_chunk
 *
r
 = 
	`chunk_∂us_off£t
(
p
, 
nb
);

91 
	`£t_chunk_èg
(
r
, 
	`gë_chunk_èg
(
p
));

92 
r
->
¥ev_foŸ
 = 
nb
|(
p
->¥ev_foŸ & (
NEXT_EXH_BIT
));

93 
p
->
¥ev_foŸ
 &~(
NEXT_EXH_BIT
);

96 
	`£t_size_™d_¥ev_öu£_of_‰ì_chunk
(
r
, 
rsize
);

97 
	`ª∂a˚_dv
(
°©e
, 
r
, 
rsize
);

99 
mem
 = 
	`chunk_to_mem
(
p
);

100 
	`check_mÆlo˚d_chunk
(
°©e
, 
mem
, 
nb
);

101 
po°a˘i⁄
;

103 i‡(
°©e
->
åì_m≠
 !0 && (
mem
 = 
	`tmÆloc_smÆl
(°©e, 
nb
)) != 0) {

104 
	`check_mÆlo˚d_chunk
(
°©e
, 
mem
, 
nb
);

105 
po°a˘i⁄
;

109 i‡(
byãs
 >
MAX_REQUEST
) {

110 
nb
 = 
MAX_SIZE_T
;

113 
nb
 = 
	`∑d_ªque°
(
byãs
);

114 i‡(
°©e
->
åì_m≠
 !0 && (
mem
 = 
	`tmÆloc_œrge
(°©e, 
nb
)) != 0) {

115 
	`check_mÆlo˚d_chunk
(
°©e
, 
mem
, 
nb
);

116 
po°a˘i⁄
;

120 i‡(
nb
 <
°©e
->
dv_size
) {

121 
size_t
 
rsize
 = 
°©e
->
dv_size
 - 
nb
;

122 
mÆloc_chunk
 *
p
 = 
°©e
->
dv
;

123 i‡(
rsize
 >
MIN_CHUNK_SIZE
) {

124 
mÆloc_chunk
 *
r
 = 
°©e
->
dv
 = 
	`chunk_∂us_off£t
(
p
, 
nb
);

125 
°©e
->
dv_size
 = 
rsize
;

128 
	`£t_chunk_èg
(
r
, 
	`gë_chunk_èg
(
p
));

129 
r
->
¥ev_foŸ
 = 
nb
|(
p
->¥ev_foŸ & (
NEXT_EXH_BIT
));

130 
p
->
¥ev_foŸ
 &~
NEXT_EXH_BIT
;

132 
	`£t_size_™d_¥ev_öu£_of_‰ì_chunk
(
r
, 
rsize
);

133 
	`£t_size_™d_¥ev_öu£_of_öu£_chunk
(
°©e
, 
p
, 
nb
);

136 
size_t
 
dvs
 = 
°©e
->
dv_size
;

137 
°©e
->
dv_size
 = 0;

138 
°©e
->
dv
 = 0;

139 
	`£t_öu£_™d_¥ev_öu£
(
°©e
, 
p
, 
dvs
);

141 
mem
 = 
	`chunk_to_mem
(
p
);

142 
	`check_mÆlo˚d_chunk
(
°©e
, 
mem
, 
nb
);

143 
po°a˘i⁄
;

145 i‡(
nb
 < 
°©e
->
t›_size
) {

146 
size_t
 
rsize
 = 
°©e
->
t›_size
 -
nb
;

147 
size_t
 
t›_foŸ
 = 
°©e
->
t›
->
¥ev_foŸ
;

148 
size_t
 
tc_size
 = 
°©e
->
t›_cﬁ‹ed_size
;

149 
°©e
->
t›_cﬁ‹ed_size
 = 0;

150 
mÆloc_chunk
 *
p
 = 
°©e
->
t›
;

151 
mÆloc_chunk
 *
r
 = 
°©e
->
t›
 = 
	`chunk_∂us_off£t
(
p
, 
nb
);

152 
size_t
 
èg
 = 
	`gë_chunk_èg
(
p
);

153 
r
->
hód
 = 
rsize
 | 
PREV_INUSE_BIT
;

154 
r
->
¥ev_foŸ
 = 
nb
;

155 
	`£t_size_™d_¥ev_öu£_of_öu£_chunk
(
°©e
, 
p
, 
nb
);

161 if(
tc_size
 > 
nb
 ){

162 
°©e
->
t›_cﬁ‹ed_size
 = 
tc_size
-
nb
;

163 
	`£t_chunk_èg
(
r
, 
èg
);

164 }if(
tc_size
 != 0){

165 
	`mã_cﬁ‹_èg
(
p
,
nb
, 
èg
);

167 
p
->
¥ev_foŸ
 = 
t›_foŸ
;

169 
mem
 = 
	`chunk_to_mem
(
p
);

170 
	`check_t›_chunk
(
°©e
, sèã->
t›
);

171 
	`check_mÆlo˚d_chunk
(
°©e
, 
mem
, 
nb
);

172 
po°a˘i⁄
;

175 
mem
 = 
	`sys_Æloc
(
°©e
, 
nb
);

177 
po°a˘i⁄
:

178 
	`POSTACTION
(
°©e
);

179  
mem
;

183 
	}
}

185 
dl_f‹˚_ölöe
 
	$dl_‰ì_im∂
(
mÆloc_°©e
 *
°©e
, 
mÆloc_chunk
 *
p
) {

192 i‡(!
	`PREACTION
(
°©e
)) {

194 i‡(
	`likñy
(
	`ok_addªss
(
°©e
, 
p
Ë&& 
	`ok_öu£
(p))) {

196 
	`check_öu£_chunk
(
°©e
, 
p
);

198 
size_t
 
√w_èg
 = 
	`gë_chunk_èg
(
p
Ë+ 
TAG_OFFSET
;

200 if(
√w_èg
 =
TAG_BITS
){

201 
	`bœckli°_chunk
(
°©e
, 
p
);

202 
po°a˘i⁄
;

206 
size_t
 
psize
 = 
	`chunk_size
(
p
);

207 
size_t
 
csize
 = 
psize
;

208 
mÆloc_chunk
* 
ba£
 = 
p
;

209 
mÆloc_chunk
 *
√xt
 = 
	`is_√xt_exhau°ed
(
p
)? 0: 
	`chunk_∂us_off£t
’, 
psize
);

210 i‡(!
	`is_¥ev_exhau°ed
(
p
Ë&& !
	`¥ev_öu£
(p)) {

211 
size_t
 
¥ev_size
 = 
	`gë_¥ev_size
(
p
);

212 i‡(
	`is_mm≠≥d
(
p
)) {

213 
psize
 +
¥ev_size
 + 
MMAP_FOOT_PAD
;

214 i‡(
	`ˇŒ_munm≠
((*Ë
p
 - 
¥ev_size
, 
psize
) == 0) {

215 
°©e
->
foŸ¥öt
 -
psize
;

217 
po°a˘i⁄
;

220 
mÆloc_chunk
 *
¥ev
 = 
	`chunk_möus_off£t
(
p
, 
¥ev_size
);

221 
size_t
 
¥ev_èg
 = 
	`gë_chunk_èg
(
¥ev
);

222 
√w_èg
 = 
	`èg_max
“ew_èg, 
¥ev_èg
);

223 
psize
 +
¥ev_size
;

224 
p
 = 
¥ev
;

225 i‡(
	`likñy
(
	`ok_addªss
(
°©e
, 
¥ev
))) {

226 i‡(
p
 !
°©e
->
dv
) {

227 
	`u∆ök_chunk
(
°©e
, 
p
, 
¥ev_size
);

229 i‡(
√xt
 =0 || (√xt->
hód
 & 
INUSE_BITS
) == INUSE_BITS) {

230 if(
¥ev_èg
 =
√w_èg
){

231 
	`mã_cﬁ‹_èg
(
ba£
, 
csize
, 
	`èg_to_öt
(
√w_èg
));

233 
	`mã_cﬁ‹_èg
(
p
, 
psize
, 
	`èg_to_öt
(
√w_èg
));

235 
	`£t_chunk_èg
(
ba£
, 
√w_èg
);

236 
°©e
->
dv_size
 = 
psize
;

237 
p
->
hód
 = 
psize
|
√w_èg
|
PREV_INUSE_BIT
;

238 if(
√xt
 == 0){

239 
p
->
¥ev_foŸ
 |
NEXT_EXH_BIT
;

241 
√xt
->
¥ev_foŸ
 = (√xt->¥ev_foŸ & 
NEXT_EXH_BIT
Ë| 
psize
;

242 
√xt
->
hód
 &~
PREV_INUSE_BIT
;

245 
po°a˘i⁄
;

249 
îr‹a˘i⁄
;

254 i‡(
√xt
 =0 || (
	`likñy
(
	`ok_√xt
(
p
,ÇextË&& 
	`ok_¥ev_öu£
(next)))) {

255 i‡–
√xt
 !=0 && !
	`cuº_öu£
(next)) {

258 
size_t
 
√xt_èg
 = 
	`gë_chunk_èg
((
™y_chunk
*)
√xt
);

259 
size_t
 
nsize
 = 
	`chunk_size
(
√xt
);

260 if(
√xt_èg
 > 
√w_èg
){

261 
√w_èg
 = 
√xt_èg
;

262 }if(
√xt_èg
 != 0){

263 
	`£t_chunk_èg
(
√xt
, 
√w_èg
);

265 if(!
	`cuº_öu£
(
p
)){

266 
	`£t_chunk_èg
(
ba£
, 
√w_èg
);

267 
size_t
 
¥ev_èg
 = 
	`gë_chunk_èg
(
p
);

268 if(
¥ev_èg
 =
√w_èg
 &&Öªv_èg =
√xt_èg
){

269 
	`mã_cﬁ‹_èg
(
ba£
, 
csize
, 
	`èg_to_öt
(
√w_èg
));

270 }if(
¥ev_èg
 =
√w_èg
){

271 if(
√xt
 =
°©e
->
t›
){

272 
	`mã_cﬁ‹_èg
(
ba£
, 
°©e
->
t›_cﬁ‹ed_size
+
csize
, 
	`èg_to_öt
(
√w_èg
));

274 
	`mã_cﬁ‹_èg
(
ba£
, 
csize
+
nsize
, 
	`èg_to_öt
(
√w_èg
));

276 }if(
√w_èg
 =
√xt_èg
){

277 
	`mã_cﬁ‹_èg
(
p
, 
psize
, 
	`èg_to_öt
(
√w_èg
));

279 if(
√xt
 =
°©e
->
t›
){

280 
	`mã_cﬁ‹_èg
(
p
, 
psize
+
°©e
->
t›_cﬁ‹ed_size
, 
	`èg_to_öt
(
√w_èg
));

282 
	`mã_cﬁ‹_èg
(
p
, 
psize
+
nsize
, 
	`èg_to_öt
(
√w_èg
));

286 if(
√w_èg
 =
√xt_èg
){

287 
	`mã_cﬁ‹_èg
(
p
, 
psize
, 
	`èg_to_öt
(
√w_èg
));

288 }if(
√xt
 =
°©e
->
t›
){

289 
	`mã_cﬁ‹_èg
(
p
, 
psize
+
°©e
->
t›_cﬁ‹ed_size
, 
	`èg_to_öt
(
√w_èg
));

291 
	`mã_cﬁ‹_èg
(
p
, 
psize
+
nsize
, 
	`èg_to_öt
(
√w_èg
));

295 i‡(
√xt
 =
°©e
->
t›
) {

296 
size_t
 
tsize
 = 
°©e
->
t›_size
 +
psize
;

297 
°©e
->
t›_cﬁ‹ed_size
 +
psize
;

298 
°©e
->
t›
 = 
p
;

299 
p
->
hód
 = 
tsize
 | 
PREV_INUSE_BIT
 | 
√w_èg
;

300 i‡(
p
 =
°©e
->
dv
) {

301 
°©e
->
dv
 = 0;

302 
°©e
->
dv_size
 = 0;

304 i‡(
	`should_åim
(
°©e
, 
tsize
)) {

305 
	`sys_åim
(
°©e
, 0);

307 
po°a˘i⁄
;

309 i‡(
√xt
 =
°©e
->
dv
) {

310 
size_t
 
dsize
 = 
°©e
->
dv_size
 +
psize
;

311 
p
->
¥ev_foŸ
 |(
√xt
->¥ev_foŸ & 
NEXT_EXH_BIT
);

312 
°©e
->
dv
 = 
p
;

313 
p
->
hód
 = 
√w_èg
|
dsize
|
PREV_INUSE_BIT
;

314 if(
	`is_√xt_exhau°ed
(
√xt
)){

315 
p
->
¥ev_foŸ
 |
NEXT_EXH_BIT
;

317 
√xt
 = 
	`chunk_∂us_off£t
(
p
, 
dsize
);

318 
√xt
->
¥ev_foŸ
 = (√xt->¥ev_foŸ & 
NEXT_EXH_BIT
Ë| 
dsize
;

320 
po°a˘i⁄
;

323 
psize
 +
nsize
;

324 
	`u∆ök_chunk
(
°©e
, 
√xt
, 
nsize
);

325 
p
->
hód
 = 
√w_èg
| 
psize
| 
PREV_INUSE_BIT
;

326 if(
	`is_√xt_exhau°ed
(
√xt
)){

327 
p
->
¥ev_foŸ
 |
NEXT_EXH_BIT
;

329 
√xt
 = 
	`chunk_∂us_off£t
(
p
, 
psize
);

330 
√xt
->
¥ev_foŸ
 = (√xt->¥ev_foŸ & 
NEXT_EXH_BIT
)|
psize
;

332 i‡(
p
 =
°©e
->
dv
) {

333 
°©e
->
dv_size
 = 
psize
;

334 
po°a˘i⁄
;

339 if(!
	`cuº_öu£
(
p
)){

340 
size_t
 
¥ev_èg
 = 
	`gë_chunk_èg
(
p
);

341 if(
√w_èg
 =
¥ev_èg
){

342 
	`mã_cﬁ‹_èg
(
ba£
, 
csize
, 
	`èg_to_öt
(
√w_èg
));

344 
	`mã_cﬁ‹_èg
(
p
, 
psize
, 
	`èg_to_öt
(
√w_èg
));

346 
	`£t_chunk_èg
(
ba£
, 
√w_èg
);

348 
	`mã_cﬁ‹_èg
(
p
, 
psize
, 
	`èg_to_öt
(
√w_èg
));

350 
p
->
hód
 = 
psize
 | 
√w_èg
| 
PREV_INUSE_BIT
;

351 if(
√xt
 ==0){

352 
p
->
¥ev_foŸ
 |
NEXT_EXH_BIT
;

354 
√xt
->
¥ev_foŸ
 = (√xt->¥ev_foŸ & 
NEXT_EXH_BIT
Ë| 
psize
;

355 
√xt
->
hód
 &~
PREV_INUSE_BIT
;

359 i‡(
	`is_smÆl
(
psize
)) {

360 
	`ö£π_smÆl_chunk
(
°©e
, 
p
, 
psize
);

361 
	`check_‰ì_chunk
(
°©e
, 
p
);

364 
mÆloc_åì_chunk
 *
ç
 = (mÆloc_åì_chunk *Ë
p
;

365 
	`ö£π_œrge_chunk
(
°©e
, 
ç
, 
psize
);

366 
	`check_‰ì_chunk
(
°©e
, 
p
);

367 i‡(--
°©e
->
ªÀa£_checks
 == 0) {

368 
	`ªÀa£_unu£d_£gmíts
(
°©e
);

371 
po°a˘i⁄
;

374 
îr‹a˘i⁄
:

375 
	`ußge_îr‹
(
°©e
, 
p
);

376 
po°a˘i⁄
:

377 
	`POSTACTION
(
°©e
);

379 
	}
}

382 *
	$tmÆloc_œrge
(
mÆloc_°©e
 *
°©e
, 
size_t
 
nb
) {

383 
mÆloc_åì_chunk
 *
v
 = 0;

384 
size_t
 
rsize
 = -
nb
;

385 
mÆloc_åì_chunk
 *
t
;

386 
bö_ödex_t
 
idx
;

387 
	`compuã_åì_ödex
(
nb
, 
idx
);

388 i‡((
t
 = *
	`åì_bö_©
(
°©e
, 
idx
)) != 0) {

390 
size_t
 
sizebôs
 = 
nb
 << 
	`À·shi·_f‹_åì_ödex
(
idx
);

391 
mÆloc_åì_chunk
 *
r°
 = 0;

393 
mÆloc_åì_chunk
 *
π
;

394 
size_t
 
åem
 = 
	`chunk_size
(
t
Ë- 
nb
;

395 i‡(
åem
 < 
rsize
) {

396 
v
 = 
t
;

397 i‡((
rsize
 = 
åem
) == 0) {

401 
π
 = 
t
->
chûd
[1];

402 
t
 =Å->
chûd
[(
sizebôs
 >> (
SIZE_T_BITSIZE
 - (
size_t
) 1)) & 1];

403 i‡(
π
 !0 &&Ñà!
t
) {

404 
r°
 = 
π
;

406 i‡(
t
 == 0) {

407 
t
 = 
r°
;

410 
sizebôs
 <<= 1;

413 i‡(
t
 =0 && 
v
 == 0) {

414 
bö_m≠_t
 
À·_bôs
 = 
	`À·_bôs
(
	`ödex_to_bô
(
idx
)Ë& 
°©e
->
åì_m≠
;

415 i‡(
À·_bôs
 != 0) {

416 
bö_ödex_t
 
i
;

417 
bö_m≠_t
 
Àa°_bô
 = 
	`Àa°_bô
(
À·_bôs
);

418 
	`compuã_bô2idx
(
Àa°_bô
, 
i
);

419 
t
 = *
	`åì_bö_©
(
°©e
, 
i
);

423 
t
 != 0) {

424 
size_t
 
åem
 = 
	`chunk_size
(
t
Ë- 
nb
;

425 i‡(
åem
 < 
rsize
) {

426 
rsize
 = 
åem
;

427 
v
 = 
t
;

429 
t
 = 
	`À·mo°_chûd
(t);

433 i‡(
v
 !0 && 
rsize
 < (
size_t
Ë(
°©e
->
dv_size
 - 
nb
)) {

434 i‡(
	`likñy
(
	`ok_addªss
(
°©e
, 
v
))) {

435 
mÆloc_chunk
 *
r
 = 
	`chunk_∂us_off£t
(
v
, 
nb
);

436 
	`dl_as£π
(
	`chunk_size
(
v
Ë=
rsize
 + 
nb
);

437 i‡(
	`likñy
(
	`ok_√xt
(
v
, 
r
))) {

438 
	`u∆ök_œrge_chunk
(
°©e
, 
v
);

439 i‡(
rsize
 < 
MIN_CHUNK_SIZE
) {

440 
	`£t_öu£_™d_¥ev_öu£
(
°©e
, 
v
, (
rsize
 + 
nb
));

443 
	`£t_size_™d_¥ev_öu£_of_öu£_chunk
(
°©e
, 
v
, 
nb
);

446 
	`£t_chunk_èg
((
™y_chunk
*)
r
, 
	`gë_chunk_èg
((™y_chunk*)
v
));

447 
r
->
¥ev_foŸ
 = 
nb
| (
v
->¥ev_foŸ & 
NEXT_EXH_BIT
);

448 
v
->
¥ev_foŸ
 &~
NEXT_EXH_BIT
;

451 
	`£t_size_™d_¥ev_öu£_of_‰ì_chunk
(
r
, 
rsize
);

452 
	`ö£π_chunk
(
°©e
, 
r
, 
rsize
);

454  
	`chunk_to_mem
(
v
);

457 
	`c‹ru±i⁄_îr‹
(
°©e
);

460 
	}
}

463 *
	$tmÆloc_smÆl
(
mÆloc_°©e
 *
°©e
, 
size_t
 
nb
) {

464 
mÆloc_åì_chunk
 *
t
, *
v
;

465 
bö_ödex_t
 
i
;

466 
bö_m≠_t
 
Àa°_bô
 = 
	`Àa°_bô
(
°©e
->
åì_m≠
);

467 
	`compuã_bô2idx
(
Àa°_bô
, 
i
);

468 
v
 = 
t
 = *
	`åì_bö_©
(
°©e
, 
i
);

469 
size_t
 
rsize
 = 
	`chunk_size
(
t
Ë- 
nb
;

471 (
t
 = 
	`À·mo°_chûd
(t)) != 0) {

472 
size_t
 
åem
 = 
	`chunk_size
(
t
Ë- 
nb
;

473 i‡(
åem
 < 
rsize
) {

474 
rsize
 = 
åem
;

475 
v
 = 
t
;

479 i‡(
	`likñy
(
	`ok_addªss
(
°©e
, 
v
))) {

480 
mÆloc_chunk
 *
r
 = 
	`chunk_∂us_off£t
(
v
, 
nb
);

481 
	`dl_as£π
(
	`chunk_size
(
v
Ë=
rsize
 + 
nb
);

482 i‡(
	`likñy
(
	`ok_√xt
(
v
, 
r
))) {

483 
	`u∆ök_œrge_chunk
(
°©e
, 
v
);

484 i‡(
rsize
 < 
MIN_CHUNK_SIZE
) {

485 
	`£t_öu£_™d_¥ev_öu£
(
°©e
, 
v
, (
rsize
 + 
nb
));

488 
	`£t_size_™d_¥ev_öu£_of_öu£_chunk
(
°©e
, 
v
, 
nb
);

491 
	`£t_chunk_èg
((
™y_chunk
*)
r
, 
	`gë_chunk_èg
((™y_chunk*)
v
));

492 
r
->
¥ev_foŸ
 = 
nb
 | (
v
->¥ev_foŸ & 
NEXT_EXH_BIT
);

493 
v
->
¥ev_foŸ
 &~
NEXT_EXH_BIT
;

496 
	`£t_size_™d_¥ev_öu£_of_‰ì_chunk
(
r
, 
rsize
);

497 
	`ª∂a˚_dv
(
°©e
, 
r
, 
rsize
);

499  
	`chunk_to_mem
(
v
);

503 
	`c‹ru±i⁄_îr‹
(
°©e
);

505 
	}
}

508 
mÆloc_chunk
 *
	$åy_ªÆloc_chunk
(
mÆloc_°©e
 *
°©e
, 
mÆloc_chunk
 *
chunk
, 
size_t
 
nb
, 
ˇn_move
) {

509 
nb
+=16;

510 
mÆloc_chunk
 *
√w_p
 = 0;

511 
size_t
 
ﬁd_size
 = 
	`chunk_size
(
chunk
);

512 
size_t
 
èg
 = 
	`gë_chunk_èg
(
chunk
);

513 
mÆloc_chunk
 *
√xt
 = 
	`is_√xt_exhau°ed
(
chunk
)? 0: 
	`chunk_∂us_off£t
(chunk, 
ﬁd_size
);

514 i‡(
	`likñy
(
	`ok_addªss
(
°©e
, 
chunk
Ë&& 
	`ok_öu£
(chunkË&& (
√xt
 =0 || (
	`ok_√xt
(chunk,ÇextË&& 
	`ok_¥ev_öu£
(next))))) {

515 i‡(
	`is_mm≠≥d
(
chunk
)) {

516 
√w_p
 = 
	`mm≠_ªsize
(
°©e
, 
chunk
, 
nb
, 
ˇn_move
);

518 i‡(
ﬁd_size
 >
nb
) {

519 
size_t
 
rsize
 = 
ﬁd_size
 - 
nb
;

520 i‡(
rsize
 >
MIN_CHUNK_SIZE
) {

521 
mÆloc_chunk
 *
r
 = 
	`chunk_∂us_off£t
(
chunk
, 
nb
);

522 
chunk
->
hód
 = (chunk->hód & 
PREV_INUSE_BIT
)|
èg
|
nb
|
CURR_INUSE_BIT
;

523 
r
->
hód
 = 
èg
|
rsize
|
INUSE_BITS
;

524 if(
√xt
 == 0){

525 
r
->
¥ev_foŸ
 = 
nb
 | 
NEXT_EXH_BIT
;

526 
chunk
->
¥ev_foŸ
 &~
NEXT_EXH_BIT
;

528 
r
->
¥ev_foŸ
 = 
nb
;

529 
√xt
->
¥ev_foŸ
 = (√xt->¥ev_foŸ & 
NEXT_EXH_BIT
Ë| 
rsize
;

531 
	`di•o£_chunk
(
°©e
, 
r
, 
rsize
);

533 
	`check_öu£_chunk
(
°©e
, 
chunk
);

534 
√w_p
 = 
chunk
;

535 }if(
√xt
 =0 || 
	`cuº_öu£
(next)){

536  
√w_p
;

537 }i‡(
√xt
 =
°©e
->
t›
) {

538 i‡(
ﬁd_size
 + 
°©e
->
t›_size
 > 
nb
) {

539 
size_t
 
√w_size
 = 
ﬁd_size
 + 
°©e
->
t›_size
;

540 
size_t
 
√w_t›_size
 = 
√w_size
 - 
nb
;

541 
size_t
 
t›_èg
 = 
	`gë_chunk_èg
(
°©e
->
t›
);

542 
èg
 = 
	`èg_max
—ag, 
t›_èg
);

543 
mÆloc_chunk
 *
√w_t›
 = 
	`chunk_∂us_off£t
(
chunk
, 
nb
);

544 
	`£t_öu£
(
°©e
, 
chunk
, 
nb
);

545 
	`£t_chunk_èg
(
chunk
, 
èg
);

546 
√w_t›
->
hód
 = 
√w_t›_size
 | 
PREV_INUSE_BIT
 | 
t›_èg
;

547 
°©e
->
t›
 = 
√w_t›
;

548 
°©e
->
t›_size
 = 
√w_t›_size
;

549 
°©e
->
t›
->
¥ev_foŸ
 = 
nb
;

550 
√w_p
 = 
chunk
;

552 }i‡(
√xt
 =
°©e
->
dv
) {

553 
size_t
 
dvs
 = 
°©e
->
dv_size
;

554 i‡(
ﬁd_size
 + 
dvs
 >
nb
) {

555 
size_t
 
dsize
 = 
ﬁd_size
 + 
dvs
 - 
nb
;

556 
size_t
 
√w_èg
 = 
	`gë_chunk_èg
(
°©e
->
dv
);

557 
èg
 = 
	`èg_max
—ag, 
√w_èg
);

559 i‡(
dsize
 >
MIN_CHUNK_SIZE
) {

560 
mÆloc_chunk
 *
r
 = 
	`chunk_∂us_off£t
(
chunk
, 
nb
);

561 
mÆloc_chunk
 *
n
 = 
	`is_√xt_exhau°ed
(
°©e
->
dv
)? 0: 
	`chunk_∂us_off£t
(
r
, 
dsize
);

562 
chunk
->
hód
 = 
èg
 | 
nb
 | (chunk->hód & 
PREV_INUSE_BIT
)|
CURR_INUSE_BIT
;

563 
r
->
hód
 = 
√w_èg
 | 
dsize
 | 
PREV_INUSE_BIT
;

566 if(
n
 == 0){

567 
r
->
¥ev_foŸ
 = 
nb
|
NEXT_EXH_BIT
;

569 
r
->
¥ev_foŸ
 = 
nb
;

570 
n
->
¥ev_foŸ
 = (n->¥ev_foŸ & 
NEXT_EXH_BIT
Ë| 
dsize
;

571 
	`˛ór_¥ev_öu£
(
n
);

573 
°©e
->
dv_size
 = 
dsize
;

574 
°©e
->
dv
 = 
r
;

577 
size_t
 
√w_size
 = 
ﬁd_size
 + 
dvs
;

578 
mÆloc_chunk
* 
n
 = 
	`is_√xt_exhau°ed
(
°©e
->
dv
)? 0: 
	`chunk_∂us_off£t
(°©e->dv, 
dvs
);

579 
chunk
->
hód
 = 
èg
 | 
√w_size
 | (chunk->hód & 
FLAG_BITS
);

580 if(
n
== 0){

581 
chunk
->
¥ev_foŸ
 |
NEXT_EXH_BIT
;

583 
n
->
¥ev_foŸ
 = (n->¥ev_foŸ & 
NEXT_EXH_BIT
Ë| 
√w_size
;

584 
n
->
hód
 |
PREV_INUSE_BIT
;

586 
°©e
->
dv_size
 = 0;

587 
°©e
->
dv
 = 0;

589 
√w_p
 = 
chunk
;

592 
size_t
 
√xt_size
 = 
	`chunk_size
(
√xt
);

593 
size_t
 
√xt_èg
 = 
	`gë_chunk_èg
(
√xt
);

594 
èg
 = 
	`èg_max
—ag, 
√xt_èg
);

596 i‡(
ﬁd_size
 + 
√xt_size
 >
nb
) {

597 
size_t
 
rsize
 = 
ﬁd_size
 + 
√xt_size
 - 
nb
;

598 
	`u∆ök_chunk
(
°©e
, 
√xt
, 
√xt_size
);

599 i‡(
rsize
 < 
MIN_CHUNK_SIZE
) {

600 
size_t
 
√w_size
 = 
ﬁd_size
 + 
√xt_size
;

601 
chunk
->
hód
 = (chunk->hód & 
INUSE_BITS
Ë| 
√w_size
 | 
èg
;

602 if(
	`is_√xt_exhau°ed
(
√xt
)){

603 
chunk
->
¥ev_foŸ
 |
NEXT_EXH_BIT
;

605 
mÆloc_chunk
* 
n
 = 
	`chunk_∂us_off£t
(
chunk
, 
√w_size
);

606 
n
->
¥ev_foŸ
 = (n->¥ev_foŸ & 
NEXT_EXH_BIT
Ë| 
√w_size
;

607 
n
->
hód
 |
PREV_INUSE_BIT
;

611 
mÆloc_chunk
 *
r
 = 
	`chunk_∂us_off£t
(
chunk
, 
nb
);

612 
mÆloc_chunk
 *
n
 = 
	`is_√xt_exhau°ed
(
√xt
)? 0: 
	`chunk_∂us_off£t
(
r
, 
rsize
);

613 
chunk
->
hód
 = 
èg
 | 
nb
 | (chunk->hód & 
INUSE_BITS
);

614 if(
n
 == 0){

615 
r
->
¥ev_foŸ
 = 
nb
|
NEXT_EXH_BIT
;

616 
r
->
hód
 = 
√xt_èg
 | 
rsize
 | 
INUSE_BITS
;

618 
r
->
¥ev_foŸ
 = 
nb
;

619 
r
->
hód
 = 
√xt_èg
 | 
rsize
 | 
INUSE_BITS
;

620 
n
->
hód
 |
PREV_INUSE_BIT
;

621 
n
->
¥ev_foŸ
 = (n->¥ev_foŸ & 
NEXT_EXH_BIT
)|
rsize
;

623 
	`di•o£_chunk
(
°©e
, 
r
, 
rsize
);

625 
√w_p
 = 
chunk
;

630 
	`ußge_îr‹
(
°©e
, 
	`chunk_to_mem
(
chunk
));

632  
√w_p
;

633 
	}
}

635 *
	$öã∫Æ_memÆign
(
mÆloc_°©e
 *
°©e
, 
size_t
 
Æignmít
, size_à
byãs
) {

636 *
mem
 = 0;

637 i‡(
Æignmít
 < 
MIN_CHUNK_SIZE
) {

638 
Æignmít
 = 
MIN_CHUNK_SIZE
;

640 i‡((
Æignmít
 & (Æignmíà- (
size_t
) 1)) != 0) {

641 
size_t
 
a
 = 
MALLOC_ALIGNMENT
 << 1;

642 
a
 < 
Æignmít
) {

643 
a
 <<= 1;

645 
Æignmít
 = 
a
;

647 i‡(
byãs
 >
MAX_REQUEST
 - 
Æignmít
) {

648 i‡(
°©e
 != 0) {

649 
	`mÆloc_Áûuª
();

653 
size_t
 
nb
 = 
	`ªque°_to_size
(
byãs
);

654 
size_t
 
ªq
 = 
nb
 + 
Æignmít
 + 
MIN_CHUNK_SIZE
 - 
CHUNK_OVERHEAD
;

655 
mem
 = 
	`öã∫Æ_mÆloc
(
°©e
, 
ªq
);

656 i‡(
mem
 != 0) {

657 
mÆloc_chunk
 *
p
 = 
	`mem_to_chunk
(
mem
);

658 i‡(
	`PREACTION
(
°©e
)) {

661 i‡((((
size_t
Ë
mem
Ë& (
Æignmít
 - 1)) != 0) {

670 *
br
 = (*Ë
	`mem_to_chunk
(

671 (*Ë(((
size_t
Ë((*Ë
mem
 + 
Æignmít
 - (size_t) 1)) & -alignment));

672 *
pos
 = (
size_t
Ë(
br
 - (*Ë
p
Ë>
MIN_CHUNK_SIZE


673 ? 
br
 : b∏+ 
Æignmít
;

674 
mÆloc_chunk
 *
√w_p
 = (mÆloc_chunk *Ë
pos
;

675 
size_t
 
Àad_size
 = 
pos
 - (*Ë
p
;

676 
size_t
 
√w_size
 = 
	`chunk_size
(
p
Ë- 
Àad_size
;

678 i‡(
	`is_mm≠≥d
(
p
)) {

679 
√w_p
->
¥ev_foŸ
 = 
	`gë_¥ev_size
(
p
Ë+ 
Àad_size
;

680 
√w_p
->
hód
 = 
√w_size
;

683 
	`£t_öu£
(
°©e
, 
√w_p
, 
√w_size
);

684 
	`£t_öu£
(
°©e
, 
p
, 
Àad_size
);

685 
	`di•o£_chunk
(
°©e
, 
p
, 
Àad_size
);

687 
p
 = 
√w_p
;

691 i‡(!
	`is_mm≠≥d
(
p
)) {

692 
size_t
 
size
 = 
	`chunk_size
(
p
);

693 i‡(
size
 > 
nb
 + 
MIN_CHUNK_SIZE
) {

694 
size_t
 
ªmaödî_size
 = 
size
 - 
nb
;

695 
mÆloc_chunk
 *
ªmaödî
 = 
	`chunk_∂us_off£t
(
p
, 
nb
);

696 
	`£t_öu£
(
°©e
, 
p
, 
nb
);

697 
	`£t_öu£
(
°©e
, 
ªmaödî
, 
ªmaödî_size
);

698 
	`di•o£_chunk
(
°©e
, 
ªmaödî
, 
ªmaödî_size
);

702 
mem
 = 
	`chunk_to_mem
(
p
);

703 
	`dl_as£π
 (
	`chunk_size
(
p
Ë>
nb
);

704 
	`dl_as£π
(((
size_t
Ë
mem
 & (
Æignmít
 - 1)) == 0);

705 
	`check_öu£_chunk
(
°©e
, 
p
);

706 
	`POSTACTION
(
°©e
);

709  
mem
;

710 
	}
}

719 **
	$üŒoc
(
mÆloc_°©e
 *
°©e
, 
size_t
 
n_ñemíts
, size_à*
sizes
, 
›ts
, *
chunks
[]) {

720 
size_t
 
ñemít_size
;

721 
size_t
 
c⁄ã¡s_size
;

722 
size_t
 
¨øy_size
;

723 *
mem
;

724 
mÆloc_chunk
 *
p
;

725 
size_t
 
ªmaödî_size
;

726 **
m¨øy
;

727 
mÆloc_chunk
 *
¨øy_chunk
;

728 
Êag_t
 
was_íabÀd
;

729 
size_t
 
size
;

730 
size_t
 
i
;

732 
	`ísuª_öôüliz©i⁄
();

734 i‡(
chunks
 != 0) {

735 i‡(
n_ñemíts
 == 0) {

736  
chunks
;

738 
m¨øy
 = 
chunks
;

739 
¨øy_size
 = 0;

743 i‡(
n_ñemíts
 == 0) {

744  (**Ë
	`öã∫Æ_mÆloc
(
°©e
, 0);

746 
m¨øy
 = 0;

747 
¨øy_size
 = 
	`ªque°_to_size
(
n_ñemíts
 * ((*)));

751 i‡(
›ts
 & 0x1) {

752 
ñemít_size
 = 
	`ªque°_to_size
(*
sizes
);

753 
c⁄ã¡s_size
 = 
n_ñemíts
 * 
ñemít_size
;

756 
ñemít_size
 = 0;

757 
c⁄ã¡s_size
 = 0;

758 
i
 = 0; i !
n_ñemíts
; ++i) {

759 
c⁄ã¡s_size
 +
	`ªque°_to_size
(
sizes
[
i
]);

763 
size
 = 
c⁄ã¡s_size
 + 
¨øy_size
;

770 
was_íabÀd
 = 
	`u£_mm≠
(
°©e
);

771 
	`dißbÀ_mm≠
(
°©e
);

772 
mem
 = 
	`öã∫Æ_mÆloc
(
°©e
, 
size
 - 
CHUNK_OVERHEAD
);

773 i‡(
was_íabÀd
) {

774 
	`íabÀ_mm≠
(
°©e
);

776 i‡(
mem
 == 0) {

780 i‡(
	`PREACTION
(
°©e
)) {

783 
p
 = 
	`mem_to_chunk
(
mem
);

784 
ªmaödî_size
 = 
	`chunk_size
(
p
);

786 
	`dl_as£π
(!
	`is_mm≠≥d
(
p
));

788 i‡(
›ts
 & 0x2) {

789 
	`mem£t
((
size_t
 *Ë
mem
, 0, 
ªmaödî_size
 - (size_tË- 
¨øy_size
);

793 i‡(
m¨øy
 == 0) {

794 
size_t
 
¨øy_chunk_size
;

795 
¨øy_chunk
 = 
	`chunk_∂us_off£t
(
p
, 
c⁄ã¡s_size
);

796 
¨øy_chunk_size
 = 
ªmaödî_size
 - 
c⁄ã¡s_size
;

797 
m¨øy
 = (**Ë(
	`chunk_to_mem
(
¨øy_chunk
));

798 
	`£t_size_™d_¥ev_öu£_of_öu£_chunk
(
°©e
, 
¨øy_chunk
, 
¨øy_chunk_size
);

799 
ªmaödî_size
 = 
c⁄ã¡s_size
;

803 
i
 = 0;; ++i) {

804 
m¨øy
[
i
] = 
	`chunk_to_mem
(
p
);

805 i‡(
i
 !
n_ñemíts
 - 1) {

806 i‡(
ñemít_size
 != 0) {

807 
size
 = 
ñemít_size
;

810 
size
 = 
	`ªque°_to_size
(
sizes
[
i
]);

812 
ªmaödî_size
 -
size
;

813 
	`£t_size_™d_¥ev_öu£_of_öu£_chunk
(
°©e
, 
p
, 
size
);

814 
p
 = 
	`chunk_∂us_off£t
’, 
size
);

817 
	`£t_size_™d_¥ev_öu£_of_öu£_chunk
(
°©e
, 
p
, 
ªmaödî_size
);

822 #i‡
DEBUG


823 i‡(
m¨øy
 !
chunks
) {

825 i‡(
ñemít_size
 != 0) {

826 
	`dl_as£π
(
ªmaödî_size
 =
ñemít_size
);

829 
	`dl_as£π
(
ªmaödî_size
 =
	`ªque°_to_size
(
sizes
[
i
]));

831 
	`check_öu£_chunk
(
°©e
, 
	`mem_to_chunk
(
m¨øy
));

833 
i
 = 0; i !
n_ñemíts
; ++i) {

834 
	`check_öu£_chunk
(
°©e
, 
	`mem_to_chunk
(
m¨øy
[
i
]));

839 
	`POSTACTION
(
°©e
);

840  
m¨øy
;

841 
	}
}

850 
size_t
 
	$öã∫Æ_bulk_‰ì
(
mÆloc_°©e
 *
°©e
, *
¨øy
[], 
size_t
 
√Àm
) {

851 
size_t
 
un‰ìd
 = 0;

852 i‡(!
	`PREACTION
(
°©e
)) {

853 **
a
;

854 **
„n˚
 = &(
¨øy
[
√Àm
]);

855 
a
 = 
¨øy
;á !
„n˚
; ++a) {

856 *
mem
 = *
a
;

857 i‡(
mem
 != 0) {

858 
mÆloc_chunk
 *
p
 = 
	`mem_to_chunk
(
mem
);

859 
size_t
 
p_size
 = 
	`chunk_size
(
p
);

860 #i‡
FOOTERS


861 i‡(
	`gë_°©e_f‹
(
p
Ë!
°©e
) {

862 ++
un‰ìd
;

866 
	`check_öu£_chunk
(
°©e
, 
p
);

867 *
a
 = 0;

868 i‡(
	`likñy
(
	`ok_addªss
(
°©e
, 
p
Ë&& 
	`ok_öu£
(p))) {

869 **
b
 = 
a
 + 1;

870 
mÆloc_chunk
 *
√xt
 = 
	`√xt_chunk
(
p
);

871 i‡(
b
 !
„n˚
 && *b =
	`chunk_to_mem
(
√xt
)) {

872 
size_t
 
√w_size
 = 
	`chunk_size
(
√xt
Ë+ 
p_size
;

873 
	`£t_öu£
(
°©e
, 
p
, 
√w_size
);

874 *
b
 = 
	`chunk_to_mem
(
p
);

877 
	`di•o£_chunk
(
°©e
, 
p
, 
p_size
);

881 
	`c‹ru±i⁄_îr‹
(
°©e
);

886 i‡(
	`should_åim
(
°©e
, sèã->
t›_size
)) {

887 
	`sys_åim
(
°©e
, 0);

889 
	`POSTACTION
(
°©e
);

891  
un‰ìd
;

892 
	}
}

	@/home/iybang/dlmalloc/src/heap.h

1 #i‚de‡
DLALLOC_HEAP_H


2 
	#DLALLOC_HEAP_H


	)

4 
	~"mÆloc.h
"

5 
	~"öô.h
"

8 
	#Àa°_bô
(
x
Ë((xË& -(x))

	)

11 
	#À·_bôs
(
x
Ë((x << 1Ë| -(x << 1))

	)

14 
	#compuã_bô2idx
(
X
, 
I
)\

16 
J
;\

17 
J
 = 
	`__buûtö_˘z
(
X
); \

18 
I
 = (
bö_ödex_t
Ë
J
;\

19 }

	)

21 
ölöe
 *
	$öã∫Æ_mÆloc
(
dl_hóp_t
 
hóp
, 
size_t
 
size
) {

22 i‡(
hóp
 =&
globÆ_mÆloc_°©e
) {

23  
	`dl_mÆloc
(
size
);

26  
	`dl_hóp_mÆloc
(
hóp
, 
size
);

28 
	}
}

30 
ölöe
 
	$öã∫Æ_‰ì
(
dl_hóp_t
 
hóp
, *
mem
) {

31 i‡(
hóp
 =&
globÆ_mÆloc_°©e
) {

32 
	`dl_‰ì
(
mem
);

35 
	`dl_hóp_‰ì
(
hóp
, 
mem
);

37 
	}
}

39 *
dl_mÆloc_im∂
(
mÆloc_°©e
 *
°©e
, 
size_t
 
nb
);

41 
dl_‰ì_im∂
(
mÆloc_°©e
 *
°©e
, 
mÆloc_chunk
 *
p
);

43 *
tmÆloc_smÆl
(
mÆloc_°©e
 *
°©e
, 
size_t
 
nb
);

45 *
tmÆloc_œrge
(
mÆloc_°©e
 *
°©e
, 
size_t
 
nb
);

47 *
öã∫Æ_memÆign
(
mÆloc_°©e
 *
°©e
, 
size_t
 
Æignmít
, size_à
byãs
);

49 
size_t
 
öã∫Æ_bulk_‰ì
(
mÆloc_°©e
 *
°©e
, *
¨øy
[], size_à
√Àm
);

51 
mÆloc_chunk
 *
åy_ªÆloc_chunk
(
mÆloc_°©e
 *
°©e
, mÆloc_chunk *
chunk
, 
size_t
 
nb
, 
ˇn_move
);

53 **
üŒoc
(
mÆloc_°©e
 *
°©e
, 
size_t
 
n_ñemíts
, size_à*
sizes
, 
›ts
, *
chunks
[]);

	@/home/iybang/dlmalloc/src/init.c

1 
	~<uni°d.h
>

2 
	~<time.h
>

3 
	~<°dlib.h
>

5 
	~"mÆloc.h
"

6 
	~"öô.h
"

7 
	~"lock.h
"

10 * 
	g__mã_èg_mem
 = 
NULL
;

13 
mÆloc_∑øms
 
	g∑øms
;

16 
mÆloc_°©e
 
	gglobÆ_mÆloc_°©e
;

19 
	$öô_∑øms
() {

20 
	`ACQUIRE_MALLOC_GLOBAL_LOCK
();

21 i‡(
∑øms
.
magic
 == 0) {

22 
size_t
 
psize
 = 
	`sysc⁄f
(
_SC_PAGE_SIZE
);

23 
size_t
 
gsize
 = 
DEFAULT_GRANULARITY
 !0 ? DEFAULT_GRANULARITY : 
psize
;

31 i‡(((
size_t
) != (*))

32 || (
MAX_SIZE_T
 < 
MIN_CHUNK_SIZE
)

34 || (
MALLOC_ALIGNMENT
 < (
size_t
) 8U)

35 || ((
MALLOC_ALIGNMENT
 & (MALLOC_ALIGNMENT - (
size_t
) 1)) != 0)

36 || ((
MALLOC_CHUNK_SIZE
 & (MALLOC_CHUNK_SIZE - (
size_t
) 1)) != 0)

37 || ((
gsize
 & (gsizê- (
size_t
) 1)) != 0)

38 || ((
psize
 & (psizê- (
size_t
) 1)) != 0)) {

39 
	`ab‹t
();

41 
∑øms
.
gønuœrôy
 = 
gsize
;

42 
∑øms
.
∑ge_size
 = 
psize
;

43 
∑øms
.
mm≠_thªshﬁd
 = 
DEFAULT_MMAP_THRESHOLD
;

44 
∑øms
.
åim_thªshﬁd
 = 
DEFAULT_TRIM_THRESHOLD
;

45 #i‡
MORECORE_CONTIGUOUS


46 
∑øms
.
deÁu…_Êags
 = 
USE_LOCK_BIT
 | 
USE_MMAP_BIT
;

48 
∑øms
.
deÁu…_Êags
 = 
USE_LOCK_BIT
 | 
USE_MMAP_BIT
 | 
USE_NONCONTIGUOUS_BIT
;

51 
globÆ_mÆloc_°©e
.
Êags
 = 
∑øms
.
deÁu…_Êags
;

52 (Ë
	`INITIAL_LOCK
(&
globÆ_mÆloc_°©e
.
muãx
);

53 #i‡
LOCK_AT_FORK


54 
	`±hªad_©f‹k
(&
¥e_f‹k
, &
po°_f‹k_∑ª¡
, &
po°_f‹k_chûd
);

57 
size_t
 
magic
 = (size_tË(
	`time
(0) ^ (size_t) 0x55555555U);

58 
magic
 |(
size_t
) 8U;

59 
magic
 &~(
size_t
) 7U;

61 (*(vﬁ©ûê
size_t
 *Ë(&(
∑øms
.
magic
))) = magic;

64 
	`RELEASE_MALLOC_GLOBAL_LOCK
();

66 
	}
}

69 
	$ch™ge_∑øm
(
∑øm_numbî
, 
vÆue
) {

70 
	`ísuª_öôüliz©i⁄
();

71 
size_t
 
vÆ
 = 
vÆue
 =-1 ? 
MAX_SIZE_T
 : (size_t) value;

72 
∑øm_numbî
) {

73 
M_TRIM_THRESHOLD
:

74 
∑øms
.
åim_thªshﬁd
 = 
vÆ
;

76 
M_GRANULARITY
:

77 i‡(
vÆ
 >
∑øms
.
∑ge_size
 && (val & (val - 1)) == 0) {

78 
∑øms
.
gønuœrôy
 = 
vÆ
;

84 
M_MMAP_THRESHOLD
:

85 
∑øms
.
mm≠_thªshﬁd
 = 
vÆ
;

90 
	}
}

	@/home/iybang/dlmalloc/src/init.h

1 #i‚de‡
MALLOC_INIT_H


2 
	#MALLOC_INIT_H


	)

4 
	~"°©e.h
"

5 
	~"tmã.h
"

6 
	~"ªdbœck.h
"

15 
	smÆloc_∑øms
 {

16 
size_t
 
	mmagic
;

17 
size_t
 
	m∑ge_size
;

18 
size_t
 
	mgønuœrôy
;

19 
size_t
 
	mmm≠_thªshﬁd
;

20 
size_t
 
	måim_thªshﬁd
;

21 
Êag_t
 
	mdeÁu…_Êags
;

24 
mÆloc_∑øms
 
∑øms
;

26 #i‡
DBG


27 
	gnum_mm≠
;

28 
size_t
 
	gbrk_addr
;

31 
size_t
 
	gw©îm¨k
;

32 
size_t
 
	gmm≠_w©îm¨k
;

34 
öô_∑øms
();

36 
ch™ge_∑øm
(
∑øm_numbî
, 
vÆue
);

39 
ölöe
 
	$ísuª_öôüliz©i⁄
() {

40 i‡(
∑øms
.
magic
 == 0) {

41 #i‡
DBG


42 
num_mm≠
 = 0;

43 
brk_addr
 = 0;

45 
w©îm¨k
 = 0;

46 
mm≠_w©îm¨k
 = 0;

47 
	`öô_∑øms
();

48 
	`mã_öô
();

49 
	`öô_ªdbœck_åì
();

51 
	}
}

54 
mÆloc_°©e
 
globÆ_mÆloc_°©e
;

56 
ölöe
 
	$is_globÆ
(
mÆloc_°©e
 *
°©e
) {

57  
°©e
 =&
globÆ_mÆloc_°©e
;

58 
	}
}

61 
ölöe
 
size_t
 
	$∑ge_Æign
(
size_t
 
size
) {

62  (
size
 + (
∑øms
.
∑ge_size
 - (
size_t
) 1)) & ~(params.page_size - (size_t) 1);

63 
	}
}

65 
ölöe
 
	$is_∑ge_Æig√d
(*
size
) {

66  ((
size_t
Ë
size
 & (
∑øms
.
∑ge_size
 - (size_t) 1)) == 0;

67 
	}
}

70 
ölöe
 
size_t
 
	$gønuœrôy_Æign
(
size_t
 
size
) {

71  (
size
 + (
∑øms
.
gønuœrôy
 - (
size_t
) 1)) & ~(params.granularity - (size_t) 1);

72 
	}
}

75 
ölöe
 
size_t
 
	$mm≠_Æign
(
size_t
 
size
) {

76  
	`∑ge_Æign
(
size
);

77 
	}
}

	@/home/iybang/dlmalloc/src/inspect.c

1 
	~<°döt.h
>

2 
	~<°dio.h
>

4 
	~"check.h
"

5 
	~"c⁄fig.h
"

6 
	~"debug.h
"

7 
	~"îr‹.h
"

8 
	~"öô.h
"

9 
	~"lock.h
"

10 
	~"log.h
"

11 
	~"mÆloc.h
"

12 
	~"os.h
"

13 
	~"£gmít.h
"

14 
	~"°©e.h
"

16 
mÆlöfo
 
	$öã∫Æ_mÆlöfo
(
mÆloc_°©e
 *
°©e
) {

17 
mÆlöfo
 mallinfo = {

18 .
¨ía
 = 0,

19 .
‹dblks
 = 0,

20 .
smblks
 = 0,

21 .
hblks
 = 0,

22 .
hblkhd
 = 0,

23 .
usmblks
 = 0,

24 .
fsmblks
 = 0,

25 .
u‹dblks
 = 0,

26 .
f‹dblks
 = 0,

27 .
kìpco°
 = 0,

29 
	`ísuª_öôüliz©i⁄
();

30 i‡(!
	`PREACTION
(
°©e
)) {

31 
	`check_mÆloc_°©e
(
°©e
);

32 i‡(
	`is_öôülized
(
°©e
)) {

33 
size_t
 
n‰ì
 = (size_t) 1;

34 
size_t
 
m‰ì
 = 
°©e
->
t›_size
 + 
TOP_FOOT_SIZE
;

35 
size_t
 
sum
 = 
m‰ì
;

36 
mÆloc_£gmít
 *
£gmít
 = &
°©e
->segment;

37 
£gmít
 != 0) {

38 
mÆloc_chunk
 *
chunk
 = 
	`Æign_as_chunk
(
£gmít
->
ba£
);

39 
	`£gmít_hﬁds
(
£gmít
, 
chunk
Ë&& chunk !
°©e
->
t›
 && chunk->
hód
 !
FENCEPOST_HEAD
) {

40 
size_t
 
sz
 = 
	`chunk_size
(
chunk
);

41 
sum
 +
sz
;

42 i‡(!
	`is_öu£
(
chunk
)) {

43 
m‰ì
 +
sz
;

44 ++
n‰ì
;

46 
chunk
 = 
	`√xt_chunk
(chunk);

48 
£gmít
 = segmít->
√xt
;

51 
mÆlöfo
.
¨ía
 = 
sum
;

52 
mÆlöfo
.
‹dblks
 = 
n‰ì
;

53 
mÆlöfo
.
hblkhd
 = 
°©e
->
foŸ¥öt
 - 
sum
;

54 
mÆlöfo
.
usmblks
 = 
°©e
->
max_foŸ¥öt
;

55 
mÆlöfo
.
u‹dblks
 = 
°©e
->
foŸ¥öt
 - 
m‰ì
;

56 
mÆlöfo
.
f‹dblks
 = 
m‰ì
;

57 
mÆlöfo
.
kìpco°
 = 
°©e
->
t›_size
;

60 
	`POSTACTION
(
°©e
);

62  
mÆlöfo
;

63 
	}
}

65 
dl_exp‹t
 
mÆlöfo
 
	$dl_mÆlöfo
() {

66  
	`öã∫Æ_mÆlöfo
(&
globÆ_mÆloc_°©e
);

67 
	}
}

69 
	$öã∫Æ_mÆloc_°©s
(
mÆloc_°©e
 *
°©e
) {

70 
	`ísuª_öôüliz©i⁄
();

71 i‡(!
	`PREACTION
(
°©e
)) {

72 
size_t
 
max_foŸ¥öt
 = 0;

73 
size_t
 
foŸ¥öt
 = 0;

74 
size_t
 
u£d
 = 0;

75 
	`check_mÆloc_°©e
(
°©e
);

76 i‡(
	`is_öôülized
(
°©e
)) {

77 
mÆloc_£gmít
 *
£gmít
 = &
°©e
->segment;

78 
max_foŸ¥öt
 = 
°©e
->max_footprint;

79 
foŸ¥öt
 = 
°©e
->footprint;

80 
u£d
 = 
foŸ¥öt
 - (
°©e
->
t›_size
 + 
TOP_FOOT_SIZE
);

81 
£gmít
 != 0) {

82 
mÆloc_chunk
 *
chunk
 = 
	`Æign_as_chunk
(
£gmít
->
ba£
);

83 
	`£gmít_hﬁds
(
£gmít
, 
chunk
Ë&& chunk !
°©e
->
t›
 && chunk->
hód
 !
FENCEPOST_HEAD
) {

84 i‡(!
	`is_öu£
(
chunk
)) {

85 
u£d
 -
	`chunk_size
(
chunk
);

87 
chunk
 = 
	`√xt_chunk
(chunk);

89 
£gmít
 = segmít->
√xt
;

92 
	`POSTACTION
(
°©e
);

93 
	`dl_Ârötf
(
°dîr
, "max sy°em byã†%10lu\n", (Ë(
max_foŸ¥öt
));

94 
	`dl_Ârötf
(
°dîr
, "sy°em byã† = %10lu\n", (Ë(
foŸ¥öt
));

95 
	`dl_Ârötf
(
°dîr
, "ö u£ byã† = %10lu\n", (Ë(
u£d
));

97 
	}
}

99 
dl_exp‹t
 
	$dl_mÆloc_°©s
() {

100 
	`öã∫Æ_mÆloc_°©s
(&
globÆ_mÆloc_°©e
);

101 
	}
}

103 
dl_exp‹t
 
	$dl_hóp_mÆloc_°©s
(
dl_hóp_t
 
hóp
) {

104 
mÆloc_°©e
 *
°©e
 = (mÆloc_°©ê*Ë
hóp
;

105 i‡(
	`ok_magic
(
°©e
)) {

106 
	`öã∫Æ_mÆloc_°©s
(
°©e
);

109 
	`ußge_îr‹
(
°©e
, state);

111 
	}
}

113 
	$öã∫Æ_ö•e˘_Æl
(

114 
mÆloc_°©e
 *
°©e
,

115 (*
h™dÀr
)(*
°¨t
, *
íd
, 
size_t
 
u£d_byãs
, *
ˇŒback_¨g
),

116 *
¨g


118 i‡(
	`is_öôülized
(
°©e
)) {

119 
mÆloc_chunk
 *
t›
 = 
°©e
->top;

120 
mÆloc_£gmít
 *
£gmít
 = &
°©e
->segment;

121 
£gmít
 != 0) {

122 
mÆloc_chunk
 *
chunk
 = 
	`Æign_as_chunk
(
£gmít
->
ba£
);

123 
	`£gmít_hﬁds
(
£gmít
, 
chunk
Ë&& chunk->
hód
 !
FENCEPOST_HEAD
) {

124 
mÆloc_chunk
 *
√xt
 = 
	`√xt_chunk
(
chunk
);

125 
size_t
 
size
 = 
	`chunk_size
(
chunk
);

126 
size_t
 
u£d
;

127 *
°¨t
;

128 i‡(
	`is_öu£
(
chunk
)) {

129 
u£d
 = 
size
 - 
CHUNK_OVERHEAD
;

130 
°¨t
 = 
	`chunk_to_mem
(
chunk
);

133 
u£d
 = 0;

134 i‡(
	`is_smÆl
(
size
)) {

135 
°¨t
 = (*Ë((*Ë
chunk
 + (
mÆloc_chunk
));

138 
°¨t
 = (*Ë((*Ë
chunk
 + (
mÆloc_åì_chunk
));

141 i‡(
°¨t
 < (*Ë
√xt
) {

142 
	`h™dÀr
(
°¨t
, 
√xt
, 
u£d
, 
¨g
);

144 i‡(
chunk
 =
t›
) {

147 
chunk
 = 
√xt
;

149 
£gmít
 = segmít->
√xt
;

152 
	}
}

154 
dl_exp‹t
 
	$dl_mÆloc_ö•e˘_Æl
(

155 (*
h™dÀr
)(*
°¨t
, *
íd
, 
size_t
 
u£d_byãs
, *
ˇŒback_¨g
),

156 *
¨g


158 
	`ísuª_öôüliz©i⁄
();

159 i‡(!
	`PREACTION
(&
globÆ_mÆloc_°©e
)) {

160 
	`öã∫Æ_ö•e˘_Æl
(&
globÆ_mÆloc_°©e
, 
h™dÀr
, 
¨g
);

161 
	`POSTACTION
(&
globÆ_mÆloc_°©e
);

163 
	}
}

165 
dl_exp‹t
 
	$dl_hóp_ö•e˘_Æl
(

166 
dl_hóp_t
 
hóp
,

167 (*
h™dÀr
)(*
°¨t
, *
íd
, 
size_t
 
u£d_byãs
, *
ˇŒback_¨g
),

168 *
¨g


170 
mÆloc_°©e
 *
°©e
 = (mÆloc_°©ê*Ë
hóp
;

171 i‡(
	`ok_magic
(
°©e
)) {

172 i‡(!
	`PREACTION
(
°©e
)) {

173 
	`öã∫Æ_ö•e˘_Æl
(
°©e
, 
h™dÀr
, 
¨g
);

174 
	`POSTACTION
(
°©e
);

178 
	`ußge_îr‹
(
°©e
, state);

180 
	}
}

182 
dl_exp‹t
 
size_t
 
	$dl_mÆloc_foŸ¥öt
() {

183  
globÆ_mÆloc_°©e
.
foŸ¥öt
;

184 
	}
}

186 
dl_exp‹t
 
size_t
 
	$dl_mÆloc_max_foŸ¥öt
() {

187  
globÆ_mÆloc_°©e
.
max_foŸ¥öt
;

188 
	}
}

190 
dl_exp‹t
 
size_t
 
	$dl_mÆloc_foŸ¥öt_limô
() {

191 i‡(
globÆ_mÆloc_°©e
.
foŸ¥öt_limô
 == 0) {

192  
MAX_SIZE_T
;

195  
globÆ_mÆloc_°©e
.
foŸ¥öt_limô
;

197 
	}
}

199 
dl_exp‹t
 
size_t
 
	$dl_mÆloc_£t_foŸ¥öt_limô
(
size_t
 
byãs
) {

200 
size_t
 
ªsu…
;

201 i‡(
byãs
 == 0) {

202 
ªsu…
 = 
	`gønuœrôy_Æign
(1);

204 i‡(
byãs
 =
MAX_SIZE_T
) {

205 
ªsu…
 = 0;

208 
ªsu…
 = 
	`gønuœrôy_Æign
(
byãs
);

210  
globÆ_mÆloc_°©e
.
foŸ¥öt_limô
 = 
ªsu…
;

211 
	}
}

213 
dl_exp‹t
 
size_t
 
	$dl_mÆloc_ußbÀ_size
(c⁄° *
mem
) {

214 i‡(
mem
 != 0) {

215 
mÆloc_chunk
 *
p
 = 
	`mem_to_chunk
((*Ë
mem
);

216 i‡(
	`is_öu£
(
p
)) {

217  
	`chunk_size
(
p
Ë- 
	`ovîhód_f‹
(p);

221 
	}
}

223 
dl_exp‹t
 
size_t
 
	$dl_hóp_foŸ¥öt
(
dl_hóp_t
 
hóp
) {

224 
size_t
 
ªsu…
 = 0;

225 
mÆloc_°©e
 *
°©e
 = (mÆloc_°©ê*Ë
hóp
;

226 i‡(
	`ok_magic
(
°©e
)) {

227 
ªsu…
 = 
°©e
->
foŸ¥öt
;

230 
	`ußge_îr‹
(
°©e
, state);

232  
ªsu…
;

233 
	}
}

235 
dl_exp‹t
 
size_t
 
	$dl_hóp_max_foŸ¥öt
(
dl_hóp_t
 
hóp
) {

236 
size_t
 
ªsu…
 = 0;

237 
mÆloc_°©e
 *
°©e
 = (mÆloc_°©ê*Ë
hóp
;

238 i‡(
	`ok_magic
(
°©e
)) {

239 
ªsu…
 = 
°©e
->
max_foŸ¥öt
;

242 
	`ußge_îr‹
(
°©e
, state);

244  
ªsu…
;

245 
	}
}

247 
dl_exp‹t
 
size_t
 
	$dl_hóp_foŸ¥öt_limô
(
dl_hóp_t
 
hóp
) {

248 
size_t
 
ªsu…
 = 0;

249 
mÆloc_°©e
 *
°©e
 = (mÆloc_°©ê*Ë
hóp
;

250 i‡(
	`ok_magic
(
°©e
)) {

251 
size_t
 
maf
 = 
°©e
->
foŸ¥öt_limô
;

252 
ªsu…
 = (
maf
 =0Ë? 
MAX_SIZE_T
 : maf;

255 
	`ußge_îr‹
(
°©e
, state);

257  
ªsu…
;

258 
	}
}

260 
dl_exp‹t
 
size_t
 
	$dl_hóp_£t_foŸ¥öt_limô
(
dl_hóp_t
 
hóp
, 
size_t
 
byãs
) {

261 
size_t
 
ªsu…
 = 0;

262 
mÆloc_°©e
 *
°©e
 = (mÆloc_°©ê*Ë
hóp
;

263 i‡(
	`ok_magic
(
°©e
)) {

264 i‡(
byãs
 == 0) {

265 
ªsu…
 = 
	`gønuœrôy_Æign
(1);

267 i‡(
byãs
 =
MAX_SIZE_T
) {

268 
ªsu…
 = 0;

271 
ªsu…
 = 
	`gønuœrôy_Æign
(
byãs
);

273 
°©e
->
foŸ¥öt_limô
 = 
ªsu…
;

276 
	`ußge_îr‹
(
°©e
, state);

278  
ªsu…
;

279 
	}
}

281 
dl_exp‹t
 
size_t
 
	$dl_hóp_ußbÀ_size
(c⁄° *
mem
) {

282 i‡(
mem
 != 0) {

283 
mÆloc_chunk
 *
p
 = 
	`mem_to_chunk
((*Ë
mem
);

284 i‡(
	`is_öu£
(
p
)) {

285  
	`chunk_size
(
p
Ë- 
	`ovîhód_f‹
(p);

289 
	}
}

291 #ifde‡
DEBUG


293 
	$öã∫Æ_¥öt_Æloˇti⁄s
(
mÆloc_°©e
 *
°©e
) {

294 
	`ísuª_öôüliz©i⁄
();

295 i‡(!
	`PREACTION
(
°©e
)) {

296 
	`check_mÆloc_°©e
(
°©e
);

297 i‡(
	`is_öôülized
(
°©e
)) {

298 
mÆloc_£gmít
 *
£gmít
 = &
°©e
->segment;

299 
£gmít
 != 0) {

300 
	`dl_¥ötf
(

306 (
uöçå_t
Ë
£gmít
,

307 (
uöçå_t
Ë
£gmít
->
ba£
,

308 
£gmít
->
size
,

309 
	`is_mm≠≥d_£gmít
(
£gmít
),

310 
	`is_exã∫_£gmít
(
£gmít
));

311 
mÆloc_chunk
 *
chunk
 = 
	`Æign_as_chunk
(
£gmít
->
ba£
);

312 
	`£gmít_hﬁds
(
£gmít
, 
chunk
Ë && chunk->
hód
 !
FENCEPOST_HEAD
) {

313 
	`dl_¥ötf
(

318 (
uöçå_t
Ë
chunk
,

319 
	`chunk_size
(
chunk
),

320 
	`is_öu£
(
chunk
),

321 
	`is_mm≠≥d
(
chunk
));

322 
chunk
 = 
	`√xt_chunk
(chunk);

324 
£gmít
 = segmít->
√xt
;

327 
	`POSTACTION
(
°©e
);

329 
	}
}

331 
dl_exp‹t
 
	$dl_¥öt_Æloˇti⁄s
() {

332 
	`öã∫Æ_¥öt_Æloˇti⁄s
(&
globÆ_mÆloc_°©e
);

333 
	}
}

335 
dl_exp‹t
 
	$dl_hóp_¥öt_Æloˇti⁄s
(
dl_hóp_t
 
hóp
) {

336 
mÆloc_°©e
 *
°©e
 = (mÆloc_°©ê*Ë
hóp
;

337 i‡(
	`ok_magic
(
°©e
)) {

338 
	`öã∫Æ_¥öt_Æloˇti⁄s
(
°©e
);

341 
	`ußge_îr‹
(
°©e
, state);

343 
	}
}

347 #ifde‡
DEBUG


349 #i‡
deföed
(
__GNUC__
Ë|| deföed(
__˛™g__
)

350 
__©åibuã__
((
de°ru˘‹
))

352 
	$⁄_exô
() {

354 
	}
}

	@/home/iybang/dlmalloc/src/lock-nolock.h

1 #i‚de‡
MALLOC_LOCK_NOLOCK_H


2 
	#MALLOC_LOCK_NOLOCK_H


	)

4 
	#INITIAL_LOCK
(
lock
Ë(0)

	)

5 
	#DESTROY_LOCK
(
lock
Ë(0)

	)

	@/home/iybang/dlmalloc/src/lock-pthread.c

1 
	~"c⁄fig.h
"

2 
	~"lock.h
"

4 
MLOCK_T
 
	gmÆloc_globÆ_muãx
 = 
PTHREAD_MUTEX_INITIALIZER
;

5 
MLOCK_T
 
	gªd_bœck_åì_muãx
 = 
PTHREAD_MUTEX_INITIALIZER
;

7 
	$±hªad_öô_lock
(
MLOCK_T
 *
lock
) {

8 
±hªad_muãx©å_t
 
©å
;

9 i‡(
	`±hªad_muãx©å_öô
(&
©å
)) {

12 i‡(
	`±hªad_muãx_öô
(
lock
, &
©å
)) {

15 i‡(
	`±hªad_muãx©å_de°roy
(&
©å
)) {

19 
	}
}

	@/home/iybang/dlmalloc/src/lock-pthread.h

1 #i‚de‡
MALLOC_LOCK_PTHREAD_H


2 
	#MALLOC_LOCK_PTHREAD_H


	)

4 
	~<±hªad.h
>

6 
±hªad_muãx_t
 
	tMLOCK_T
;

8 
	#ACQUIRE_LOCK
(
lock
Ë
	`±hªad_muãx_lock
÷ock)

	)

9 
	#RELEASE_LOCK
(
lock
Ë
	`±hªad_muãx_u∆ock
÷ock)

	)

10 
	#INITIAL_LOCK
(
lock
Ë
	`±hªad_öô_lock
÷ock)

	)

11 
	#DESTROY_LOCK
(
lock
Ë
	`±hªad_muãx_de°roy
÷ock)

	)

13 
±hªad_öô_lock
(
MLOCK_T
 *
lock
);

	@/home/iybang/dlmalloc/src/lock-recursive.c

1 
	~<±hªad.h
>

3 
	~"c⁄fig.h
"

4 
	~"lock.h
"

5 
	~"as£π.h
"

7 
MLOCK_T
 
	gmÆloc_globÆ_muãx
 = {

8 .
¶
 = 0,

9 .
	gc
 = 0,

10 .
	gthªad_id
 = (
±hªad_t
) 0,

13 
MLOCK_T
 
	gªd_bœck_åì_muãx
 = {

14 .
¶
 = 0,

15 .
	gc
 = 0,

16 .
	gthªad_id
 = (
±hªad_t
) 0,

19 
dl_f‹˚_ölöe
 
	$ªcursive_acquúe_lock
(
MLOCK_T
 *
lock
) {

20 
±hªad_t
 
my_thªad_id
 = 
	`±hªad_£lf
();

21 
•ös
 = 0;

23 i‡(*((vﬁ©ûê*Ë&
lock
->
¶
) == 0) {

24 i‡(!
	`CAS_LOCK
(&
lock
->
¶
)) {

25 
lock
->
thªad_id
 = 
my_thªad_id
;

26 
lock
->
c
 = 1;

30 i‡(
	`±hªad_equÆ
(
lock
->
thªad_id
, 
my_thªad_id
)) {

31 ++
lock
->
c
;

34 
	`SPIN
(
•ös
);

36 
	}
}

38 
dl_f‹˚_ölöe
 
	$ªcursive_ªÀa£_lock
(
MLOCK_T
 *
lock
) {

39 
	`dl_as£π
(
lock
->
¶
 != 0);

40 i‡(--
lock
->
c
 == 0) {

41 
	`CLEAR_LOCK
(&
lock
->
¶
);

43 
	}
}

	@/home/iybang/dlmalloc/src/lock-recursive.h

1 #i‚de‡
MALLOC_LOCK_RECURSIVE_H


2 
	#MALLOC_LOCK_RECURSIVE_H


	)

4 
	~<±hªad.h
>

6 
	smÆloc_ªcursive_lock
 {

7 
	m¶
;

8 
	mc
;

9 
±hªad_t
 
	mthªad_id
;

12 
mÆloc_ªcursive_lock
 
	tMLOCK_T
;

14 
	#ACQUIRE_LOCK
(
lock
Ë
	`ªcursive_acquúe_lock
÷ock)

	)

15 
	#RELEASE_LOCK
(
lock
Ë
	`ªcursive_ªÀa£_lock
÷ock)

	)

16 
	#INITIAL_LOCK
(
lock
Ë(÷ock)->
thªad_id
 = (
±hªad_t
Ë0, (lock)->
¶
 = 0, (lock)->
c
 = 0)

	)

17 
	#DESTROY_LOCK
(
lock
Ë(0)

	)

19 
ªcursive_acquúe_lock
(
MLOCK_T
 *
lock
);

21 
ªcursive_ªÀa£_lock
(
MLOCK_T
 *
lock
);

	@/home/iybang/dlmalloc/src/lock-spin.c

1 
	~"c⁄fig.h
"

2 
	~"lock.h
"

3 
	~"as£π.h
"

5 
MLOCK_T
 
	gmÆloc_globÆ_muãx
 = 0;

6 
MLOCK_T
 
	gªd_bœck_åì_muãx
 = 0;

9 
	$•ö_acquúe_lock
(*
¶
) {

10 
•ös
 = 0;

11 *(vﬁ©ûê*Ë
¶
 !0 || 
	`CAS_LOCK
(sl)) {

12 
	`SPIN
(
•ös
);

15 
	}
}

	@/home/iybang/dlmalloc/src/lock-spin.h

1 #i‚de‡
MALLOC_LOCK_SPIN_H


2 
	#MALLOC_LOCK_SPIN_H


	)

4 
	tMLOCK_T
;

6 
	#ACQUIRE_LOCK
(
lock
Ë(
	`CAS_LOCK
÷ockË? 
	`•ö_acquúe_lock
÷ockË: 0)

	)

7 
	#RELEASE_LOCK
(
lock
Ë(
	`CLEAR_LOCK
÷ock))

	)

8 
	#INITIAL_LOCK
(
lock
Ë(*lock = 0)

	)

9 
	#DESTROY_LOCK
(
lock
Ë(0)

	)

11 
•ö_acquúe_lock
(*
lock
);

	@/home/iybang/dlmalloc/src/lock.c

1 
	~"c⁄fig.h
"

2 
	~"lock.h
"

3 
	~"öô.h
"

5 #i‡
USE_LOCKS
 || 
USE_SPIN_LOCKS
 || 
USE_RECURSIVE_LOCKS
 || 
USE_PTHREAD_LOCKS


7 #i‡
USE_RECURSIVE_LOCKS


9 
	~"lock-ªcursive.c
"

11 #ñi‡
USE_PTHREAD_LOCKS


13 
	~"lock-±hªad.c
"

17 
	~"lock-•ö.c
"

23 #i‡
LOCK_AT_FORK


25 
	$¥e_f‹k
() {

26 
	`ACQUIRE_LOCK
(&
globÆ_mÆloc_°©e
.
muãx
);

27 
	}
}

29 
	$po°_f‹k_∑ª¡
() {

30 
	`RELEASE_LOCK
(&
globÆ_mÆloc_°©e
.
muãx
);

31 
	}
}

33 
	$po°_f‹k_chûd
() {

34 
	`INITIAL_LOCK
(&
globÆ_mÆloc_°©e
.
muãx
);

35 
	}
}

	@/home/iybang/dlmalloc/src/lock.h

1 #i‚de‡
MALLOC_LOCK_H


2 
	#MALLOC_LOCK_H


	)

4 
	~<sched.h
>

6 
	~"c⁄fig.h
"

30 #i‡
USE_LOCKS
 || 
USE_SPIN_LOCKS
 || 
USE_RECURSIVE_LOCKS
 || 
USE_PTHREAD_LOCKS


35 #i‡
deföed
(
__GNUC__
)

36 
	#CAS_LOCK
(
¶
Ë
	`__sync_lock_ã°_™d_£t
(¶, 1)

	)

37 
	#CLEAR_LOCK
(
¶
Ë
	`__sync_lock_ªÀa£
(¶)

	)

41 
	#SPINS_PER_YIELD
 63

	)

42 
	#SPIN_LOCK_YIELD
 
	`sched_yõld
();

	)

43 
	#SPIN
(
C
Ë{ i‡((++C & 
SPINS_PER_YIELD
Ë=0Ë{ 
SPIN_LOCK_YIELD
; } }

	)

45 #i‡
USE_RECURSIVE_LOCKS


47 
	~"lock-ªcursive.h
"

49 #ñi‡
USE_PTHREAD_LOCKS


51 
	~"lock-±hªad.h
"

55 
	~"lock-•ö.h
"

59 
MLOCK_T
 
mÆloc_globÆ_muãx
;

60 
MLOCK_T
 
ªd_bœck_åì_muãx
;

62 
	#ACQUIRE_MALLOC_GLOBAL_LOCK
(Ë
	`ACQUIRE_LOCK
(&
mÆloc_globÆ_muãx
);

	)

63 
	#RELEASE_MALLOC_GLOBAL_LOCK
(Ë
	`RELEASE_LOCK
(&
mÆloc_globÆ_muãx
);

	)

64 
	#ACQUIRE_TREE_GLOBAL_LOCK
(Ë
	`ACQUIRE_LOCK
(&
ªd_bœck_åì_muãx
);

	)

65 
	#RELEASE_TREE_GLOBAL_LOCK
(Ë
	`RELEASE_LOCK
(&
ªd_bœck_åì_muãx
);

	)

72 
	#PREACTION
(
°©e
Ë((
	`u£_lock
(°©e)Ë? 
	`ACQUIRE_LOCK
(&(°©e)->
muãx
Ë: 0)

	)

73 
	#POSTACTION
(
°©e
Ë{ i‡(
	`u£_lock
(°©e)Ë{ 
	`RELEASE_LOCK
(&(°©e)->
muãx
); } }

	)

77 
	~"lock-nﬁock.h
"

79 
	#ACQUIRE_MALLOC_GLOBAL_LOCK
()

	)

80 
	#RELEASE_MALLOC_GLOBAL_LOCK
()

	)

82 
	#PREACTION
(
M
Ë(0)

	)

83 
	#POSTACTION
(
M
)

	)

87 #i‡
LOCK_AT_FORK


89 
¥e_f‹k
();

91 
po°_f‹k_∑ª¡
();

93 
po°_f‹k_chûd
();

	@/home/iybang/dlmalloc/src/log.c

1 
	~<°d¨g.h
>

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~<uni°d.h
>

6 
	~"log.h
"

8 #i‚de‡
USE_STD_FPUTS


9 
	#USE_STD_FPUTS
 0

	)

12 
	$unbuf„ªd_Âuts
(
FILE
 *
fûe
, *
buf
) {

13 
fd
 = 
	`fûío
(
fûe
);

14 
size_t
 
Àn
 = 
	`°æí
(
buf
);

15 
Àn
 > 0) {

16 
size_t
 
w
 = 
	`wrôe
(
fd
, 
buf
, 
Àn
);

17 i‡(
w
 =(
size_t
) -1) {

20 
buf
 +
w
;

21 
Àn
 -
w
;

23 
	}
}

25 
	$dl_¥ötf
(c⁄° *
fmt
, ...) {

26 
buf
[256];

27 
va_li°
 
¨gs
;

28 
	`va_°¨t
(
¨gs
, 
fmt
);

29 
	`v¢¥ötf
(
buf
, (bufË- 1, 
fmt
, 
¨gs
);

30 
	`va_íd
(
¨gs
);

31 #i‡
USE_STD_FPUTS


32 
	`£tvbuf
(
°dîr
, 0, 
_IONBF
, 0);

33 
	`Âuts
(
buf
, 
°dout
);

35 
	`unbuf„ªd_Âuts
(
°dout
, 
buf
);

37 
	}
}

39 
	$dl_Ârötf
(
FILE
 *
fûe
, c⁄° *
fmt
, ...) {

40 
buf
[256];

41 
va_li°
 
¨gs
;

42 
	`va_°¨t
(
¨gs
, 
fmt
);

43 
	`v¢¥ötf
(
buf
, (bufË- 1, 
fmt
, 
¨gs
);

44 
	`va_íd
(
¨gs
);

45 #i‡
USE_STD_FPUTS


46 
	`£tvbuf
(
fûe
, 0, 
_IONBF
, 0);

47 
	`Âuts
(
buf
, 
fûe
);

49 
	`unbuf„ªd_Âuts
(
fûe
, 
buf
);

51 
	}
}

	@/home/iybang/dlmalloc/src/log.h

1 #i‚de‡
DLALLOC_LOG_H


2 
	#DLALLOC_LOG_H


	)

4 
	~<°dio.h
>

9 #i‡
deföed
(
__GNUC__
Ë|| deföed(
__˛™g__
)

10 
__©åibuã__
((
	$f‹m©
(
¥ötf
, 1, 2)))

12 
	`dl_¥ötf
(c⁄° *
fmt
, ...);

14 #i‡
	`deföed
(
__GNUC__
Ë|| deföed(
__˛™g__
)

15 
	`__©åibuã__
((
	$f‹m©
(
¥ötf
, 2, 3)))

17 
	`dl_Ârötf
(
FILE
 *
fûe
, c⁄° *
fmt
, ...);

	@/home/iybang/dlmalloc/src/os.c

1 
	~<sys/ty≥s.h
>

3 
	~"as£π.h
"

4 
	~"chunk.h
"

5 
	~"c⁄fig.h
"

6 
	~"debug.h
"

7 
	~"îr‹.h
"

8 
	~"öô.h
"

9 
	~"os.h
"

12 
	#SYS_ALLOC_PADDING
 (
TOP_FOOT_SIZE
 + 
MALLOC_ALIGNMENT
)

	)

14 
	#HALF_MAX_SIZE_T
 (
MAX_SIZE_T
 / 2U)

	)

27 *
	$mm≠_Æloc
(
mÆloc_°©e
 *
°©e
, 
size_t
 
size
) {

28 
size_t
 
mm_size
 = 
	`mm≠_Æign
(
size
 + (size_tË* 6 + 
CHUNK_ALIGN_MASK
);

29 i‡(
°©e
->
foŸ¥öt_limô
 != 0) {

30 
size_t
 
foŸ¥öt
 = 
°©e
->foŸ¥öà+ 
mm_size
;

31 i‡(
foŸ¥öt
 <
°©e
->foŸ¥öà|| foŸ¥öà> sèã->
foŸ¥öt_limô
) {

35 i‡(
mm_size
 > 
size
) {

36 *
mm
 = (*Ë
	`ˇŒ_mm≠
(
mm_size
);

37 i‡(
mm
 !
MFAIL
) {

38 
size_t
 
off£t
 = 
	`Æign_off£t
(
	`chunk_to_mem
(
mm
));

39 
size_t
 
p_size
 = 
mm_size
 - 
off£t
 - 
MMAP_FOOT_PAD
;

40 
mÆloc_chunk
 *
p
 = (mÆloc_chunk *Ë(
mm
 + 
off£t
);

41 
p
->
¥ev_foŸ
 = 
off£t
;

42 
p
->
hód
 = 
p_size
;

43 
	`m¨k_öu£_foŸ
(
°©e
, 
p
, 
p_size
);

44 
	`chunk_∂us_off£t
(
p
, 
p_size
)->
hód
 = 
FENCEPOST_HEAD
;

45 
	`chunk_∂us_off£t
(
p
, 
p_size
 + (
size_t
))->
hód
 = 0;

46 i‡(
°©e
->
Àa°_addr
 =0 || 
mm
 < state->least_addr) {

47 
°©e
->
Àa°_addr
 = 
mm
;

49 i‡((
°©e
->
foŸ¥öt
 +
mm_size
Ë> sèã->
max_foŸ¥öt
) {

50 
°©e
->
max_foŸ¥öt
 = sèã->
foŸ¥öt
;

52 
	`dl_as£π
(
	`is_Æig√d
(
	`chunk_to_mem
(
p
)));

53 
	`check_mm≠≥d_chunk
(
°©e
, 
p
);

54  
	`chunk_to_mem
(
p
);

58 
	}
}

61 
mÆloc_chunk
 *
	$mm≠_ªsize
(
mÆloc_°©e
 *
°©e
, 
mÆloc_chunk
 *
ﬁd_p
, 
size_t
 
size
, 
Êags
) {

62 
size_t
 
ﬁd_size
 = 
	`chunk_size
(
ﬁd_p
);

63 i‡(
	`is_smÆl
(
size
)) {

66 i‡(
ﬁd_size
 >
size
 + (
size_t
Ë&& (ﬁd_sizê- sizeË<(
∑øms
.
gønuœrôy
 << 1)) {

67  
ﬁd_p
;

70 
size_t
 
off£t
 = 
ﬁd_p
->
¥ev_foŸ
;

71 
size_t
 
ﬁd_mm_size
 = 
ﬁd_size
 + 
off£t
 + 
MMAP_FOOT_PAD
;

72 
size_t
 
√w_mm_size
 = 
	`mm≠_Æign
(
size
 + (size_tË* 6 + 
CHUNK_ALIGN_MASK
);

73 *
˝
 = (*Ë
	`ˇŒ_mªm≠
((*Ë
ﬁd_p
 - 
off£t
, 
ﬁd_mm_size
, 
√w_mm_size
, 
Êags
);

74 i‡(
˝
 !
MFAIL
) {

75 
mÆloc_chunk
 *
√w_p
 = (mÆloc_chunk *Ë(
˝
 + 
off£t
);

76 
size_t
 
p_size
 = 
√w_mm_size
 - 
off£t
 - 
MMAP_FOOT_PAD
;

77 
√w_p
->
hód
 = 
p_size
;

78 
	`m¨k_öu£_foŸ
(
°©e
, 
√w_p
, 
p_size
);

79 
	`chunk_∂us_off£t
(
√w_p
, 
p_size
)->
hód
 = 
FENCEPOST_HEAD
;

80 
	`chunk_∂us_off£t
(
√w_p
, 
p_size
 + (
size_t
))->
hód
 = 0;

81 i‡(
˝
 < 
°©e
->
Àa°_addr
) {

82 
°©e
->
Àa°_addr
 = 
˝
;

84 i‡((
°©e
->
foŸ¥öt
 +
√w_mm_size
 - 
ﬁd_mm_size
Ë> sèã->
max_foŸ¥öt
) {

85 
°©e
->
max_foŸ¥öt
 = sèã->
foŸ¥öt
;

87 
	`check_mm≠≥d_chunk
(
°©e
, 
√w_p
);

88  
√w_p
;

92 
	}
}

97 *
	$sys_Æloc
(
mÆloc_°©e
 *
°©e
, 
size_t
 
size
) {

98 
	`ísuª_öôüliz©i⁄
();

101 i‡(
	`u£_mm≠
(
°©e
Ë&& 
size
 >
∑øms
.
mm≠_thªshﬁd
 && sèã->
t›_size
 != 0) {

102 *
mem
 = 
	`mm≠_Æloc
(
°©e
, 
size
);

103 i‡(
mem
 != 0) {

104  
mem
;

108 
size_t
 
Æloc_size
 = 
	`gønuœrôy_Æign
(
size
 + 
SYS_ALLOC_PADDING
);

109 i‡(
Æloc_size
 <
size
) {

112 i‡(
°©e
->
foŸ¥öt_limô
 != 0) {

113 
size_t
 
foŸ¥öt
 = 
°©e
->foŸ¥öà+ 
Æloc_size
;

114 i‡(
foŸ¥öt
 <
°©e
->foŸ¥öà|| foŸ¥öà> sèã->
foŸ¥öt_limô
) {

119 *
tba£
 = 
MFAIL
;

120 
size_t
 
tsize
 = 0;

121 
Êag_t
 
mm≠_Êag
 = 0;

145 i‡(
MORECORE_CONTIGUOUS
 && !
	`u£_n⁄c⁄tiguous
(
°©e
)) {

146 *
br
 = 
MFAIL
;

147 
size_t
 
ssize
 = 
Æloc_size
;

148 
mÆloc_£gmít
 *
ss
 = (
°©e
->
t›
 =0Ë? 0 : 
	`£gmít_hﬁdög
(state, (*) state->top);

149 
	`ACQUIRE_MALLOC_GLOBAL_LOCK
();

151 i‡(
ss
 == 0) {

152 *
ba£
 = (*Ë
	`ˇŒ_sbrk
(0);

153 i‡(
ba£
 !
MFAIL
) {

155 i‡(!
	`is_∑ge_Æig√d
(
ba£
)) {

156 
ssize
 +
	`∑ge_Æign
((
size_t
Ë
ba£
) - (size_t) base;

158 
size_t
 
foŸ¥öt
 = 
°©e
->foŸ¥öà+ 
ssize
;

159 i‡(
ssize
 > 
size


160 && 
ssize
 < 
HALF_MAX_SIZE_T


161 && (
°©e
->
foŸ¥öt_limô
 =0 || (
foŸ¥öt
 > state->footprint && footprint <= state->footprint_limit))

162 && (
br
 = (*Ë
	`ˇŒ_sbrk
(
ssize
)Ë=
ba£
) {

163 
tba£
 = 
ba£
;

164 
tsize
 = 
ssize
;

170 
ssize
 = 
	`gønuœrôy_Æign
(
size
 - 
°©e
->
t›_size
 + 
SYS_ALLOC_PADDING
);

172 i‡(
ssize
 < 
HALF_MAX_SIZE_T
 && (
br
 = (*Ë
	`ˇŒ_sbrk
(ssize)Ë=
ss
->
ba£
 + ss->
size
) {

173 
tba£
 = 
br
;

174 
tsize
 = 
ssize
;

178 i‡(
tba£
 =
MFAIL
) {

179 i‡(
br
 !
MFAIL
) {

180 i‡(
ssize
 < 
HALF_MAX_SIZE_T
 && ssizê< 
size
 + 
SYS_ALLOC_PADDING
) {

181 
size_t
 
esize
 = 
	`gønuœrôy_Æign
(
size
 + 
SYS_ALLOC_PADDING
 - 
ssize
);

182 i‡(
esize
 < 
HALF_MAX_SIZE_T
) {

183 *
íd
 = (*Ë
	`ˇŒ_sbrk
(
esize
);

184 i‡(
íd
 !
MFAIL
) {

185 
ssize
 +
esize
;

188 (Ë
	`ˇŒ_sbrk
(-
ssize
);

189 
br
 = 
MFAIL
;

194 i‡(
br
 !
MFAIL
) {

195 
tba£
 = 
br
;

196 
tsize
 = 
ssize
;

199 
	`dißbÀ_c⁄tiguous
(
°©e
);

203 
	`RELEASE_MALLOC_GLOBAL_LOCK
();

206 i‡(
tba£
 =
MFAIL
) {

207 *
mp
 = (*Ë
	`ˇŒ_mm≠
(
Æloc_size
);

208 i‡(
mp
 !
MFAIL
) {

209 
tba£
 = 
mp
;

210 
tsize
 = 
Æloc_size
;

211 
mm≠_Êag
 = 
USE_MMAP_BIT
;

215 i‡(
tba£
 =
MFAIL
) {

216 i‡(
Æloc_size
 < 
HALF_MAX_SIZE_T
) {

217 *
br
 = 
MFAIL
;

218 *
íd
 = 
MFAIL
;

219 
	`ACQUIRE_MALLOC_GLOBAL_LOCK
();

220 
br
 = (*Ë
	`ˇŒ_sbrk
(
Æloc_size
);

221 
íd
 = (*Ë
	`ˇŒ_sbrk
(0);

222 
	`RELEASE_MALLOC_GLOBAL_LOCK
();

223 i‡(
br
 !
MFAIL
 && 
íd
 != MFAIL && br <Énd) {

224 
size_t
 
ssize
 = 
íd
 - 
br
;

225 i‡(
ssize
 > 
size
 + 
TOP_FOOT_SIZE
) {

226 
tba£
 = 
br
;

227 
tsize
 = 
ssize
;

233 i‡(
tba£
 !
MFAIL
) {

234 i‡((
°©e
->
foŸ¥öt
 +
tsize
Ë> sèã->
max_foŸ¥öt
) {

235 
°©e
->
max_foŸ¥öt
 = sèã->
foŸ¥öt
;

238 i‡(!
	`is_öôülized
(
°©e
)) {

239 i‡(
°©e
->
Àa°_addr
 =0 || 
tba£
 < state->least_addr) {

240 
°©e
->
Àa°_addr
 = 
tba£
;

242 
°©e
->
£gmít
.
ba£
 = 
tba£
;

243 
°©e
->
£gmít
.
size
 = 
tsize
;

244 
°©e
->
£gmít
.
Êags
 = 
mm≠_Êag
;

245 
°©e
->
magic
 = 
∑øms
.magic;

246 
°©e
->
ªÀa£_checks
 = 
MAX_RELEASE_CHECK_RATE
;

247 
	`öô_bös
(
°©e
);

248 i‡(
	`is_globÆ
(
°©e
)) {

249 
	`öô_t›
(
°©e
, (
mÆloc_chunk
 *Ë
tba£
, 
tsize
 - 
TOP_FOOT_SIZE
);

253 
mÆloc_chunk
 *
mn
 = 
	`√xt_chunk
(
	`mem_to_chunk
(
°©e
));

254 
	`öô_t›
(
°©e
, 
mn
, (
size_t
Ë((
tba£
 + 
tsize
Ë- (*ËmnË- 
TOP_FOOT_SIZE
);

259 
mÆloc_£gmít
 *
•
 = &
°©e
->
£gmít
;

261 
•
 !0 && 
tba£
 !•->
ba£
 + sp->
size
) {

262 
•
 = sp->
√xt
;

264 i‡(
•
 != 0

265 && !
	`is_exã∫_£gmít
(
•
)

266 && (
•
->
Êags
 & 
USE_MMAP_BIT
Ë=
mm≠_Êag


267 && 
	`£gmít_hﬁds
(
•
, 
°©e
->
t›
)) {

268 
•
->
size
 +
tsize
;

269 
	`öô_t›
(
°©e
, sèã->
t›
, sèã->
t›_size
 + 
tsize
);

272 i‡(
tba£
 < 
°©e
->
Àa°_addr
) {

273 
°©e
->
Àa°_addr
 = 
tba£
;

275 
•
 = &
°©e
->
£gmít
;

276 
•
 !0 && sp->
ba£
 !
tba£
 + 
tsize
) {

277 
•
 = sp->
√xt
;

279 i‡(
•
 !0 && !
	`is_exã∫_£gmít
(•Ë&& (•->
Êags
 & 
USE_MMAP_BIT
Ë=
mm≠_Êag
) {

280 *
ﬁdba£
 = 
•
->
ba£
;

281 
•
->
ba£
 = 
tba£
;

282 
•
->
size
 +
tsize
;

283  
	`¥ïíd_Æloc
(
°©e
, 
tba£
, 
ﬁdba£
, 
size
);

286 
	`add_£gmít
(
°©e
, 
tba£
, 
tsize
, 
mm≠_Êag
);

291 i‡(
size
 < 
°©e
->
t›_size
) {

292 
size_t
 
rsize
 = 
°©e
->
t›_size
 -
size
;

293 
size_t
 
tc_size
 = 
°©e
->
t›_cﬁ‹ed_size
;

294 
°©e
->
t›_cﬁ‹ed_size
 = 0;

295 
mÆloc_chunk
 *
p
 = 
°©e
->
t›
;

296 
mÆloc_chunk
 *
r
 = 
°©e
->
t›
 = 
	`chunk_∂us_off£t
(
p
, 
size
);

297 
r
->
hód
 = 
rsize
 | 
PREV_INUSE_BIT
;

298 
r
->
¥ev_foŸ
 = 
size
;

299 
	`£t_size_™d_¥ev_öu£_of_öu£_chunk
(
°©e
, 
p
, 
size
);

300 if(
tc_size
 > 
size
){

301 
°©e
->
t›_cﬁ‹ed_size
 = 
tc_size
-
size
;

302 
	`£t_chunk_èg
(
r
, 
	`gë_chunk_èg
(
p
));

303 }if(
tc_size
 != 0){

304 
	`mã_cﬁ‹_èg
(
p
, 
size
, 
	`èg_to_öt
(
	`gë_chunk_èg
(p)));

306 
	`check_t›_chunk
(
°©e
, sèã->
t›
);

307 
	`check_mÆlo˚d_chunk
(
°©e
, 
	`chunk_to_mem
(
p
), 
size
);

308  
	`chunk_to_mem
(
p
);

311 
	`mÆloc_Áûuª
();

313 
	}
}

317 
	$sys_åim
(
mÆloc_°©e
 *
°©e
, 
size_t
 
∑d
) {

318 
	`ísuª_öôüliz©i⁄
();

320 
size_t
 
ªÀa£d
 = 0;

321 i‡(
	`is_öôülized
(
°©e
Ë&& 
∑d
 < 
MAX_REQUEST
) {

322 
∑d
 +
TOP_FOOT_SIZE
;

324 i‡(
°©e
->
t›_size
 > 
∑d
) {

326 
size_t
 
unô
 = 
∑øms
.
gønuœrôy
;

327 
size_t
 
exåa
 = ((
°©e
->
t›_size
 - 
∑d
 + (
unô
 - (size_t) 1)) / unit - (size_t) 1) * unit;

328 
mÆloc_£gmít
 *
£gmít
 = 
	`£gmít_hﬁdög
(
°©e
, (*Ë°©e->
t›
);

330 i‡(!
	`is_exã∫_£gmít
(
£gmít
)) {

331 i‡(
	`is_mm≠≥d_£gmít
(
£gmít
)) {

332 i‡(
£gmít
->
size
 >
exåa
 && !
	`has_£gmít_lök
(
°©e
, segment)) {

333 
size_t
 
√w_size
 = 
£gmít
->
size
 - 
exåa
;

335 i‡(
	`ˇŒ_mªm≠
(
£gmít
->
ba£
, segmít->
size
, 
√w_size
, 0Ë!
MFAIL


336 || 
	`ˇŒ_munm≠
(
£gmít
->
ba£
 + 
√w_size
, 
exåa
) == 0) {

337 
ªÀa£d
 = 
exåa
;

342 i‡(
exåa
 >
HALF_MAX_SIZE_T
) {

343 
exåa
 = 
HALF_MAX_SIZE_T
 + (
size_t
Ë1 - 
unô
;

345 
	`ACQUIRE_MALLOC_GLOBAL_LOCK
();

348 *
ﬁd_br
 = (*Ë
	`ˇŒ_sbrk
(0);

349 i‡(
ﬁd_br
 =
£gmít
->
ba£
 + segmít->
size
) {

350 *
ªl_br
 = (*Ë
	`ˇŒ_sbrk
(-
exåa
);

351 *
√w_br
 = (*Ë
	`ˇŒ_sbrk
(0);

352 i‡(
ªl_br
 !
MFAIL
 && 
√w_br
 < 
ﬁd_br
) {

353 
ªÀa£d
 = 
ﬁd_br
 - 
√w_br
;

357 
	`RELEASE_MALLOC_GLOBAL_LOCK
();

361 i‡(
ªÀa£d
 != 0) {

362 
£gmít
->
size
 -
ªÀa£d
;

363 
°©e
->
foŸ¥öt
 -
ªÀa£d
;

364 
	`öô_t›
(
°©e
, sèã->
t›
, sèã->
t›_size
 - 
ªÀa£d
);

365 
	`check_t›_chunk
(
°©e
, sèã->
t›
);

370 
ªÀa£d
 +
	`ªÀa£_unu£d_£gmíts
(
°©e
);

373 i‡(
ªÀa£d
 =0 && 
°©e
->
t›_size
 > sèã->
åim_check
) {

374 
°©e
->
åim_check
 = 
MAX_SIZE_T
;

378  
ªÀa£d
 != 0 ? 1 : 0;

379 
	}
}

382 
size_t
 
	$ªÀa£_unu£d_£gmíts
(
mÆloc_°©e
 *
°©e
) {

383 
size_t
 
ªÀa£d
 = 0;

384 
num_£gmíts
 = 0;

385 
mÆloc_£gmít
 *
¥ev
 = &
°©e
->
£gmít
;

386 
mÆloc_£gmít
 *
£gmít
 = 
¥ev
->
√xt
;

387 
£gmít
 != 0) {

388 *
ba£
 = 
£gmít
->base;

389 
size_t
 
size
 = 
£gmít
->size;

390 
mÆloc_£gmít
 *
√xt
 = 
£gmít
->next;

391 ++
num_£gmíts
;

392 i‡(
	`is_mm≠≥d_£gmít
(
£gmít
Ë&& !
	`is_exã∫_£gmít
(segment)) {

393 
mÆloc_chunk
 *
p
 = 
	`Æign_as_chunk
(
ba£
);

394 
size_t
 
p_size
 = 
	`chunk_size
(
p
);

396 i‡(!
	`is_öu£
(
p
Ë&& (*Ë∞+ 
p_size
 >
ba£
 + 
size
 - 
TOP_FOOT_SIZE
) {

397 
mÆloc_åì_chunk
 *
ç
 = (mÆloc_åì_chunk *Ë
p
;

398 
	`dl_as£π
(
	`£gmít_hﬁds
(
£gmít
, (*) segment));

399 i‡(
p
 =
°©e
->
dv
) {

400 
°©e
->
dv
 = 0;

401 
°©e
->
dv_size
 = 0;

404 
	`u∆ök_œrge_chunk
(
°©e
, 
ç
);

406 i‡(
	`ˇŒ_munm≠
(
ba£
, 
size
) == 0) {

407 
ªÀa£d
 +
size
;

408 
°©e
->
foŸ¥öt
 -
size
;

410 
£gmít
 = 
¥ev
;

411 
£gmít
->
√xt
 =Çext;

414 
	`ö£π_œrge_chunk
(
°©e
, 
ç
, 
p_size
);

418 
¥ev
 = 
£gmít
;

419 
£gmít
 = 
√xt
;

422 
°©e
->
ªÀa£_checks
 = (
size_t
Ë
num_£gmíts
 > (size_tË
MAX_RELEASE_CHECK_RATE


423 ? (
size_t
Ë
num_£gmíts


424 : (
size_t
Ë
MAX_RELEASE_CHECK_RATE
;

425  
ªÀa£d
;

426 
	}
}

	@/home/iybang/dlmalloc/src/os.h

1 #i‚de‡
MALLOC_ALLOC_H


2 
	#MALLOC_ALLOC_H


	)

4 
	~<sys/ty≥s.h
>

5 
	~<f˙é.h
>

6 
	~<°dio.h
>

8 
	~<uni°d.h
>

10 
	#__USE_GNU


	)

11 
	~<sys/mm™.h
>

13 #unde‡
__USE_GNU


15 
	~"c⁄fig.h
"

16 
	~"sbrk.h
"

17 
	~"ªdbœck.h
"

20 
	#MFAIL
 ((*Ë-1)

	)

22 #i‡
DBG


23 
size_t
 
brk_addr
;

26 
size_t
 
w©îm¨k
;

27 
size_t
 
mm≠_w©îm¨k
;

29 
ölöe
 *
	$ˇŒ_sbrk
(
öçå_t
 
ö¸emít
) {

30 #i‡
	`deföed
(
DISABLE_SBRK
)

31 (Ë
ö¸emít
;

32  
MFAIL
;

33 #ñi‡
EMULATE_SBRK


34 
size_t
 
addr
;

35 if(!
ö¸emít
Ëö¸emíà3*
UNMAP_UNIT
;

37 
ö¸emít
 = in¸emíà% 
UNMAP_UNIT
 ? increment / UNMAP_UNIT * UNMAP_UNIT + UNMAP_UNIT : increment;

38 i‡(!
w©îm¨k
){

39 
addr
 = 
	`sbrk
(
ö¸emít
);

40 
w©îm¨k
 = 
addr
+
ö¸emít
;

43 
addr
 = 
w©îm¨k
;

44 #i‡
	`deföed
(
AARCH64
)

45 
size_t
 
ªs
 = 
	`mm≠
(
w©îm¨k
, 
ö¸emít
, 
PROT_READ
 | 
PROT_WRITE
 | 
PROT_MTE
, 
MAP_FIXED
| 
MAP_PRIVATE
 | 
MAP_ANONYMOUS
, -1, 0);

47 
size_t
 
ªs
 = 
	`mm≠
(
w©îm¨k
, 
ö¸emít
, 
PROT_READ
 | 
PROT_WRITE
, 
MAP_FIXED
| 
MAP_PRIVATE
 | 
MAP_ANONYMOUS
, -1, 0);

49 
w©îm¨k
 +
ö¸emít
;

51 #i‡
DBG


52 if(
brk_addr
 == 0 )

53 
brk_addr
 = 
addr
;

54 
	`dl_¥ötf
("iyb: sbrkÖrogøm bªakÉxãnded by 0x%Œx.\n", 
addr
-
brk_addr
);

56  
addr
;

58 #ñi‡!
	`deföed
(
__APPLE__
)

59 #i‡
DBG


60 
size_t
 
addr
 = 
	`sbrk
(
ö¸emít
);

61 if(
brk_addr
 == 0 )

62 
brk_addr
 = 
addr
;

63 
	`dl_¥ötf
("iyb: sbrkÖrogøm bªakÉxãnded by 0x%Œx.\n", 
addr
-
brk_addr
);

64  
addr
;

66  
	`sbrk
(
ö¸emít
);

70 (Ë
ö¸emít
;

71  
MFAIL
;

73 
	}
}

75 
ölöe
 *
	$ˇŒ_mm≠
(
size_t
 
size
) {

76 #i‡
WATERMARK


77 
size_t
 
ªs
;

78 if(
mm≠_w©îm¨k
){

79 
ªs
 = 
	`mm≠
(
mm≠_w©îm¨k
, 
ö¸emít
, 
PROT_READ
 | 
PROT_WRITE
 | 
MAP_FIXED
, 
MAP_PRIVATE
 | 
MAP_ANONYMOUS
, -1, 0);

80 
mm≠_w©îm¨k
 +
size
;

82 
ªs
 = 
	`mm≠
(0, 
size
, 
PROT_READ
 | 
PROT_WRITE
, 
MAP_PRIVATE
 | 
MAP_ANONYMOUS
, -1, 0);

83 
mm≠_w©îm¨k
 = 
ªs
 + 
size
;

85 #i‡
DBG2


86 
	`dl_¥ötf
("iyb: big chunk mm≠ed 0x%012Œx - 0x%012Œx.\n", 
ªs
,Ñes+
size
);

88  
ªs
;

90  
	`mm≠
(0, 
size
, 
PROT_READ
 | 
PROT_WRITE
, 
MAP_PRIVATE
 | 
MAP_ANONYMOUS
, -1, 0);

92 
	}
}

94 
ölöe
 
	$ˇŒ_munm≠
(*
p
, 
size_t
 
size
) {

95  
	`munm≠
(
p
, 
size
);

96 
	}
}

98 
ölöe
 *
	$ˇŒ_mªm≠
(*
ﬁd_addªss
, 
size_t
 
ﬁd_size
, size_à
√w_size
, 
Êags
) {

99 #i‡!
	`deföed
(
__APPLE__
)

100  
	`mªm≠
(
ﬁd_addªss
, 
ﬁd_size
, 
√w_size
, 
Êags
);

102 (Ë
ﬁd_addªss
;

103 (Ë
ﬁd_size
;

104 (Ë
√w_size
;

105 (Ë
Êags
;

106  
MFAIL
;

108 
	}
}

110 
	gmÆloc_°©e
;

111 
	gmÆloc_chunk
;

113 *
mm≠_Æloc
(
mÆloc_°©e
 *
°©e
, 
size_t
 
size
);

115 
mÆloc_chunk
 *
mm≠_ªsize
(
mÆloc_°©e
 *
°©e
, mÆloc_chunk *
ﬁd_p
, 
size_t
 
size
, 
Êags
);

117 *
sys_Æloc
(
mÆloc_°©e
 *
°©e
, 
size_t
 
size
);

119 
sys_åim
(
mÆloc_°©e
 *
°©e
, 
size_t
 
∑d
);

121 
size_t
 
ªÀa£_unu£d_£gmíts
(
mÆloc_°©e
 *
°©e
);

124 
ªÀa£_exhau°ed_£gmít
(
mÆloc_°©e
 *
°©e
, 
mÆloc_£gmít
* 
£gmít
);

126 
ª∂a˚_ªÀa£d_£gmít
(
mÆloc_°©e
 *
°©e
, 
mÆloc_£gmít
* 
p£g
, mÆloc_£gmít* 
n£g
);

128 
ªÀa£_exhau°ed_chunk
(
mÆloc_°©e
 *
°©e
, 
mÆloc_£gmít
* 
£gmít
, 
mÆloc_chunk
* 
¥ev
, * 
ba£
, 
size_t
 
size
);

	@/home/iybang/dlmalloc/src/redblack.c

1 
	~"ªdbœck.h
"

2 
	~"os.h
"

3 #i‡
DBG


4 
	~"as£π.h
"

7 
node
* 
	$GET_P
(
node
* 
n
){

8 if(
	`GET_ENC
(
n
)){

9 
node
* 
p
 = 
	`∑ª¡_£¨ch
((
size_t
)
n
 >> 
UNMAP_UNIT_POWER
);

10 #i‡
DBG


11 
	`dl_as£π
(
p
==
ROOT
 ||Ö!=
NILL
);

13  
p
;

16  (
node
 *)((
size_t
)((
n
)->
∑ª¡
));

17 
	}
}

19 
	$SET_P
(
node
* 
n
, node* 
p
){

20 if(
	`GET_ENC
(
n
))

23 
n
->
∑ª¡
 = (
p
);

24 
	}
}

25 #i‡
DBG


26 
size_t
 
	gcou¡
 = 0;

28 
size_t
 
	$övÆid©e_chunk
(
mÆloc_°©e
* 
m
, 
mÆloc_chunk
* 
chunk
){

29 
size_t
 
ªt
 = 0;

30 
size_t
 
size
 = 
	`chunk_size
(
chunk
);

31 
size_t
 
i
 = (size_t)
chunk
 >> 
UNMAP_UNIT_POWER
;

32 
i
 <((
size_t
)
	`chunk_∂us_off£t
(
chunk
,
size
Ë-1Ë>> 
UNMAP_UNIT_POWER
;

33 
i
+=1)

35 
size_t
 
°¨t
 = (
i
>((size_t)
chunk
>>
UNMAP_UNIT_POWER
Ë? i*
UNMAP_UNIT
 : (size_t)chunk);

36 
size_t
 
íd
 = ((size_t)
chunk
 + 
size
 > (
i
+1Ë* 
UNMAP_UNIT
 ? (i+1) * UNMAP_UNIT : (size_t)chunk + size);

37 if((
íd
-
°¨t
Ë=(
UNMAP_UNIT
)){

38 #i‡
DBG


41 if(
	`ˇŒ_munm≠
(
i
*
UNMAP_UNIT
, UNMAP_UNIT) < 0){

42 
ªt
= -1;

46 
node
 * 
node_t
 = 
	`åì_£¨ch
(
i
);

47 if(
node_t
==
NILL
){

48 if((
íd
-
°¨t
)>=(
node
)){

49 
	`ªd_bœck_ö£π
(
i
, (
íd
-
°¨t
)>>4, 0, (
node
*) start);

52 #i‡
DBG


55 
	`ªd_bœck_ö£π
(
i
, (
íd
-
°¨t
)>>4, 1, (
smÆl_node
*) start);

58 
size_t
 
size_h
 = 
	`GET_EXH
(
node_t
);

59 
size_t
 
size_n
 = (((
íd
-
°¨t
Ë>> 4Ë+ 
size_h
);

60 if(
	`GET_ENC
(
node_t
Ë&& (
íd
-
°¨t
)>=(
node
)){

61 
	`SET_ENC
(
°¨t
, 0);

62 
	`SET_COLOR
(
°¨t
, 
	`GET_COLOR
(
node_t
));

63 
node
* 
À·
 = 
	`GET_L
(
node_t
);

64 
node
* 
right
 = 
	`GET_R
(
node_t
);

65 
	`SET_L
(
°¨t
, 
À·
);

66 
	`SET_R
(
°¨t
, 
right
);

67 
	`SET_P
(
À·
, 
°¨t
);

68 
	`SET_P
(
right
, 
°¨t
);

69 
	`∑ª¡_£¨ch_™d_migøã
(
i
, 
°¨t
);

70 
node_t
 = 
°¨t
;

73 if(
size_n
 >(
UNMAP_UNIT
>>4)){

74 
	`ªd_bœck_dñëe
(
node_t
);

75 #i‡
DBG


78 if(
	`ˇŒ_munm≠
(
i
*
UNMAP_UNIT
, UNMAP_UNIT) < 0){

79 
ªt
= -1;

83 
	`SET_EXH
(
node_t
, 
size_n
);

88  
ªt
;

89 
	}
}

92 
	$åì_¥öt
(
node
 *
x
, 
•a˚
){

93 
isRoŸ
 = 0;

94 i‡(
•a˚
 ==0)

95 
isRoŸ
 = 1;

96 if(
x
 !
NILL
){

97 
cou¡
 = 1;

98 
•a˚
+=
cou¡
;

99 
	`åì_¥öt
(
	`GET_L
(
x
), 
•a˚
);

101 
	`dl_¥ötf
("0x%Œx 0x%Œx\t", 
x
, 
	`GET_EXH
(x));

110 
	`åì_¥öt
(
	`GET_R
(
x
), 
•a˚
);

112 
	}
}

114 
node
 *
	$åì_£¨ch
(
size_t
 
key
){

115 
node
 *
x
;

117 
x
 = 
ROOT
;

118 
x
 !
NILL
 && 
	`GET_KEY
(xË!
key
){

119 if(
key
 < 
	`GET_KEY
(
x
)){

120 
x
 = 
	`GET_L
(x);

123 
x
 = 
	`GET_R
(x);

127  
x
;

128 
	}
}

130 
node
 *
	$∑ª¡_£¨ch
(
size_t
 
key
){

131 
node
 *
x
;

132 
node
 *
p
;

134 
x
 = 
ROOT
;

135 
p
 = 
NILL
;

136 
x
 !
NILL
 && 
	`GET_KEY
(xË!
key
){

137 if(
key
 < 
	`GET_KEY
(
x
)){

138 
p
 = 
x
;

139 
x
 = 
	`GET_L
(x);

142 
p
 = 
x
;

143 
x
 = 
	`GET_R
(x);

146 #i‡
DBG


147 
	`dl_as£π
(
	`GET_KEY
(
x
Ë=
key
);

149  
p
;

150 
	}
}

152 
	$∑ª¡_£¨ch_™d_migøã
(
size_t
 
key
, 
node
 *
√w_node
){

153 
node
 *
x
;

154 
node
 *
p
;

155 
isLe·
;

157 
x
 = 
ROOT
;

158 
p
 = 
NILL
;

160 
x
 !
NILL
 && 
	`GET_KEY
(xË!
key
){

161 if(
key
 < 
	`GET_KEY
(
x
)){

162 
isLe·
 = 1;

163 
p
 = 
x
;

164 
x
 = 
	`GET_L
(x);

167 
isLe·
 = 0;

168 
p
 = 
x
;

169 
x
 = 
	`GET_R
(x);

173 
√w_node
->
∑ª¡
 = 
p
;

174 if(
p
!
NILL
 && 
isLe·
){

175 
	`SET_L
(
p
, 
√w_node
);

177 if(
p
!
NILL
 && !
isLe·
)

178 
	`SET_R
(
p
, 
√w_node
);

181 
	}
}

185 
node
 *
	$åì_möimum
(
node
 *
x
){

200 
	`GET_L
(
x
Ë!
NILL
){

202 
x
 = 
	`GET_L
(x);

206  
x
;

207 
	}
}

215 
	$ªd_bœck_ö£π
(
size_t
 
key
, size_à
exh
, size_à
íc
, 
node
*
z
){

217 
node
 *
x
, *
y
;

221 
	`ACQUIRE_TREE_GLOBAL_LOCK
();

222 
	`SET_EXH
(
z
, 
exh
);

224 
	`SET_COLOR
(
z
, 
RED
);

225 
	`SET_L
(
z
, 
NILL
);

226 
	`SET_R
(
z
, 
NILL
);

227 
	`SET_ENC
(
z
, 
íc
);

229 
x
 = 
ROOT
;

230 
y
 = 
NILL
;

236 
x
 !
NILL
){

237 
y
 = 
x
;

238 if(
	`GET_KEY
(
z
Ë< GET_KEY(
x
)){

239 #i‡
DBG


240 
	`dl_as£π
(
	`GET_KEY
(
z
)!=GET_KEY(
x
));

242 
x
 = 
	`GET_L
(x);

245 
x
 = 
	`GET_R
(x);

249 if(
y
 =
NILL
){

250 
ROOT
 = 
z
;

252 if(
	`GET_KEY
(
z
Ë<GET_KEY(
y
)){

253 
	`SET_L
(
y
, 
z
);

256 
	`SET_R
(
y
, 
z
);

259 
	`SET_P
(
z
, 
y
);

261 
	`ªd_bœck_ö£π_fixup
(
z
);

263 
	`RELEASE_TREE_GLOBAL_LOCK
();

264 
	}
}

292 
	$ªd_bœck_ö£π_fixup
(
node
 *
z
){

293 
	`GET_COLOR
(
	`GET_P
(
z
)Ë=
RED
){

296 if(
	`GET_P
(
z
Ë=
	`GET_L
(GET_P(GET_P(z)))){

299 if(
	`GET_COLOR
–
	`GET_R
(
	`GET_P
(GET_P(
z
)))Ë=
RED
){

300 
	`SET_COLOR
(
	`GET_P
(
z
), 
BLACK
);

301 
	`SET_COLOR
(
	`GET_R
(
	`GET_P
(GET_P(
z
))), 
BLACK
);

302 
	`SET_COLOR
(
	`GET_P
(GET_P(
z
)), 
RED
);

303 
z
 = 
	`GET_P
(GET_P(z));

308 if(
z
 =
	`GET_R
(
	`GET_P
(z))){

309 
z
 = 
	`GET_P
(z);

310 
	`À·_rŸ©e
(
z
);

312 
	`SET_COLOR
(
	`GET_P
(
z
), 
BLACK
);

313 
	`SET_COLOR
(
	`GET_P
(GET_P(
z
)), 
RED
);

314 
	`right_rŸ©e
(
	`GET_P
(GET_P(
z
)));

322 if(
	`GET_COLOR
(
	`GET_L
(
	`GET_P
(GET_P(
z
)))Ë=
RED
){

323 
	`SET_COLOR
(
	`GET_P
(
z
), 
BLACK
);

324 
	`SET_COLOR
(
	`GET_L
(
	`GET_P
(GET_P(
z
))), 
BLACK
);

325 
	`SET_COLOR
(
	`GET_P
(GET_P(
z
)), 
RED
);

326 
z
 = 
	`GET_P
(GET_P(z));

331 if(
z
 =
	`GET_L
(
	`GET_P
(z))){

332 
z
 = 
	`GET_P
(z);

333 
	`right_rŸ©e
(
z
);

335 
	`SET_COLOR
(
	`GET_P
(
z
), 
BLACK
);

336 
	`SET_COLOR
(
	`GET_P
(GET_P(
z
)), 
RED
);

337 
	`À·_rŸ©e
(
	`GET_P
(GET_P(
z
)));

342 
	`SET_COLOR
(
ROOT
, 
BLACK
);

343 
	}
}

356 
	$À·_rŸ©e
(
node
 *
x
){

357 
node
 *
y
;

372 
y
 = 
	`GET_R
(
x
);

373 
	`SET_R
(
x
, 
	`GET_L
(
y
));

374 if(
	`GET_L
(
y
Ë!
NILL
){

375 
	`SET_P
(
	`GET_L
(
y
), 
x
);

379 
node
* 
ãmp
 = 
	`GET_P
(
x
);

380 
	`SET_P
(
y
, 
	`GET_P
(
x
));

381 if(
ãmp
 =
NILL
){

383 
ROOT
 = 
y
;

385 if(
x
 =
	`GET_L
(
	`GET_P
(x))){

386 
	`SET_L
(
	`GET_P
(
x
), 
y
);

389 
	`SET_R
(
	`GET_P
(
x
), 
y
);

393 
	`SET_L
(
y
, 
x
);

394 
	`SET_P
(
x
, 
y
);

395 
	}
}

409 
	$right_rŸ©e
(
node
 *
x
){

410 
node
 *
y
;

424 
y
 = 
	`GET_L
(
x
);

425 
	`SET_L
(
x
, 
	`GET_R
(
y
));

426 if(
	`GET_R
(
y
Ë!
NILL
){

427 
	`SET_P
(
	`GET_R
(
y
), 
x
);

431 
node
 *
ãmp
 = 
	`GET_P
(
x
);

432 
	`SET_P
(
y
, 
	`GET_P
(
x
));

433 if(
ãmp
 =
NILL
){

435 
ROOT
 = 
y
;

437 if(
x
 =
	`GET_R
(
	`GET_P
(x))){

438 
	`SET_R
(
	`GET_P
(
x
), 
y
);

441 
	`SET_L
(
	`GET_P
(
x
), 
y
);

445 
	`SET_R
(
y
, 
x
);

446 
	`SET_P
(
x
, 
y
);

447 
	}
}

466 
	$ªd_bœck_dñëe
(
node
 *
z
){

467 
node
 *
y
, *
x
;

468 
yOrigöÆCﬁ‹
;

496 
y
 = 
z
;

497 
yOrigöÆCﬁ‹
 = 
	`GET_COLOR
(
y
);

499 
	`ACQUIRE_TREE_GLOBAL_LOCK
();

500 if(
	`GET_L
(
z
Ë=
NILL
){

501 
x
 = 
	`GET_R
(
z
);

502 
	`ªd_bœck_å™•œ¡
(
z
, 
	`GET_R
(z));

504 if(
	`GET_R
(
z
Ë=
NILL
){

505 
x
 = 
	`GET_L
(
z
);

506 
	`ªd_bœck_å™•œ¡
(
z
, 
	`GET_L
(z));

509 
y
 = 
	`åì_möimum
(
	`GET_R
(
z
));

511 
yOrigöÆCﬁ‹
 = 
	`GET_COLOR
(
y
);

513 
x
 = 
	`GET_R
(
y
);

515 if(
	`GET_P
(
y
Ë=
z
){

516 
	`SET_P
(
x
, 
y
);

519 
	`ªd_bœck_å™•œ¡
(
y
, 
	`GET_R
(y));

520 
	`SET_R
(
y
, 
	`GET_R
(
z
));

521 
	`SET_P
(
	`GET_R
(
y
), y);

524 
	`ªd_bœck_å™•œ¡
(
z
, 
y
);

525 
	`SET_L
(
y
, 
	`GET_L
(
z
));

526 
	`SET_P
(
	`GET_L
(
y
), y);

527 
	`SET_COLOR
(
y
, 
	`GET_COLOR
(
z
));

528 if(
	`GET_L
(
y
)==
	`GET_R
(y))

529 
	`SET_R
(
y
, 
NILL
);

532 if(
yOrigöÆCﬁ‹
 =
BLACK
){

533 
	`ªd_bœck_dñëe_fixup
(
x
);

536 
	`RELEASE_TREE_GLOBAL_LOCK
();

537 
	}
}

567 
	$ªd_bœck_dñëe_fixup
(
node
 *
x
){

568 
node
 *
w
;

569 
x
 !
ROOT
 && 
	`GET_COLOR
(xË=
BLACK
){

571 if(
x
 =
	`GET_L
(
	`GET_P
(x))){

572 
w
 = 
	`GET_R
(
	`GET_P
(
x
));

574 if(
	`GET_COLOR
(
w
Ë=
RED
){

575 
	`SET_COLOR
(
w
, 
BLACK
);

576 
	`SET_COLOR
(
	`GET_P
(
x
), 
RED
);

577 
	`À·_rŸ©e
(
	`GET_P
(
x
));

578 
w
 = 
	`GET_R
(
	`GET_P
(
x
));

581 if(
	`GET_COLOR
(
	`GET_L
(
w
)Ë=
BLACK
 && GET_COLOR(
	`GET_R
(w)) == BLACK){

582 
	`SET_COLOR
(
w
, 
RED
);

584 
x
 = 
	`GET_P
(x);

587 if(
	`GET_COLOR
(
	`GET_R
(
w
)Ë=
BLACK
){

588 
	`SET_COLOR
(
w
, 
RED
);

589 
	`SET_COLOR
(
	`GET_L
(
w
), 
BLACK
);

590 
	`right_rŸ©e
(
w
);

591 
w
 = 
	`GET_R
(
	`GET_P
(
x
));

593 
	`SET_COLOR
(
w
, 
	`GET_COLOR
(
	`GET_P
(
x
)));

594 
	`SET_COLOR
(
	`GET_P
(
x
), 
BLACK
);

595 
	`SET_COLOR
(
	`GET_R
(
w
), 
BLACK
);

596 
	`À·_rŸ©e
(
	`GET_P
(
x
));

597 
x
 = 
ROOT
;

602 
w
 = 
	`GET_L
(
	`GET_P
(
x
));

604 if(
	`GET_COLOR
(
w
Ë=
RED
){

605 
	`SET_COLOR
(
w
, 
BLACK
);

606 
	`SET_COLOR
(
	`GET_P
(
x
), 
RED
);

607 
	`right_rŸ©e
(
	`GET_P
(
x
));

608 
w
 = 
	`GET_L
(
	`GET_P
(
x
));

611 if(
	`GET_COLOR
(
	`GET_L
(
w
)Ë=
BLACK
 && GET_COLOR(
	`GET_R
(w)) == BLACK){

612 
	`SET_COLOR
(
w
, 
RED
);

614 
x
 = 
	`GET_P
(x);

617 if(
	`GET_COLOR
(
	`GET_L
(
w
)Ë=
BLACK
){

618 
	`SET_COLOR
(
w
, 
RED
);

619 
	`SET_COLOR
(
	`GET_R
(
w
), 
BLACK
);

620 
	`À·_rŸ©e
(
w
);

621 
w
 = 
	`GET_L
(
	`GET_P
(
x
));

623 
	`SET_COLOR
(
w
, 
	`GET_COLOR
(
	`GET_P
(
x
)));

624 
	`SET_COLOR
(
	`GET_P
(
x
), 
BLACK
);

625 
	`SET_COLOR
(
	`GET_L
(
w
), 
BLACK
);

626 
	`right_rŸ©e
(
	`GET_P
(
x
));

627 
x
 = 
ROOT
;

633 
	`SET_COLOR
(
x
, 
BLACK
);

634 
	}
}

637 
	$ªd_bœck_å™•œ¡
(
node
 *
u
, nodê*
v
){

650 
node
 * 
ãmp
 = 
	`GET_P
(
u
);

651 if(
ãmp
 =
NILL
){

652 
ROOT
 = 
v
;

654 if(
u
 =
	`GET_L
(
ãmp
)){

655 
	`SET_L
(
ãmp
, 
v
);

658 
	`SET_R
(
ãmp
, 
v
);

661 
	`SET_P
(
v
, 
ãmp
);

662 
	}
}

	@/home/iybang/dlmalloc/src/redblack.h

1 #i‚de‡
TMTE_REDBLACK_H


2 
	#TMTE_REDBLACK_H


	)

4 
	~<sys/ty≥s.h
>

5 
	~"c⁄fig.h
"

6 
	~"chunk.h
"

7 
	~"°©e.h
"

28 
	#RED
 0

	)

29 
	#BLACK
 1

	)

31 
	#UNMAP_UNIT_POWER
 ((
size_t
)12)

	)

32 
	#UNMAP_UNIT
 (
size_t
)((size_t)1<<
UNMAP_UNIT_POWER
)

	)

35 
	#ENCODE_BIT
 ((
size_t
)1)<<63

	)

36 
	#ENCODE_MASK
 (~((
size_t
)
ENCODE_BIT
))

	)

37 
	#COLOR_BIT
 (((
size_t
)1)<<62)

	)

38 
	#COLOR_MASK
 (~((
size_t
)
COLOR_BIT
))

	)

41 
	#LR_MASK
 ((
size_t
)-1 << 48)

	)

42 
	#LR_BITS
 (~((
size_t
)
LR_MASK
))

	)

43 
	#EXH_BITS
 (
LR_MASK
)

	)

44 
	#EXH_MASK
 (
LR_BITS
)

	)

46 
	#GET_ENC
(
n
)\

47 ()((*(
size_t
*)(
n
Ë& 
ENCODE_BIT
Ë>> 63)

	)

49 
	#SET_ENC
(
n
, 
c
)\

50 (*(
size_t
*)(
n
)Ë(*(size_t*)“Ë& 
ENCODE_MASK
Ë| ((size_t)
c
<<63)

	)

52 
	#GET_COLOR
(
n
)\

53 ()((*(
size_t
*)(
n
Ë& 
COLOR_BIT
Ë>> 62)

	)

55 
	#SET_COLOR
(
n
, 
c
)\

56 (*(
size_t
*)(
n
)Ë(*(size_t*)“Ë& 
COLOR_MASK
Ë| ((size_t)
c
<<62)

	)

58 
	#GET_KEY
(
n
)\

59 (((
size_t
)
n
)>>
UNMAP_UNIT_POWER
)

	)

64 
	#GET_EXH
(
n
)\

65 (
size_t
Ë––(size_tË((
n
)->
right
Ë& 
EXH_BITS
)>>48)

	)

69 
	#SET_EXH
(
n
, 
v
)\

70 (
n
)->
right
 = (
node
 *Ë–((
size_t
)(“)->rightË& 
EXH_MASK
Ë| (((size_t)
v
)<<48Ë)

	)

82 
	#SET_L
(
n
, 
l
)\

83 ((
node
 *)
n
)->
À·
 = (((
size_t
)((nodê*Í)->À·Ë& 
LR_MASK
 )| ((size_t)
l
)

	)

87 
	#SET_R
(
n
, 
r
)\

88 ((
node
 *)
n
)->
right
 = (((
size_t
)((nodê*Í)->rightË& 
LR_MASK
 )|((size_t)
r
)

	)

91 
	#GET_L
(
n
)\

92 (((
size_t
Ë–(
n
)->
À·
ËË& 
LR_BITS
)

	)

93 
	#GET_R
(
n
)\

94 –((
size_t
)((
n
)->
right
)Ë& 
LR_BITS
)

	)

96 
	snode
{

97 
node
 *
	mÀ·
;

98 
node
 *
	mright
;

99 
node
 *
	m∑ª¡
;

102 
	ssmÆl_node
{

103 
node
 *
	mÀ·
;

104 
node
 *
	mright
;

109 
node
* 
GET_P
(node* 
n
);

110 
SET_P
(
node
* 
n
, node* 
p
);

113 
node
 *
	gROOT
;

114 
node
 *
	gNILL
;

115 
node
 
	gglobÆ_node
;

117 
ölöe
 
	$öô_ªdbœck_åì
(){

118 
	`SET_COLOR
(&
globÆ_node
, 
BLACK
);

120 
NILL
 = &
globÆ_node
;

123 
ROOT
 = 
NILL
;

158 
	}
}

160 
À·_rŸ©e
(
node
 *
x
);

161 
right_rŸ©e
(
node
 *
x
);

162 
åì_¥öt
(
node
 *
x
, 
•a˚
);

163 
ªd_bœck_ö£π
(
size_t
 
key
, size_à
exh
, size_à
íc
, 
node
 *
z
);

164 
ªd_bœck_ö£π_fixup
(
node
 *
z
);

165 
node
 *
åì_£¨ch
(
size_t
 
key
);

166 
node
 *
∑ª¡_£¨ch
(
size_t
 
key
);

167 
∑ª¡_£¨ch_™d_migøã
(
size_t
 
key
, 
node
 *
√w_node
);

168 
node
 *
åì_möimum
(nodê*
x
);

169 
ªd_bœck_å™•œ¡
(
node
 *
u
, nodê*
v
);

170 
ªd_bœck_dñëe
(
node
 *
z
);

171 
ªd_bœck_dñëe_fixup
(
node
 *
x
);

173 
size_t
 
övÆid©e_chunk
(
mÆloc_°©e
* 
m
, 
mÆloc_chunk
* 
chunk
);

175 #i‡
DBG


176 
num_mm≠
;

	@/home/iybang/dlmalloc/src/sbrk.c

1 
	~<î∫o.h
>

2 
	~<sys/ty≥s.h
>

4 
	~"sbrk.h
"

6 #i‚de‡
SBRK_SIZE


7 
	#SBRK_SIZE
 (4 * 1024 * 1024)

	)

10 #i‡
deföed
(
__GNUC__
Ë|| deföed(
__˛™g__
)

11 
__©åibuã__
((
	$Æig√d
(4096)))

12 #i‡
	`deföed
(
__löux__
)

13 
	`__©åibuã__
((
	`£˘i⁄
("SBRK")))

14 #ñi‡
	`deföed
(
__APPLE__
)

15 
	`__©åibuã__
((
	`£˘i⁄
("__DATA,SBRK")))

18 
sbrk_d©a
[
SBRK_SIZE
];

20 *
sbrk_cuº
 = 
sbrk_d©a
;

22 *
	$emuœã_sbrk
(
ssize_t
 
ö¸emít
) {

23 
ssize_t
 
sbrk_Æloc
 = 
sbrk_cuº
 - 
sbrk_d©a
;

24 
ssize_t
 
sbrk_√w_Æloc
 = 
sbrk_Æloc
 + 
ö¸emít
;

25 i‡(
sbrk_√w_Æloc
 < 0 || sbrk_√w_Ælo¯> 
SBRK_SIZE
) {

26 
î∫o
 = 
ENOMEM
;

29 *
p
 = 
sbrk_cuº
;

30 
sbrk_cuº
 +
ö¸emít
;

31  
p
;

32 
	}
}

	@/home/iybang/dlmalloc/src/sbrk.h

1 #i‚de‡
DLALLOC_SBRK_H


2 
	#DLALLOC_SBRK_H


	)

4 
	~<sys/ty≥s.h
>

6 *
emuœã_sbrk
(
ssize_t
 
ö¸emít
);

	@/home/iybang/dlmalloc/src/segment.c

1 
	~"°©e.h
"

2 
	~"£gmít.h
"

5 
mÆloc_£gmít
 *
	$£gmít_hﬁdög
(
mÆloc_°©e
 *
°©e
, *
p
) {

6 
mÆloc_£gmít
 *
£gmít
 = &
°©e
->segment;

8 i‡(
	`£gmít_hﬁds
(
£gmít
, 
p
)) {

9  
£gmít
;

11 i‡((
£gmít
 = segmít->
√xt
) == 0) {

15 
	}
}

18 
	$has_£gmít_lök
(
mÆloc_°©e
 *
°©e
, 
mÆloc_£gmít
 *
£gmít
) {

19 
mÆloc_£gmít
 *
•
 = &
°©e
->
£gmít
;

21 i‡(
£gmít
->
ba£
 <(*Ë
•
 && (*Ë• < segmít->ba£ + segmít->
size
) {

24 i‡((
•
 = sp->
√xt
) == 0) {

28 
	}
}

30 
mÆloc_£gmít
* 
	$¥ev_£gmít
(
mÆloc_°©e
* 
°©e
, 
mÆloc_£gmít
* 
cuº
){

31 
mÆloc_£gmít
 *
•
 = &
°©e
->
£gmít
;

33 if(
•
 =
cuº
){

35 }if(
•
->
√xt
 =
cuº
){

36  
•
;

37 }if(
•
 = sp->
√xt
 == 0){

41 
	}
}

	@/home/iybang/dlmalloc/src/segment.h

1 #i‚de‡
MALLOC_SEGMENT_H


2 
	#MALLOC_SEGMENT_H


	)

4 
	~"c⁄fig.h
"

61 
	smÆloc_£gmít
 {

62 *
	mba£
;

63 
size_t
 
	msize
;

64 
mÆloc_£gmít
 *
	m√xt
;

65 
Êag_t
 
	mÊags
;

68 
size_t
 
	mbœckli°ed_size
;

71 
ölöe
 
	$is_mm≠≥d_£gmít
(
mÆloc_£gmít
 *
£gmít
) {

72  
£gmít
->
Êags
 & 
USE_MMAP_BIT
;

73 
	}
}

75 
ölöe
 
	$is_exã∫_£gmít
(
mÆloc_£gmít
 *
£gmít
) {

76  
£gmít
->
Êags
 & 
EXTERN_BIT
;

77 
	}
}

79 
ölöe
 
	$£gmít_hﬁds
(
mÆloc_£gmít
 *
£gmít
, *
p
) {

80  
£gmít
->
ba£
 <(*Ë
p
 && (*Ë∞< segmít->ba£ + segmít->
size
;

81 
	}
}

83 
mÆloc_£gmít
 *
£gmít_hﬁdög
(
mÆloc_°©e
 *
°©e
, *
p
);

85 
mÆloc_£gmít
 *
¥ev_£gmít
(
mÆloc_°©e
 *
°©e
, mÆloc_£gmít* 
cuº
);

87 
has_£gmít_lök
(
mÆloc_°©e
 *
°©e
, 
mÆloc_£gmít
 *
£gmít
);

89 
u∆ök_£gmít
(
mÆloc_°©e
* 
°©e
, 
mÆloc_£gmít
* 
£gmít_hﬁdög
);

	@/home/iybang/dlmalloc/src/state.c

1 
	~"as£π.h
"

2 
	~"c⁄fig.h
"

3 
	~"debug.h
"

4 
	~"öô.h
"

5 
	~"lock.h
"

6 
	~"mÆloc.h
"

7 
	~"os.h
"

8 
	~"£gmít.h
"

9 
	~"°©e.h
"

10 
	~"log.h
"

13 
	$öô_t›
(
mÆloc_°©e
 *
°©e
, 
mÆloc_chunk
 *
chunk
, 
size_t
 
size
) {

15 
size_t
 
off£t
 = 
	`Æign_off£t
(
	`chunk_to_mem
(
chunk
));

16 
chunk
 = (
mÆloc_chunk
 *Ë((*Ëchunk + 
off£t
);

17 
size
 -
off£t
;

19 
°©e
->
t›
 = 
chunk
;

20 
°©e
->
t›_size
 = 
size
;

21 
chunk
->
hód
 = (chunk->hód & 
TAG_BITS
Ë| 
size
 | 
PREV_INUSE_BIT
;

23 
	`chunk_∂us_off£t
(
chunk
, 
size
)->
hód
 = 
TOP_FOOT_SIZE
;

24 
°©e
->
åim_check
 = 
∑øms
.
åim_thªshﬁd
;

25 
	}
}

28 
	$öô_bös
(
mÆloc_°©e
 *
°©e
) {

30 
bö_ödex_t
 
i
 = 0; i < 
NUM_SMALL_BINS
; ++i) {

31 
mÆloc_chunk
 *
bö
 = 
	`smÆl_bö_©
(
°©e
, 
i
);

32 
bö
->
fd
 = bö->
bk
 = bin;

34 
	}
}

37 *
	$¥ïíd_Æloc
(
mÆloc_°©e
 *
°©e
, *
√w_ba£
, *
ﬁd_ba£
, 
size_t
 
nb
) {

38 
mÆloc_chunk
 *
p
 = 
	`Æign_as_chunk
(
√w_ba£
);

39 
mÆloc_chunk
 *
ﬁdfú°
 = 
	`Æign_as_chunk
(
ﬁd_ba£
);

40 
size_t
 
psize
 = (*Ë
ﬁdfú°
 - (*Ë
p
;

41 
mÆloc_chunk
 *
q
 = 
	`chunk_∂us_off£t
(
p
, 
nb
);

42 
size_t
 
qsize
 = 
psize
 - 
nb
;

43 
	`£t_size_™d_¥ev_öu£_of_öu£_chunk
(
°©e
, 
p
, 
nb
);

45 
	`dl_as£π
((*Ë
ﬁdfú°
 > (*Ë
q
);

46 
	`dl_as£π
(
	`¥ev_öu£
(
ﬁdfú°
));

47 
	`dl_as£π
(
qsize
 >
MIN_CHUNK_SIZE
);

50 i‡(
ﬁdfú°
 =
°©e
->
t›
) {

51 
size_t
 
tsize
 = 
°©e
->
t›_size
 +
qsize
;

52 
°©e
->
t›
 = 
q
;

53 
q
->
hód
 = 
tsize
 | 
PREV_INUSE_BIT
;

54 
	`check_t›_chunk
(
°©e
, 
q
);

56 i‡(
ﬁdfú°
 =
°©e
->
dv
) {

57 
size_t
 
dsize
 = 
°©e
->
dv_size
 +
qsize
;

58 
°©e
->
dv
 = 
q
;

59 
	`£t_size_™d_¥ev_öu£_of_‰ì_chunk
(
q
, 
dsize
);

62 i‡(!
	`is_öu£
(
ﬁdfú°
)) {

63 
size_t
 
nsize
 = 
	`chunk_size
(
ﬁdfú°
);

64 
	`u∆ök_chunk
(
°©e
, 
ﬁdfú°
, 
nsize
);

65 
ﬁdfú°
 = 
	`chunk_∂us_off£t
(ﬁdfú°, 
nsize
);

66 
qsize
 +
nsize
;

68 
	`£t_‰ì_wôh_¥ev_öu£
(
q
, 
qsize
, 
ﬁdfú°
);

69 
	`ö£π_chunk
(
°©e
, 
q
, 
qsize
);

70 
	`check_‰ì_chunk
(
°©e
, 
q
);

73 
	`check_mÆlo˚d_chunk
(
°©e
, 
	`chunk_to_mem
(
p
), 
nb
);

74  
	`chunk_to_mem
(
p
);

75 
	}
}

78 
	$add_£gmít
(
mÆloc_°©e
 *
°©e
, *
tba£
, 
size_t
 
tsize
, 
Êag_t
 
mm≠≥d
) {

80 *
ﬁd_t›
 = (*Ë
°©e
->
t›
;

81 
mÆloc_£gmít
 *
ﬁd•
 = 
	`£gmít_hﬁdög
(
°©e
, 
ﬁd_t›
);

82 *
ﬁd_íd
 = 
ﬁd•
->
ba£
 + old•->
size
;

83 
size_t
 
ssize
 = 
	`∑d_ªque°
((
mÆloc_£gmít
));

84 *
øw•
 = 
ﬁd_íd
 - (
ssize
 + (
size_t
Ë* 4 + 
CHUNK_ALIGN_MASK
);

85 
size_t
 
off£t
 = 
	`Æign_off£t
(
	`chunk_to_mem
(
øw•
));

86 *
a•
 = 
øw•
 + 
off£t
;

87 *
c•
 = (
a•
 < (
ﬁd_t›
 + 
MIN_CHUNK_SIZE
)) ? old_top :ásp;

88 
mÆloc_chunk
 *
•
 = (mÆloc_chunk *Ë
c•
;

89 
mÆloc_£gmít
 *
ss
 = (mÆloc_£gmíà*Ë(
	`chunk_to_mem
(
•
));

90 
mÆloc_chunk
 *
äext
 = 
	`chunk_∂us_off£t
(
•
, 
ssize
);

91 
mÆloc_chunk
 *
p
 = 
äext
;

92 
n„n˚s
 = 0;

95 
	`öô_t›
(
°©e
, (
mÆloc_chunk
 *Ë
tba£
, 
tsize
 - 
TOP_FOOT_SIZE
);

96 ((
mÆloc_chunk
*)
tba£
)->
¥ev_foŸ
 = 0;

99 
	`dl_as£π
(
	`is_Æig√d
(
ss
));

100 
	`£t_size_™d_¥ev_öu£_of_öu£_chunk
(
°©e
, 
•
, 
ssize
);

101 *
ss
 = 
°©e
->
£gmít
;

102 
°©e
->
£gmít
.
ba£
 = 
tba£
;

103 
°©e
->
£gmít
.
size
 = 
tsize
;

104 
°©e
->
£gmít
.
Êags
 = 
mm≠≥d
;

105 
°©e
->
£gmít
.
√xt
 = 
ss
;

106 
°©e
->
£gmít
.
bœckli°ed_size
 = 0;

110 
mÆloc_chunk
 *
√xç
 = 
	`chunk_∂us_off£t
(
p
, (
size_t
));

111 
p
->
hód
 = 
FENCEPOST_HEAD
;

112 ++
n„n˚s
;

113 i‡((*Ë(&(
√xç
->
hód
)Ë< 
ﬁd_íd
) {

114 
p
 = 
√xç
;

120 
	`dl_as£π
(
n„n˚s
 >= 2);

123 i‡(
c•
 !
ﬁd_t›
) {

124 
mÆloc_chunk
 *
q
 = (mÆloc_chunk *Ë
ﬁd_t›
;

125 
size_t
 
psize
 = 
c•
 - 
ﬁd_t›
;

126 
mÆloc_chunk
 *
ä
 = 
	`chunk_∂us_off£t
(
q
, 
psize
);

127 
	`£t_‰ì_wôh_¥ev_öu£
(
q
, 
psize
, 
ä
);

128 
	`ö£π_chunk
(
°©e
, 
q
, 
psize
);

131 
	`check_t›_chunk
(
°©e
, sèã->
t›
);

132 
	}
}

134 
	$bœckli°_chunk
(
mÆloc_°©e
* 
°©e
, 
mÆloc_chunk
* 
chunk
){

135 
	`£t_chunk_èg
(
chunk
, 
TAG_BITS
);

136 
size_t
 
csize
 = 
	`chunk_size
(
chunk
);

137 
mÆloc_chunk
 *
¥ev
 = 
	`is_¥ev_exhau°ed
(
chunk
)? 0: 
	`chunk_möus_off£t
(chunk, (chunk->
¥ev_foŸ
 & ~
EXHAUSTION_BITS
));

138 
mÆloc_chunk
 *
√xt
 = 
	`is_√xt_exhau°ed
(
chunk
)? 0: 
	`chunk_∂us_off£t
(chunk, 
csize
);

142 if(
¥ev
 &&Öªv !
chunk
){

143 
¥ev
->
¥ev_foŸ
 |
NEXT_EXH_BIT
;

145 if(
√xt
 !=0){

146 
√xt
->
¥ev_foŸ
 |
PREV_EXH_BIT
;

149  
	`övÆid©e_chunk
(
°©e
, 
chunk
);

150 
	}
}

	@/home/iybang/dlmalloc/src/state.h

1 #i‚de‡
MALLOC_STATE_H


2 
	#MALLOC_STATE_H


	)

4 
	~"c⁄fig.h
"

5 
	~"chunk.h
"

6 
	~"£gmít.h
"

7 
	~"lock.h
"

8 
	~"ªdbœck.h
"

96 
	#NUM_SMALL_BINS
 (32U)

	)

97 
	#NUM_TREE_BINS
 (32U)

	)

98 
	#SMALL_BIN_SHIFT
 (3U)

	)

99 
	#TREE_BIN_SHIFT
 (8U)

	)

100 
	#MIN_LARGE_SIZE
 ((
size_t
Ë1 << 
TREE_BIN_SHIFT
)

	)

101 
	#MAX_SMALL_SIZE
 (
MIN_LARGE_SIZE
 - (
size_t
Ë1)

	)

102 
	#MAX_SMALL_REQUEST
 (
MAX_SMALL_SIZE
 - 
CHUNK_ALIGN_MASK
 - 
CHUNK_OVERHEAD
)

	)

106 
ölöe
 
	$is_smÆl
(
size_t
 
size
) {

107  (
size
 >> 
SMALL_BIN_SHIFT
Ë< 
NUM_SMALL_BINS
;

108 
	}
}

110 
ölöe
 
bö_ödex_t
 
	$smÆl_ödex
(
size_t
 
size
) {

111  (
bö_ödex_t
Ë(
size
 >> 
SMALL_BIN_SHIFT
);

112 
	}
}

114 
ölöe
 
size_t
 
	$smÆl_ödex_to_size
(
bö_ödex_t
 
ödex
) {

115  
ödex
 << 
SMALL_BIN_SHIFT
;

116 
	}
}

119 
ölöe
 
bö_ödex_t
 
	$À·shi·_f‹_åì_ödex
(
bö_ödex_t
 
i
) {

120  
i
 =
NUM_TREE_BINS
 - 1 ? 0 : 
SIZE_T_BITSIZE
 - (
size_t
Ë1 - ((ò>> 1Ë+ 
TREE_BIN_SHIFT
 - 2);

121 
	}
}

124 
ölöe
 
bö_ödex_t
 
	$mösize_f‹_åì_ödex
(
bö_ödex_t
 
i
) {

125  ((
size_t
Ë1 << ((
i
 >> 1Ë+ 
TREE_BIN_SHIFT
))

126 | (((
size_t
Ë(
i
 & (size_tË1)Ë<< ((ò>> 1Ë+ 
TREE_BIN_SHIFT
 - 1));

127 
	}
}

129 
	smÆloc_°©e
 {

130 
bö_m≠_t
 
	msmÆl_m≠
;

131 
bö_m≠_t
 
	måì_m≠
;

132 
size_t
 
	mdv_size
;

133 
size_t
 
	mt›_size
;

134 *
	mÀa°_addr
;

135 
mÆloc_chunk
 *
	mdv
;

136 
mÆloc_chunk
 *
	mt›
;

137 
size_t
 
	måim_check
;

138 
size_t
 
	mªÀa£_checks
;

139 
size_t
 
	mmagic
;

140 
mÆloc_chunk
 *
	msmÆl_bös
[(
NUM_SMALL_BINS
 + 1) * 2];

141 
mÆloc_åì_chunk
 *
	måì_bös
[
NUM_TREE_BINS
];

142 
size_t
 
	mfoŸ¥öt
;

143 
size_t
 
	mmax_foŸ¥öt
;

144 
size_t
 
	mfoŸ¥öt_limô
;

145 
Êag_t
 
	mÊags
;

146 #i‡
USE_LOCKS


147 
MLOCK_T
 
	mmuãx
;

149 
mÆloc_£gmít
 
	m£gmít
;

151 
size_t
 
	mt›_cﬁ‹ed_size
;

154 
ölöe
 
	$is_öôülized
(
mÆloc_°©e
 *
°©e
) {

155  
°©e
->
t›
 != 0;

156 
	}
}

159 
ölöe
 
mÆloc_chunk
 *
	$smÆl_bö_©
(
mÆloc_°©e
 *
°©e
, 
bö_ödex_t
 
ödex
) {

160  (
mÆloc_chunk
 *Ë(*Ë&(
°©e
->
smÆl_bös
[
ödex
 << 1]);

161 
	}
}

163 
ölöe
 
mÆloc_åì_chunk
 **
	$åì_bö_©
(
mÆloc_°©e
 *
°©e
, 
bö_ödex_t
 
ödex
) {

164  &(
°©e
->
åì_bös
[
ödex
]);

165 
	}
}

168 
ölöe
 
bö_m≠_t
 
	$ödex_to_bô
(
bö_m≠_t
 
ödex
) {

169  (
bö_m≠_t
Ë1 << 
ödex
;

170 
	}
}

173 
ölöe
 
bö_m≠_t
 
	$m¨k_smÆl_m≠
(
mÆloc_°©e
 *
°©e
, 
bö_m≠_t
 
ödex
) {

174  
°©e
->
smÆl_m≠
 |
	`ödex_to_bô
(
ödex
);

175 
	}
}

178 
ölöe
 
bö_m≠_t
 
	$˛ór_smÆl_m≠
(
mÆloc_°©e
 *
°©e
, 
bö_m≠_t
 
ödex
) {

179  
°©e
->
smÆl_m≠
 &~
	`ödex_to_bô
(
ödex
);

180 
	}
}

182 
ölöe
 
	$smÆl_m≠_is_m¨ked
(
mÆloc_°©e
 *
°©e
, 
bö_ödex_t
 
ödex
) {

183  
°©e
->
smÆl_m≠
 & 
	`ödex_to_bô
(
ödex
);

184 
	}
}

186 
ölöe
 
bö_m≠_t
 
	$m¨k_åì_m≠
(
mÆloc_°©e
 *
°©e
, 
bö_m≠_t
 
ödex
) {

187  
°©e
->
åì_m≠
 |
	`ödex_to_bô
(
ödex
);

188 
	}
}

190 
ölöe
 
bö_m≠_t
 
	$˛ór_åì_m≠
(
mÆloc_°©e
 *
°©e
, 
bö_m≠_t
 
ödex
) {

191  
°©e
->
åì_m≠
 &~
	`ödex_to_bô
(
ödex
);

192 
	}
}

194 
ölöe
 
	$åì_m≠_is_m¨ked
(
mÆloc_°©e
 *
°©e
, 
bö_m≠_t
 
ödex
) {

195  
°©e
->
åì_m≠
 & 
	`ödex_to_bô
(
ödex
);

196 
	}
}

198 
ölöe
 
	$u£_mm≠
(
mÆloc_°©e
 *
°©e
) {

199  
°©e
->
Êags
 & 
USE_MMAP_BIT
;

200 
	}
}

202 
ölöe
 
	$íabÀ_mm≠
(
mÆloc_°©e
 *
°©e
) {

203 
°©e
->
Êags
 |
USE_MMAP_BIT
;

204 
	}
}

206 
ölöe
 
	$dißbÀ_mm≠
(
mÆloc_°©e
 *
°©e
) {

207 
°©e
->
Êags
 &~
USE_MMAP_BIT
;

208 
	}
}

210 
ölöe
 
	$u£_lock
(
mÆloc_°©e
 *
°©e
) {

211  
°©e
->
Êags
 & 
USE_LOCK_BIT
;

212 
	}
}

214 
ölöe
 
	$íabÀ_lock
(
mÆloc_°©e
 *
°©e
) {

215 
°©e
->
Êags
 |
USE_LOCK_BIT
;

216 
	}
}

218 
ölöe
 
	$dißbÀ_lock
(
mÆloc_°©e
 *
°©e
) {

219 
°©e
->
Êags
 &~
USE_LOCK_BIT
;

220 
	}
}

222 
ölöe
 
	$£t_lock
(
mÆloc_°©e
 *
°©e
, 
locked
) {

223 
°©e
->
Êags
 = 
locked
 ? (°©e->Êag†| 
USE_LOCK_BIT
) : (state->flags & ~USE_LOCK_BIT);

224 
	}
}

226 
ölöe
 
	$u£_n⁄c⁄tiguous
(
mÆloc_°©e
 *
°©e
) {

227  
°©e
->
Êags
 & 
USE_NONCONTIGUOUS_BIT
;

228 
	}
}

230 
ölöe
 
	$dißbÀ_c⁄tiguous
(
mÆloc_°©e
 *
°©e
) {

231 
°©e
->
Êags
 |
USE_NONCONTIGUOUS_BIT
;

232 
	}
}

234 
ölöe
 
	$should_åim
(
mÆloc_°©e
 *
°©e
, 
size_t
 
size
) {

235  
size
 > 
°©e
->
åim_check
;

236 
	}
}

238 
öô_t›
(
mÆloc_°©e
 *
°©e
, 
mÆloc_chunk
 *
chunk
, 
size_t
 
size
);

240 
öô_bös
(
mÆloc_°©e
 *
°©e
);

242 *
¥ïíd_Æloc
(
mÆloc_°©e
 *
°©e
, *
√w_ba£
, *
ﬁd_ba£
, 
size_t
 
nb
);

244 
add_£gmít
(
mÆloc_°©e
 *
°©e
, *
tba£
, 
size_t
 
tsize
, 
Êag_t
 
mm≠≥d
);

247 
bœckli°_chunk
(
mÆloc_°©e
 *
°©e
, 
mÆloc_chunk
* 
chunk
);

	@/home/iybang/dlmalloc/src/test.c

1 
	~<°döt.h
>

3 
	~"mÆloc.h
"

4 
	~"log.h
"

5 
	~"chunk.h
"

8 
	#dl_as£π
(
x
)\

10 if(!(
x
))\

11 
	`ab‹t
();\

12 }

	)

14 
	$ö•e˘‹
(*
°¨t
, *
íd
, 
size_t
 
u£d_byãs
, *
ˇŒback_¨g
) {

15 (Ë
ˇŒback_¨g
;

16 
	`dl_¥ötf
(

18 (
uöçå_t
Ë
°¨t
, (uöçå_tË
íd
, (íd - sèπ), 
u£d_byãs
);

19 
	}
}

21 
	$ã°_dl
() {

22 
	`dl_¥ötf
("\n---------RunningÅests: Including TMTE--------------\n\n");

23 
	`dl_¥ötf
("TAG_BITS=0x%016lX\n", (
uöçå_t
Ë
TAG_BITS
);

24 
	`dl_¥ötf
("TAG_OFFSET=0x%016lX\n", (
uöçå_t
Ë
TAG_OFFSET
);

25 
	`dl_¥ötf
("TAG_MASK=0x%016lX\n", (
uöçå_t
Ë
TAG_MASK
);

26 
	`dl_¥ötf
("Sizêo‡size_t=%ld\n", (
size_t
));

27 
	`dl_¥ötf
("\n-------------Test 1------------------- \n");

28 *
p1
 = 
	`dl_mÆloc
(8);

29 
u_öt64_t
 
p1_èg
 = 
	`gë_chunk_èg
(
	`mem_to_chunk
(
p1
));

30 *
p2
 = 
	`dl_mÆloc
(300);

32 
u_öt64_t
 
p2_èg
 = 
	`gë_chunk_èg
(
	`mem_to_chunk
(
p2
));

33 *
p3
 = 
	`dl_mÆloc
(1024 * 1024);

35 
	`dl_‰ì
(
p1
);

36 
	`dl_‰ì
(
p2
);

38 *
x
 = 
	`dl_mÆloc
(8);

39 *
y
 = 
	`dl_mÆloc
(300);

41 
u_öt64_t
 
x_èg
 = 
	`gë_chunk_èg
(
	`mem_to_chunk
(
x
));

42 
	`dl_‰ì
(
x
);

43 
p1
 = 
	`dl_mÆloc
(8);

44 
u_öt64_t
 
y_èg
 = 
	`gë_chunk_èg
(
	`mem_to_chunk
(
y
));

45 
	`dl_‰ì
(
y
);

46 
p2
 = 
	`dl_mÆloc
(300);

47 
	`dl_as£π
((
x
 =
p1
 && 
x_èg
 > 
p1_èg
));

48 
	`dl_as£π
((
y
 =
p2
 && 
y_èg
 > 
p2_èg
));

49 
	`dl_¥ötf
("test 1: Chunk Reuse, distinctÅags: PASSED\n");

50 
	`dl_‰ì
(
p3
);

51 
	`dl_¥ötf
("\n-------------Test 2----------------\n");

52 
p3
 = 
	`dl_mÆloc
(8);

53 
	`dl_‰ì
(
p3
);

54 
i
=0; i<16; ++i){

55 
x
 = 
	`dl_mÆloc
(8);

56 
	`dl_‰ì
(
x
);

58 
x
 = 
	`dl_mÆloc
(8);

59 
size_t
 
p3_èg
 = 
	`gë_chunk_èg
(
	`mem_to_chunk
(
p3
));

60 
x_èg
 = 
	`gë_chunk_èg
(
	`mem_to_chunk
(
x
));

61 *
p4
 = 
	`dl_mÆloc
(300);

62 
	`dl_‰ì
(
p4
);

63 
i
=0; i<16; ++i){

64 
y
 = 
	`dl_mÆloc
(300);

65 
	`dl_‰ì
(
y
);

67 
size_t
 
p4_èg
 = 
	`gë_chunk_èg
(
	`mem_to_chunk
(
p4
));

68 
y_èg
 = 
	`gë_chunk_èg
(
	`mem_to_chunk
(
y
));

74 
	`dl_¥ötf
("test 2: TagÉxhaustion, chunk Retirement: PASSED\n");

75 
	`dl_‰ì
(
x
);

76 
p3
 = 
	`dl_mÆloc
(8);

77 
p4
 = 
	`dl_mÆloc
(300);

79 
	`dl_¥ötf
("\n-------------Test 3 ----------------\n");

80 * 
p5
;

81 
i
=0; i<3; ++i){

82 
p5
 = 
	`dl_mÆloc
(500);

83 
	`dl_‰ì
(
p5
);

85 
p5
 = 
	`dl_mÆloc
(500);

86 * 
p6
;

87 
i
=0; i<3; ++i){

88 
p6
 = 
	`dl_mÆloc
(500);

89 
	`dl_‰ì
(
p6
);

91 
p6
 = 
	`dl_mÆloc
(500);

92 
	`dl_‰ì
(
p5
);

93 
size_t
 
p5_èg
 = 
	`gë_chunk_èg
(
	`mem_to_chunk
(
p5
));

95 
x
 = 
	`dl_mÆloc
(20);

96 
y
 = 
	`dl_mÆloc
(300);

98 
x_èg
 = 
	`gë_chunk_èg
(
	`mem_to_chunk
(
x
));

99 
y_èg
 = 
	`gë_chunk_èg
(
	`mem_to_chunk
(
y
));

101 
	`dl_as£π
(((
p5_èg
 =
y_èg
Ë&& (
x_èg
 ==Ö5_tag)));

102 
	`dl_as£π
(
p5
 =
x
);

103 
	`dl_¥ötf
("test 3: ChunkÑeuse, bigger free chunk chop: PASSED\n");

106 
	`dl_‰ì
(
x
);

107 
	`dl_‰ì
(
y
);

108 
	`dl_‰ì
(
p1
);

109 
	`dl_‰ì
(
p2
);

110 
	`dl_‰ì
(
p3
);

111 
	`dl_‰ì
(
p4
);

112 
	`dl_‰ì
(
p6
);

113 
	`dl_¥ötf
("\n-------------Test 4 ----------------\n");

115 
p1
 = 
	`dl_mÆloc
(60);

116 
p2
 = 
	`dl_mÆloc
(130);

117 
p3
 = 
	`dl_mÆloc
(450);

119 
p1_èg
 = 
	`gë_chunk_èg
(
	`mem_to_chunk
(
p1
));

120 
p2_èg
 = 
	`gë_chunk_èg
(
	`mem_to_chunk
(
p2
));

121 
p3_èg
 = 
	`gë_chunk_èg
(
	`mem_to_chunk
(
p3
));

122 
	`dl_as£π
((
p1_èg
 !0 && 
p2_èg
 !0 && 
p3_èg
 !=0));

123 
	`dl_¥ötf
("test 4: Arbitrary chunkálloc, checkÅag coloring: PASSED\n");

124 
p4
 = 
	`dl_mÆloc
(2064);

125 
i
=0; i<26; i++){

126 
	`dl_‰ì
(
p4
);

127 
	`dl_¥ötf
("hîe: i=%dÖ4_èg=0x%016lX\n",
i
,
	`gë_chunk_èg
(
	`mem_to_chunk
(
p4
)));

128 
p4
 = 
	`dl_mÆloc
(2064);

131 
	`dl_‰ì
(
p4
);

132 
size
 = 5400;

133 
p5
 = 
	`dl_mÆloc
(
size
);

134 
i
=0; i<15; i++){

135 
	`dl_‰ì
(
p5
);

136 
p5
 = 
	`dl_mÆloc
(
size
);

138 
	`dl_‰ì
(
p5
);

140 
p6
 = 
	`dl_mÆloc
(200);

141 
	`dl_‰ì
(
p6
);

143 
	`dl_¥ötf
("\n-----------------TestingÑealloc-------------------\n");

144 
p4
 = 
	`dl_mÆloc
(10);

145 
p5
 = 
	`dl_ªÆloc
(
p4
,15);

146 
p4
 = 
	`dl_ªÆloc
(
p5
,40);

147 
	`dl_‰ì
(
p4
);

148 
	`dl_¥ötf
("\ninspectáll\n");

149 
	`dl_mÆloc_ö•e˘_Æl
(&
ö•e˘‹
, 0);

150 
	`dl_¥ötf
("\n\n----------End of Tests-----------\n\n");

151 
	}
}

153 
	$maö
() {

154 
	`ã°_dl
();

157 
	}
}

	@/home/iybang/dlmalloc/src/tmte.h

1 #i‚de‡
TMTE_DLMALLOC_H


2 
	#TMTE_DLMALLOC_H


	)

4 
	~<°döt.h
>

5 
	~<°ddef.h
>

6 #ifde‡
AARCH64


7 
	~<î∫o.h
>

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<uni°d.h
>

11 
	~<sys/auxv.h
>

13 
	#__USE_GNU


	)

14 
	~<sys/mm™.h
>

15 #ifde‡
AARCH64


16 
	~<sys/¥˘l.h
>

18 
	#SOFTBOUNDCETS_MMAP_FLAGS
 (
MAP_PRIVATE
|
MAP_ANONYMOUS
|
MAP_NORESERVE
)

	)

19 #unde‡
__USE_GNU


22 #i‚de‡
RISCV


23 * 
__mã_èg_mem
;

24 #ifde‡
AARCH64


25 
	#HWCAP2_MTE
 (1 << 18)

	)

26 
	#PROT_MTE
 (0x20)

	)

27 
	#PR_SET_TAGGED_ADDR_CTRL
 55

	)

28 
	#PR_GET_TAGGED_ADDR_CTRL
 56

	)

29 
	#PR_TAGGED_ADDR_ENABLE
 (1UL << 0)

	)

30 
	#PR_MTE_TCF_SHIFT
 1

	)

31 
	#PR_MTE_TCF_NONE
 (0UL << 
PR_MTE_TCF_SHIFT
)

	)

32 
	#PR_MTE_TCF_SYNC
 (1UL << 
PR_MTE_TCF_SHIFT
)

	)

33 
	#PR_MTE_TCF_ASYNC
 (2UL << 
PR_MTE_TCF_SHIFT
)

	)

34 
	#PR_MTE_TCF_MASK
 (3UL << 
PR_MTE_TCF_SHIFT
)

	)

35 
	#PR_MTE_TAG_SHIFT
 3

	)

36 
	#PR_MTE_TAG_MASK
 (0xffffUL << 
PR_MTE_TAG_SHIFT
)

	)

40 #ifde‡
RISCV


41 
ölöe
 
	$lﬂd_èg
(*
addr
) {

42 
rv
 = 32;

43 
asm
 volatile ("ltag %0, 0(%1)"

44 :"Ù"(
rv
)

45 :"r"(
addr
)

47  
rv
;

48 
	}
}

51 
ölöe
 
	$°‹e_èg
(*
addr
, 
èg
) {

52 
asm
 volatile ("stag %0, 0(%1)"

54 :"r"(
èg
), "r"(
addr
)

56 
	}
}

59 #ifde‡
AARCH64


63 
	#ö£π_øndom_èg
(
±r
) ({ \

64 
uöt64_t
 
__vÆ
; \

65 
	`asm
("úg %0, %1" : "Ù" (
__vÆ
Ë: "r" (
±r
)); \

66 
__vÆ
; \

67 })

	)

72 
	#£t_èg
(
ègged_addr
) do { \

73 
asm
 vﬁ©ûe("°g %0, [%0]" : : "r" (
ègged_addr
) : "memory"); \

74 } 0)

	)

77 
ölöe
 
	$mã_öô
(){

78 #ifde‡
AARCH64


79 
hwˇp2
 = 
	`gëauxvÆ
(
AT_HWCAP2
);

82 if(!(
hwˇp2
 & 
HWCAP2_MTE
)){

83 
	`ab‹t
();

89 i‡(
	`¥˘l
(
PR_SET_TAGGED_ADDR_CTRL
,

90 
PR_TAGGED_ADDR_ENABLE
 | 
PR_MTE_TCF_SYNC
 | (0xff„ << 
PR_MTE_TAG_SHIFT
),

92 
	`≥º‹
("prctl() failed");

93 
	`ab‹t
();

97 
__mã_èg_mem
 = (*Ë
	`mm≠
(0, 0x0000100000000000, 
PROT_MTE
| 
PROT_READ
|
PROT_WRITE
, 
SOFTBOUNDCETS_MMAP_FLAGS
, -1, 0);

99 if(
__mã_èg_mem
 =
MAP_FAILED
){

100 
	`ab‹t
();

104 
__mã_èg_mem
 = (*Ë
	`mm≠
(0, 0x0000100000000000 , 
PROT_READ
 | 
PROT_WRITE
 , 
SOFTBOUNDCETS_MMAP_FLAGS
, -1, 0);

106 
	}
}

108 
ölöe
 
u_öt8_t
 
	$mã_cﬁ‹_èg2
(*
ba£
, 
size
, 
u_öt8_t
 
èg_num
) {

109 *
èg_°¨t
 = 
__mã_èg_mem
 + (()
ba£
 >> 4);

110 *
èg_íd
 = 
__mã_èg_mem
 + (()(
ba£
 + 
size
 - 1) >> 4);

111 *
cur
 = 
èg_°¨t
; cu∏<
èg_íd
; cur++)

112 *
cur
 = 
èg_num
;

114  
èg_num
;

116 
	}
}

117 
	gtŸÆ2
 = 0;

118 
	gtŸÆ3
 = 0;

119 
	ghundªd_mega
 = 1000000000;

120 
ölöe
 
u_öt8_t
 
	$mã_cﬁ‹_èg
(*
ba£
, 
size
, 
u_öt8_t
 
èg_num
) {

132 #i‡
	`deföed
–
RISCV
)

133 
Àngth
 = ()
size
 / 2;

134 *
cur
 = ()
ba£
 & 0xFFFFFFF0;

135 if(()
ba£
 & 0x0F)

136 
Àngth
 += 1;

141 *
èg_°¨t
 = 
__mã_èg_mem
 + (()
ba£
 >> 4);

142 *
èg_íd
 = 
__mã_èg_mem
 + (()(
ba£
 + 
size
 - 1) >> 4);

143 *
cur
 = 
èg_°¨t
; cu∏<
èg_íd
; cur++)

144 *
cur
 = 
èg_num
;

147  
èg_num
;

148 
	}
}

150 
ölöe
 
u_öt8_t
 
	$mã_lﬂd_èg
(* 
ba£
, 
size
){

151 #ifde‡
RISCV


152 
ba£_èg
 = 
	`lﬂd_èg
(
ba£
);

154 
ba£_èg
 = *(
__mã_èg_mem
 + (()
ba£
 >> 4));

156 i‡(
ba£_èg
)

157  
ba£_èg
;

160 
	}
}

	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


26 #i‚def 
__√ed_Em©h


27 
	#_ERRNO_H
 1

	)

28 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


35 
	~<bôs/î∫o.h
>

36 #unde‡
__√ed_Em©h


38 #ifdef 
_ERRNO_H


45 #i‚def 
î∫o


46 
î∫o
;

49 #ifde‡
__USE_GNU


54 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

58 
	g__END_DECLS


66 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


67 #i‚de‡
__îr‹_t_deföed


68 
	tîr‹_t
;

69 
	#__îr‹_t_deföed
 1

	)

71 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

39 #ifde‡
__O_TMPFILE


40 
	#__OPEN_NEEDS_MODE
(
oÊag
) \

41 (((
oÊag
Ë& 
O_CREAT
Ë!0 || ((oÊagË& 
__O_TMPFILE
Ë=__O_TMPFILE)

	)

43 
	#__OPEN_NEEDS_MODE
(
oÊag
Ë(((oÊagË& 
O_CREAT
Ë!0)

	)

49 #i‚de‡
__mode_t_deföed


50 
__mode_t
 
	tmode_t
;

51 
	#__mode_t_deföed


	)

54 #i‚de‡
__off_t_deföed


55 #i‚de‡
__USE_FILE_OFFSET64


56 
__off_t
 
	toff_t
;

58 
__off64_t
 
	toff_t
;

60 
	#__off_t_deföed


	)

63 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


64 
__off64_t
 
	toff64_t
;

65 
	#__off64_t_deföed


	)

68 #i‚de‡
__pid_t_deföed


69 
__pid_t
 
	tpid_t
;

70 
	#__pid_t_deföed


	)

74 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


75 
	#__√ed_time•ec


	)

76 
	~<time.h
>

77 
	~<bôs/°©.h
>

79 
	#S_IFMT
 
__S_IFMT


	)

80 
	#S_IFDIR
 
__S_IFDIR


	)

81 
	#S_IFCHR
 
__S_IFCHR


	)

82 
	#S_IFBLK
 
__S_IFBLK


	)

83 
	#S_IFREG
 
__S_IFREG


	)

84 #ifde‡
__S_IFIFO


85 
	#S_IFIFO
 
__S_IFIFO


	)

87 #ifde‡
__S_IFLNK


88 
	#S_IFLNK
 
__S_IFLNK


	)

90 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


91 
	#S_IFSOCK
 
__S_IFSOCK


	)

96 
	#S_ISUID
 
__S_ISUID


	)

97 
	#S_ISGID
 
__S_ISGID


	)

99 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


101 
	#S_ISVTX
 
__S_ISVTX


	)

104 
	#S_IRUSR
 
__S_IREAD


	)

105 
	#S_IWUSR
 
__S_IWRITE


	)

106 
	#S_IXUSR
 
__S_IEXEC


	)

108 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

110 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

111 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

112 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

114 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

116 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

117 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

118 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

120 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

123 #ifdef 
__USE_MISC


124 #i‚de‡
R_OK


127 
	#R_OK
 4

	)

128 
	#W_OK
 2

	)

129 
	#X_OK
 1

	)

130 
	#F_OK
 0

	)

135 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


136 
	#SEEK_SET
 0

	)

137 
	#SEEK_CUR
 1

	)

138 
	#SEEK_END
 2

	)

146 
f˙é
 (
__fd
, 
__cmd
, ...);

155 #i‚de‡
__USE_FILE_OFFSET64


156 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

158 #ifde‡
__REDIRECT


159 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

160 
	`__n⁄nuŒ
 ((1));

162 
	#›í
 
›í64


	)

165 #ifde‡
__USE_LARGEFILE64


166 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

169 #ifde‡
__USE_ATFILE


179 #i‚de‡
__USE_FILE_OFFSET64


180 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

181 
	`__n⁄nuŒ
 ((2));

183 #ifde‡
__REDIRECT


184 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

185 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

187 
	#›í©
 
›í©64


	)

190 #ifde‡
__USE_LARGEFILE64


191 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

192 
	`__n⁄nuŒ
 ((2));

201 #i‚de‡
__USE_FILE_OFFSET64


202 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

204 #ifde‡
__REDIRECT


205 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

206 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

208 
	#¸ót
 
¸ót64


	)

211 #ifde‡
__USE_LARGEFILE64


212 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

215 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

216 && !
deföed
 
__USE_POSIX
))

225 
	#F_ULOCK
 0

	)

226 
	#F_LOCK
 1

	)

227 
	#F_TLOCK
 2

	)

228 
	#F_TEST
 3

	)

230 #i‚de‡
__USE_FILE_OFFSET64


231 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

233 #ifde‡
__REDIRECT


234 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

236 
	#lockf
 
lockf64


	)

239 #ifde‡
__USE_LARGEFILE64


240 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

244 #ifde‡
__USE_XOPEN2K


247 #i‚de‡
__USE_FILE_OFFSET64


248 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

249 
__advi£
Ë
__THROW
;

251 #ifde‡
__REDIRECT_NTH


252 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

253 
__off64_t
 
__Àn
, 
__advi£
),

254 
posix_Ádvi£64
);

256 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

259 #ifde‡
__USE_LARGEFILE64


260 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

261 
__advi£
Ë
__THROW
;

269 #i‚de‡
__USE_FILE_OFFSET64


270 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

272 #ifde‡
__REDIRECT


273 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

274 
__off64_t
 
__Àn
),

275 
posix_ÁŒoˇã64
);

277 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

280 #ifde‡
__USE_LARGEFILE64


281 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

287 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

288 && 
deföed
 
__va_¨g_∑ck_Àn


289 
	~<bôs/f˙é2.h
>

292 
__END_DECLS


	@/usr/include/malloc.h

19 #i‚de‡
_MALLOC_H


20 
	#_MALLOC_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<°ddef.h
>

24 
	~<°dio.h
>

26 #ifde‡
_LIBC


27 
	#__MALLOC_HOOK_VOLATILE


	)

28 
	#__MALLOC_DEPRECATED


	)

30 
	#__MALLOC_HOOK_VOLATILE
 vﬁ©ûe

	)

31 
	#__MALLOC_DEPRECATED
 
__©åibuã_dïªˇãd__


	)

35 
__BEGIN_DECLS


38 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

41 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

42 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

49 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

50 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

53 
	$‰ì
 (*
__±r
Ë
__THROW
;

56 
	$c‰ì
 (*
__±r
Ë
__THROW
;

59 *
	$memÆign
 (
size_t
 
__Æignmít
, size_à
__size
)

60 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

63 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

67 *
	$pvÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

71 *(*
__m‹ec‹e
Ë(
±rdiff_t
 
__size
);

74 *
	$__deÁu…_m‹ec‹e
 (
±rdiff_t
 
__size
)

75 
__THROW
 
__©åibuã_mÆloc__
;

79 
	smÆlöfo


81 
¨ía
;

82 
‹dblks
;

83 
smblks
;

84 
hblks
;

85 
hblkhd
;

86 
usmblks
;

87 
fsmblks
;

88 
u‹dblks
;

89 
f‹dblks
;

90 
kìpco°
;

94 
mÆlöfo
 
	$mÆlöfo
 (Ë
__THROW
;

97 #i‚de‡
M_MXFAST


98 
	#M_MXFAST
 1

	)

100 #i‚de‡
M_NLBLKS


101 
	#M_NLBLKS
 2

	)

103 #i‚de‡
M_GRAIN


104 
	#M_GRAIN
 3

	)

106 #i‚de‡
M_KEEP


107 
	#M_KEEP
 4

	)

111 
	#M_TRIM_THRESHOLD
 -1

	)

112 
	#M_TOP_PAD
 -2

	)

113 
	#M_MMAP_THRESHOLD
 -3

	)

114 
	#M_MMAP_MAX
 -4

	)

115 
	#M_CHECK_ACTION
 -5

	)

116 
	#M_PERTURB
 -6

	)

117 
	#M_ARENA_TEST
 -7

	)

118 
	#M_ARENA_MAX
 -8

	)

121 
	$mÆl›t
 (
__∑øm
, 
__vÆ
Ë
__THROW
;

125 
	$mÆloc_åim
 (
size_t
 
__∑d
Ë
__THROW
;

129 
size_t
 
	$mÆloc_ußbÀ_size
 (*
__±r
Ë
__THROW
;

132 
	$mÆloc_°©s
 (Ë
__THROW
;

135 
	$mÆloc_öfo
 (
__›ti⁄s
, 
FILE
 *
__Â
Ë
__THROW
;

138 *
	$mÆloc_gë_°©e
 (Ë
__THROW
;

142 
	$mÆloc_£t_°©e
 (*
__±r
Ë
__THROW
;

147 (*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_öôülize_hook
) ()

148 
__MALLOC_DEPRECATED
;

150 (*
__MALLOC_HOOK_VOLATILE
 
__‰ì_hook
Ë(*
__±r
,

152 
__MALLOC_DEPRECATED
;

153 *(*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_hook
)(
size_t
 
__size
,

155 
__MALLOC_DEPRECATED
;

156 *(*
__MALLOC_HOOK_VOLATILE
 
__ªÆloc_hook
)(*
__±r
,

157 
size_t
 
__size
,

159 
__MALLOC_DEPRECATED
;

160 *(*
__MALLOC_HOOK_VOLATILE
 
__memÆign_hook
)(
size_t
 
__Æignmít
,

161 
size_t
 
__size
,

163 
__MALLOC_DEPRECATED
;

164 (*
__MALLOC_HOOK_VOLATILE
 
__a·î_m‹ec‹e_hook
) ();

167 
	$__mÆloc_check_öô
 (Ë
__THROW
 
__MALLOC_DEPRECATED
;

170 
__END_DECLS


	@/usr/include/pthread.h

18 #i‚de‡
_PTHREAD_H


19 
	#_PTHREAD_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<ídün.h
>

23 
	~<sched.h
>

24 
	~<time.h
>

26 
	~<bôs/±hªadty≥s.h
>

27 
	~<bôs/£tjmp.h
>

28 
	~<bôs/w‹dsize.h
>

34 
	mPTHREAD_CREATE_JOINABLE
,

35 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

36 
	mPTHREAD_CREATE_DETACHED


37 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

44 
	mPTHREAD_MUTEX_TIMED_NP
,

45 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

46 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

47 
	mPTHREAD_MUTEX_ADAPTIVE_NP


48 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


50 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

51 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

52 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

53 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


55 #ifde‡
__USE_GNU


57 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


62 #ifde‡
__USE_XOPEN2K


66 
	mPTHREAD_MUTEX_STALLED
,

67 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

68 
	mPTHREAD_MUTEX_ROBUST
,

69 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


74 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


78 
	mPTHREAD_PRIO_NONE
,

79 
	mPTHREAD_PRIO_INHERIT
,

80 
	mPTHREAD_PRIO_PROTECT


85 #ifde‡
__PTHREAD_MUTEX_HAVE_PREV


86 
	#PTHREAD_MUTEX_INITIALIZER
 \

87 { { 0, 0, 0, 0, 0, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

88 #ifde‡
__USE_GNU


89 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

90 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

91 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

92 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

93 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

94 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

98 
	#PTHREAD_MUTEX_INITIALIZER
 \

99 { { 0, 0, 0, 0, 0, { 
__PTHREAD_SPINS
 } } }

	)

100 #ifde‡
__USE_GNU


101 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

102 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

103 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

104 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

105 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

113 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


116 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

117 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

118 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

119 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


125 #i‚de‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


126 #i‡
__WORDSIZE
 == 64

127 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

132 
	#PTHREAD_RWLOCK_INITIALIZER
 \

133 { { 0, 0, 0, 0, 0, 0, 0, 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, 0 } }

	)

134 #ifde‡
__USE_GNU


135 #ifde‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


136 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

137 { { 0, 0, 0, 0, 0, 0, 0, 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, \

138 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

140 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


141 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

142 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

143 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, 0 } }

	)

145 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

146 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

147 0 } }

	)

157 
	mPTHREAD_INHERIT_SCHED
,

158 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

159 
	mPTHREAD_EXPLICIT_SCHED


160 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

167 
	mPTHREAD_SCOPE_SYSTEM
,

168 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

169 
	mPTHREAD_SCOPE_PROCESS


170 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

177 
	mPTHREAD_PROCESS_PRIVATE
,

178 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

179 
	mPTHREAD_PROCESS_SHARED


180 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

186 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

190 
	s_±hªad_˛ónup_buf„r


192 (*
	m__routöe
) (*);

193 *
	m__¨g
;

194 
	m__ˇn˚…y≥
;

195 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

201 
	mPTHREAD_CANCEL_ENABLE
,

202 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

203 
	mPTHREAD_CANCEL_DISABLE


204 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

208 
	mPTHREAD_CANCEL_DEFERRED
,

209 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

210 
	mPTHREAD_CANCEL_ASYNCHRONOUS


211 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

213 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

217 
	#PTHREAD_ONCE_INIT
 0

	)

220 #ifde‡
__USE_XOPEN2K


224 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

228 
__BEGIN_DECLS


233 
	$±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

234 c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

235 *(*
__°¨t_routöe
) (*),

236 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 3));

242 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

250 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

252 #ifde‡
__USE_GNU


255 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

263 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

264 c⁄° 
time•ec
 *
__ab°ime
);

271 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

275 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

278 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
)

279 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

287 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

290 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

291 
__THROW
 
	`__n⁄nuŒ
 ((1));

294 
	$±hªad_©å_gëdëach°©e
 (c⁄° 
±hªad_©å_t
 *
__©å
,

295 *
__dëach°©e
)

296 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

299 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

300 
__dëach°©e
)

301 
__THROW
 
	`__n⁄nuŒ
 ((1));

305 
	$±hªad_©å_gëgu¨dsize
 (c⁄° 
±hªad_©å_t
 *
__©å
,

306 
size_t
 *
__gu¨dsize
)

307 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

310 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

311 
size_t
 
__gu¨dsize
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1));

316 
	$±hªad_©å_gësched∑øm
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

317 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

318 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

321 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

322 c⁄° 
sched_∑øm
 *
__ª°ri˘


323 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

326 
	$±hªad_©å_gëschedpﬁicy
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


327 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

328 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

331 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

332 
__THROW
 
	`__n⁄nuŒ
 ((1));

335 
	$±hªad_©å_gëöhîôsched
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


336 
__©å
, *
__ª°ri˘
 
__öhîô
)

337 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

340 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

341 
__öhîô
)

342 
__THROW
 
	`__n⁄nuŒ
 ((1));

346 
	$±hªad_©å_gësc›e
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

347 *
__ª°ri˘
 
__sc›e
)

348 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

351 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

352 
__THROW
 
	`__n⁄nuŒ
 ((1));

355 
	$±hªad_©å_gë°ackaddr
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


356 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

357 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

363 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

364 *
__°ackaddr
)

365 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

368 
	$±hªad_©å_gë°acksize
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


369 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

370 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

375 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

376 
size_t
 
__°acksize
)

377 
__THROW
 
	`__n⁄nuŒ
 ((1));

379 #ifde‡
__USE_XOPEN2K


381 
	$±hªad_©å_gë°ack
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

382 **
__ª°ri˘
 
__°ackaddr
,

383 
size_t
 *
__ª°ri˘
 
__°acksize
)

384 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

389 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

390 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 #ifde‡
__USE_GNU


396 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

397 
size_t
 
__˝u£tsize
,

398 c⁄° 
˝u_£t_t
 *
__˝u£t
)

399 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

403 
	$±hªad_©å_gëafföôy_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
,

404 
size_t
 
__˝u£tsize
,

405 
˝u_£t_t
 *
__˝u£t
)

406 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

409 
	$±hªad_gë©å_deÁu…_≈
 (
±hªad_©å_t
 *
__©å
)

410 
__THROW
 
	`__n⁄nuŒ
 ((1));

414 
	$±hªad_£èâr_deÁu…_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
)

415 
__THROW
 
	`__n⁄nuŒ
 ((1));

420 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2));

429 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

430 c⁄° 
sched_∑øm
 *
__∑øm
)

431 
__THROW
 
	`__n⁄nuŒ
 ((3));

434 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

435 *
__ª°ri˘
 
__pﬁicy
,

436 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

437 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

440 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

441 
__THROW
;

444 #ifde‡
__USE_GNU


446 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

447 
size_t
 
__buÊí
)

448 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, c⁄° *
__«me
)

452 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 #ifde‡
__USE_UNIX98


458 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

461 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

464 #ifde‡
__USE_GNU


469 
	$±hªad_yõld
 (Ë
__THROW
;

474 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

475 c⁄° 
˝u_£t_t
 *
__˝u£t
)

476 
__THROW
 
	`__n⁄nuŒ
 ((3));

479 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

480 
˝u_£t_t
 *
__˝u£t
)

481 
__THROW
 
	`__n⁄nuŒ
 ((3));

494 
	$±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

495 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

506 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

510 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

513 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

518 
	`±hªad_ã°ˇn˚l
 ();

527 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

528 
__mask_was_ßved
;

529 } 
__ˇn˚l_jmp_buf
[1];

530 *
__∑d
[4];

531 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

534 #i‚de‡
__˛ónup_f˘_©åibuã


535 
	#__˛ónup_f˘_©åibuã


	)

540 
	s__±hªad_˛ónup_‰ame


542 (*
__ˇn˚l_routöe
) (*);

543 *
__ˇn˚l_¨g
;

544 
__do_ô
;

545 
__ˇn˚l_ty≥
;

548 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


549 #ifde‡
__˝lu•lus


551 ˛as†
	c__±hªad_˛ónup_˛ass


553 (*
__ˇn˚l_routöe
) (*);

554 *
__ˇn˚l_¨g
;

555 
__do_ô
;

556 
__ˇn˚l_ty≥
;

558 
public
:

559 
	$__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

560 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

561 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

562 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

563 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

564 &
__ˇn˚l_ty≥
); 
	}
}

565 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

575 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

577 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

581 
	#±hªad_˛ónup_p›
(
execuã
) \

582 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

583 } 0)

	)

585 #ifde‡
__USE_GNU


589 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

591 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

592 
__˛‰ame
.
	`__de„r
 ()

	)

597 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

598 
__˛‰ame
.
	`__ª°‹e
 (); \

599 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

600 } 0)

	)

607 
__exã∫_ölöe
 

608 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

610 i‡(
__‰ame
->
__do_ô
)

611 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

612 
	}
}

621 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

623 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

624 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

625 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

626 .
__do_ô
 = 1 };

	)

630 
	#±hªad_˛ónup_p›
(
execuã
) \

631 
__˛‰ame
.
__do_ô
 = (
execuã
); \

632 } 0)

	)

634 #ifde‡
__USE_GNU


638 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

640 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

641 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

642 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

643 .
__do_ô
 = 1 }; \

644 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

645 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

650 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

651 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

652 
__˛‰ame
.
__do_ô
 = (
execuã
); \

653 } 0)

	)

664 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

666 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

667 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

668 *
__ˇn˚l_¨g
 = (
¨g
); \

669 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

670 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

671 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

673 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

674 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

678 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

679 dÿ{

	)

680 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

681 
__˛ónup_f˘_©åibuã
;

685 
	#±hªad_˛ónup_p›
(
execuã
) \

688 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

689 i‡(
execuã
) \

690 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

691 } 0)

	)

692 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

693 
__˛ónup_f˘_©åibuã
;

695 #ifde‡
__USE_GNU


699 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

701 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

702 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

703 *
__ˇn˚l_¨g
 = (
¨g
); \

704 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

705 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

706 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

708 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

709 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

713 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

714 dÿ{

	)

715 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

716 
__˛ónup_f˘_©åibuã
;

721 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

724 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

725 i‡(
execuã
) \

726 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

727 
	}
} 0)

	)

728 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

729 
__˛ónup_f˘_©åibuã
;

733 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

734 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

735 #i‚de‡
SHARED


736 
	`__©åibuã__
 ((
__wók__
))

742 
__jmp_buf_èg
;

743 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROWNL
;

749 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

750 c⁄° 
±hªad_muãx©å_t
 *
__muãx©å
)

751 
__THROW
 
	`__n⁄nuŒ
 ((1));

754 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

755 
__THROW
 
	`__n⁄nuŒ
 ((1));

758 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

759 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

762 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

763 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

765 #ifde‡
__USE_XOPEN2K


767 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

768 c⁄° 
time•ec
 *
__ª°ri˘


769 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

773 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

774 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

778 
	$±hªad_muãx_gë¥io˚ûög
 (c⁄° 
±hªad_muãx_t
 *

779 
__ª°ri˘
 
__muãx
,

780 *
__ª°ri˘
 
__¥io˚ûög
)

781 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

785 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

786 
__¥io˚ûög
,

787 *
__ª°ri˘
 
__ﬁd_˚ûög
)

788 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

791 #ifde‡
__USE_XOPEN2K8


793 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

794 
__THROW
 
	`__n⁄nuŒ
 ((1));

795 #ifde‡
__USE_GNU


796 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

797 
__THROW
 
	`__n⁄nuŒ
 ((1));

806 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

807 
__THROW
 
	`__n⁄nuŒ
 ((1));

810 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

811 
__THROW
 
	`__n⁄nuŒ
 ((1));

814 
	$±hªad_muãx©å_gëpsh¨ed
 (c⁄° 
±hªad_muãx©å_t
 *

815 
__ª°ri˘
 
__©å
,

816 *
__ª°ri˘
 
__psh¨ed
)

817 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

820 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

821 
__psh¨ed
)

822 
__THROW
 
	`__n⁄nuŒ
 ((1));

824 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


826 
	$±hªad_muãx©å_gëty≥
 (c⁄° 
±hªad_muãx©å_t
 *
__ª°ri˘


827 
__©å
, *
__ª°ri˘
 
__köd
)

828 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

833 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

834 
__THROW
 
	`__n⁄nuŒ
 ((1));

838 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (c⁄° 
±hªad_muãx©å_t
 *

839 
__ª°ri˘
 
__©å
,

840 *
__ª°ri˘
 
__¥Ÿocﬁ
)

841 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

845 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

846 
__¥Ÿocﬁ
)

847 
__THROW
 
	`__n⁄nuŒ
 ((1));

850 
	$±hªad_muãx©å_gë¥io˚ûög
 (c⁄° 
±hªad_muãx©å_t
 *

851 
__ª°ri˘
 
__©å
,

852 *
__ª°ri˘
 
__¥io˚ûög
)

853 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

857 
__¥io˚ûög
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

860 #ifde‡
__USE_XOPEN2K


862 
	$±hªad_muãx©å_gërobu°
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

863 *
__robu°√ss
)

864 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

865 #ifde‡
__USE_GNU


866 
	$±hªad_muãx©å_gërobu°_≈
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

867 *
__robu°√ss
)

868 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

872 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

873 
__robu°√ss
)

874 
__THROW
 
	`__n⁄nuŒ
 ((1));

875 #ifde‡
__USE_GNU


876 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

877 
__robu°√ss
)

878 
__THROW
 
	`__n⁄nuŒ
 ((1));

883 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


888 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

889 c⁄° 
±hªad_rwlock©å_t
 *
__ª°ri˘


890 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

893 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

894 
__THROW
 
	`__n⁄nuŒ
 ((1));

897 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

898 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

901 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

902 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

904 #ifde‡
__USE_XOPEN2K


906 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

907 c⁄° 
time•ec
 *
__ª°ri˘


908 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

912 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

913 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

916 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

917 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

919 #ifde‡
__USE_XOPEN2K


921 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

922 c⁄° 
time•ec
 *
__ª°ri˘


923 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

927 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

928 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

934 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

935 
__THROW
 
	`__n⁄nuŒ
 ((1));

938 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

939 
__THROW
 
	`__n⁄nuŒ
 ((1));

942 
	$±hªad_rwlock©å_gëpsh¨ed
 (c⁄° 
±hªad_rwlock©å_t
 *

943 
__ª°ri˘
 
__©å
,

944 *
__ª°ri˘
 
__psh¨ed
)

945 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

948 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

949 
__psh¨ed
)

950 
__THROW
 
	`__n⁄nuŒ
 ((1));

953 
	$±hªad_rwlock©å_gëköd_≈
 (c⁄° 
±hªad_rwlock©å_t
 *

954 
__ª°ri˘
 
__©å
,

955 *
__ª°ri˘
 
__¥ef
)

956 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

959 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

960 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

968 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

969 c⁄° 
±hªad_c⁄d©å_t
 *
__ª°ri˘
 
__c⁄d_©å
)

970 
__THROW
 
	`__n⁄nuŒ
 ((1));

973 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

974 
__THROW
 
	`__n⁄nuŒ
 ((1));

977 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

978 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

981 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

982 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

989 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

990 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

991 
	`__n⁄nuŒ
 ((1, 2));

1000 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1001 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

1002 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

1003 
	`__n⁄nuŒ
 ((1, 2, 3));

1008 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

1009 
__THROW
 
	`__n⁄nuŒ
 ((1));

1012 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

1013 
__THROW
 
	`__n⁄nuŒ
 ((1));

1016 
	$±hªad_c⁄d©å_gëpsh¨ed
 (c⁄° 
±hªad_c⁄d©å_t
 *

1017 
__ª°ri˘
 
__©å
,

1018 *
__ª°ri˘
 
__psh¨ed
)

1019 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1022 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1023 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1025 #ifde‡
__USE_XOPEN2K


1027 
	$±hªad_c⁄d©å_gë˛ock
 (c⁄° 
±hªad_c⁄d©å_t
 *

1028 
__ª°ri˘
 
__©å
,

1029 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1030 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1033 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1034 
__˛ockid_t
 
__˛ock_id
)

1035 
__THROW
 
	`__n⁄nuŒ
 ((1));

1039 #ifde‡
__USE_XOPEN2K


1044 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1045 
__THROW
 
	`__n⁄nuŒ
 ((1));

1048 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1049 
__THROW
 
	`__n⁄nuŒ
 ((1));

1052 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1053 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1056 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1057 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1060 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1061 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1068 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1069 c⁄° 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1070 
__©å
, 
__cou¡
)

1071 
__THROW
 
	`__n⁄nuŒ
 ((1));

1074 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1075 
__THROW
 
	`__n⁄nuŒ
 ((1));

1078 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1079 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1083 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1084 
__THROW
 
	`__n⁄nuŒ
 ((1));

1087 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1088 
__THROW
 
	`__n⁄nuŒ
 ((1));

1091 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (c⁄° 
±hªad_b¨rõøâr_t
 *

1092 
__ª°ri˘
 
__©å
,

1093 *
__ª°ri˘
 
__psh¨ed
)

1094 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1097 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1098 
__psh¨ed
)

1099 
__THROW
 
	`__n⁄nuŒ
 ((1));

1111 
	$±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1112 (*
__de°r_fun˘i⁄
) (*))

1113 
__THROW
 
	`__n⁄nuŒ
 ((1));

1116 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1119 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1122 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1123 c⁄° *
__poöãr
Ë
__THROW
 ;

1126 #ifde‡
__USE_XOPEN2K


1128 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1129 
__˛ockid_t
 *
__˛ock_id
)

1130 
__THROW
 
	`__n⁄nuŒ
 ((2));

1145 
	$±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1146 (*
__∑ª¡
) (),

1147 (*
__chûd
Ë()Ë
__THROW
;

1150 #ifde‡
__USE_EXTERN_INLINES


1152 
__exã∫_ölöe
 

1153 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1155  
__thªad1
 =
__thªad2
;

1156 
	}
}

1159 
	g__END_DECLS


	@/usr/include/sched.h

19 #i‚def 
_SCHED_H


20 
	#_SCHED_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

30 #ifde‡
__USE_XOPEN2K


31 
	#__√ed_time_t


	)

32 
	#__√ed_time•ec


	)

34 
	~<time.h
>

36 #i‚de‡
__pid_t_deföed


37 
__pid_t
 
	tpid_t
;

38 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

45 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

48 
__BEGIN_DECLS


51 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, c⁄° 
sched_∑øm
 *
__∑øm
)

52 
__THROW
;

55 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

58 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

59 c⁄° 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

62 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

65 
	$sched_yõld
 (Ë
__THROW
;

68 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

77 #ifde‡
__USE_GNU


79 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

80 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

81 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

82 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

83 
˝u£ç
)

	)

84 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

87 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

88 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

89 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

90 
˝u£ç
)

	)

91 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

94 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

96 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

97 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

99 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

101 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

103 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

105 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

107 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

109 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

110 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

112 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

113 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

114 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

118 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

119 c⁄° 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

122 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

123 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

126 
__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

144 #i‡
__WORDSIZE
 == 64

145 
	#__INT64_C
(
c
Ë¯## 
L


	)

146 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

148 
	#__INT64_C
(
c
Ë¯## 
LL


	)

149 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

155 
	#INT8_MIN
 (-128)

	)

156 
	#INT16_MIN
 (-32767-1)

	)

157 
	#INT32_MIN
 (-2147483647-1)

	)

158 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

160 
	#INT8_MAX
 (127)

	)

161 
	#INT16_MAX
 (32767)

	)

162 
	#INT32_MAX
 (2147483647)

	)

163 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

166 
	#UINT8_MAX
 (255)

	)

167 
	#UINT16_MAX
 (65535)

	)

168 
	#UINT32_MAX
 (4294967295U)

	)

169 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

173 
	#INT_LEAST8_MIN
 (-128)

	)

174 
	#INT_LEAST16_MIN
 (-32767-1)

	)

175 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

176 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

178 
	#INT_LEAST8_MAX
 (127)

	)

179 
	#INT_LEAST16_MAX
 (32767)

	)

180 
	#INT_LEAST32_MAX
 (2147483647)

	)

181 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

184 
	#UINT_LEAST8_MAX
 (255)

	)

185 
	#UINT_LEAST16_MAX
 (65535)

	)

186 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

187 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

191 
	#INT_FAST8_MIN
 (-128)

	)

192 #i‡
__WORDSIZE
 == 64

193 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

194 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

196 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

197 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

199 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

201 
	#INT_FAST8_MAX
 (127)

	)

202 #i‡
__WORDSIZE
 == 64

203 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

204 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

206 
	#INT_FAST16_MAX
 (2147483647)

	)

207 
	#INT_FAST32_MAX
 (2147483647)

	)

209 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINT_FAST8_MAX
 (255)

	)

213 #i‡
__WORDSIZE
 == 64

214 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

215 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

217 
	#UINT_FAST16_MAX
 (4294967295U)

	)

218 
	#UINT_FAST32_MAX
 (4294967295U)

	)

220 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

224 #i‡
__WORDSIZE
 == 64

225 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

226 
	#INTPTR_MAX
 (9223372036854775807L)

	)

227 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

229 
	#INTPTR_MIN
 (-2147483647-1)

	)

230 
	#INTPTR_MAX
 (2147483647)

	)

231 
	#UINTPTR_MAX
 (4294967295U)

	)

236 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

238 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

241 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

247 #i‡
__WORDSIZE
 == 64

248 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

249 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

251 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

252 
	#PTRDIFF_MAX
 (2147483647)

	)

256 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #i‡
__WORDSIZE
 == 64

261 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 #ifde‡
__WORDSIZE32_SIZE_ULONG


264 
	#SIZE_MAX
 (4294967295UL)

	)

266 
	#SIZE_MAX
 (4294967295U)

	)

271 #i‚de‡
WCHAR_MIN


273 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

274 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

278 
	#WINT_MIN
 (0u)

	)

279 
	#WINT_MAX
 (4294967295u)

	)

282 
	#INT8_C
(
c
Ë
	)
c

283 
	#INT16_C
(
c
Ë
	)
c

284 
	#INT32_C
(
c
Ë
	)
c

285 #i‡
__WORDSIZE
 == 64

286 
	#INT64_C
(
c
Ë¯## 
L


	)

288 
	#INT64_C
(
c
Ë¯## 
LL


	)

292 
	#UINT8_C
(
c
Ë
	)
c

293 
	#UINT16_C
(
c
Ë
	)
c

294 
	#UINT32_C
(
c
Ë¯## 
U


	)

295 #i‡
__WORDSIZE
 == 64

296 
	#UINT64_C
(
c
Ë¯## 
UL


	)

298 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

302 #i‡
__WORDSIZE
 == 64

303 
	#INTMAX_C
(
c
Ë¯## 
L


	)

304 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

306 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

307 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


25 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


26 
	#_STDIO_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	#__√ed_FILE


	)

37 
	#__√ed___FILE


	)

41 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_POSIX
 \

51 || 
deföed
 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

52 || 
deföed
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 
	#__FILE_deföed
 1

	)

58 #unde‡
__√ed_FILE


61 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


64 
_IO_FILE
 
	t__FILE
;

66 
	#____FILE_deföed
 1

	)

68 #unde‡
__√ed___FILE


71 #ifdef 
_STDIO_H


72 
	#_STDIO_USES_IOSTREAM


	)

74 
	~<libio.h
>

76 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


77 #ifde‡
__GNUC__


78 #i‚de‡
_VA_LIST_DEFINED


79 
_G_va_li°
 
	tva_li°
;

80 
	#_VA_LIST_DEFINED


	)

83 
	~<°d¨g.h
>

87 #ifde‡
__USE_XOPEN2K8


88 #i‚de‡
__off_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__off_t
 
	toff_t
;

92 
__off64_t
 
	toff_t
;

94 
	#__off_t_deföed


	)

96 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


97 
__off64_t
 
	toff64_t
;

98 
	#__off64_t_deföed


	)

101 #i‚de‡
__ssize_t_deföed


102 
__ssize_t
 
	tssize_t
;

103 
	#__ssize_t_deföed


	)

108 
__BEGIN_NAMESPACE_STD


109 #i‚de‡
__USE_FILE_OFFSET64


110 
_G_Âos_t
 
	tÂos_t
;

112 
_G_Âos64_t
 
	tÂos_t
;

114 
__END_NAMESPACE_STD


115 #ifde‡
__USE_LARGEFILE64


116 
_G_Âos64_t
 
	tÂos64_t
;

120 
	#_IOFBF
 0

	)

121 
	#_IOLBF
 1

	)

122 
	#_IONBF
 2

	)

126 #i‚de‡
BUFSIZ


127 
	#BUFSIZ
 
_IO_BUFSIZ


	)

133 #i‚de‡
EOF


134 
	#EOF
 (-1)

	)

140 
	#SEEK_SET
 0

	)

141 
	#SEEK_CUR
 1

	)

142 
	#SEEK_END
 2

	)

143 #ifde‡
__USE_GNU


144 
	#SEEK_DATA
 3

	)

145 
	#SEEK_HOLE
 4

	)

149 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


151 
	#P_tmpdú
 "/tmp"

	)

164 
	~<bôs/°dio_lim.h
>

168 
_IO_FILE
 *
°dö
;

169 
_IO_FILE
 *
°dout
;

170 
_IO_FILE
 *
°dîr
;

172 
	#°dö
 
°dö


	)

173 
	#°dout
 
°dout


	)

174 
	#°dîr
 
°dîr


	)

176 
__BEGIN_NAMESPACE_STD


178 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

180 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

181 
__END_NAMESPACE_STD


183 #ifde‡
__USE_ATFILE


185 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

186 c⁄° *
__√w
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


194 #i‚de‡
__USE_FILE_OFFSET64


195 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

197 #ifde‡
__REDIRECT


198 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

200 
	#tmpfûe
 
tmpfûe64


	)

204 #ifde‡
__USE_LARGEFILE64


205 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

209 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

210 
__END_NAMESPACE_STD


212 #ifde‡
__USE_MISC


215 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

219 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


227 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

228 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

232 
__BEGIN_NAMESPACE_STD


237 
	`f˛o£
 (
FILE
 *
__°ªam
);

242 
	`fÊush
 (
FILE
 *
__°ªam
);

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_MISC


252 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

255 #ifde‡
__USE_GNU


262 
	`f˛o£Æl
 ();

266 
__BEGIN_NAMESPACE_STD


267 #i‚de‡
__USE_FILE_OFFSET64


272 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

278 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

279 c⁄° *
__ª°ri˘
 
__modes
,

280 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

282 #ifde‡
__REDIRECT


283 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

284 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

285 
__wur
;

286 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

287 c⁄° *
__ª°ri˘
 
__modes
,

288 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

289 
__wur
;

291 
	#f›í
 
f›í64


	)

292 
	#‰e›í
 
‰e›í64


	)

295 
__END_NAMESPACE_STD


296 #ifde‡
__USE_LARGEFILE64


297 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

298 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

299 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

300 c⁄° *
__ª°ri˘
 
__modes
,

301 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

304 #ifdef 
__USE_POSIX


306 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

309 #ifdef 
__USE_GNU


312 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

313 c⁄° *
__ª°ri˘
 
__modes
,

314 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

317 #ifde‡
__USE_XOPEN2K8


319 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

320 
__THROW
 
__wur
;

325 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

329 
__BEGIN_NAMESPACE_STD


332 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

336 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

337 
__modes
, 
size_t
 
__n
Ë
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifdef 
__USE_MISC


343 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

344 
size_t
 
__size
Ë
__THROW
;

347 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

351 
__BEGIN_NAMESPACE_STD


356 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

357 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

362 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

364 
	$•rötf
 (*
__ª°ri˘
 
__s
,

365 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

371 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

372 
_G_va_li°
 
__¨g
);

377 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

379 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

380 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

381 
__END_NAMESPACE_STD


383 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


384 
__BEGIN_NAMESPACE_C99


386 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

387 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

388 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

390 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

391 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

392 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

393 
__END_NAMESPACE_C99


396 #ifde‡
__USE_GNU


399 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

400 
_G_va_li°
 
__¨g
)

401 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

402 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

403 c⁄° *
__ª°ri˘
 
__fmt
, ...)

404 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

405 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

406 c⁄° *
__ª°ri˘
 
__fmt
, ...)

407 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

410 #ifde‡
__USE_XOPEN2K8


412 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

413 
_G_va_li°
 
__¨g
)

414 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

415 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

420 
__BEGIN_NAMESPACE_STD


425 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

426 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

431 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

434 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

436 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

444 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

445 
__isoc99_fsˇnf
Ë
__wur
;

446 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_sˇnf
Ë
__wur
;

448 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

449 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

450 
__isoc99_ssˇnf
);

452 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

454 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

455 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

456 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

457 
	#fsˇnf
 
__isoc99_fsˇnf


	)

458 
	#sˇnf
 
__isoc99_sˇnf


	)

459 
	#ssˇnf
 
__isoc99_ssˇnf


	)

463 
__END_NAMESPACE_STD


465 #ifdef 
__USE_ISOC99


466 
__BEGIN_NAMESPACE_C99


471 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

472 
_G_va_li°
 
__¨g
)

473 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

479 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

480 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

483 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

484 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

485 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

487 #i‡!
deföed
 
__USE_GNU
 \

488 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

489 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

490 #ifde‡
__REDIRECT


494 
	`__REDIRECT
 (
vfsˇnf
,

495 (
FILE
 *
__ª°ri˘
 
__s
,

496 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

497 
__isoc99_vfsˇnf
)

498 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

499 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

500 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

501 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

502 
	`__REDIRECT_NTH
 (
vssˇnf
,

503 (c⁄° *
__ª°ri˘
 
__s
,

504 c⁄° *
__ª°ri˘
 
__f‹m©
,

505 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

506 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

508 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

509 c⁄° *
__ª°ri˘
 
__f‹m©
,

510 
_G_va_li°
 
__¨g
Ë
__wur
;

511 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

514 c⁄° *
__ª°ri˘
 
__f‹m©
,

515 
_G_va_li°
 
__¨g
Ë
__THROW
;

516 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

517 
	#vsˇnf
 
__isoc99_vsˇnf


	)

518 
	#vssˇnf
 
__isoc99_vssˇnf


	)

522 
__END_NAMESPACE_C99


526 
__BEGIN_NAMESPACE_STD


531 
	`fgëc
 (
FILE
 *
__°ªam
);

532 
	`gëc
 (
FILE
 *
__°ªam
);

538 
	`gëch¨
 ();

539 
__END_NAMESPACE_STD


543 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

545 #ifde‡
__USE_POSIX


550 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

551 
	`gëch¨_u∆ocked
 ();

554 #ifde‡
__USE_MISC


561 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

565 
__BEGIN_NAMESPACE_STD


573 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

574 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putch¨
 (
__c
);

581 
__END_NAMESPACE_STD


585 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

587 #ifde‡
__USE_MISC


594 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

597 #ifde‡
__USE_POSIX


602 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 
	`putch¨_u∆ocked
 (
__c
);

607 #i‡
deföed
 
__USE_MISC
 \

608 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

610 
	`gëw
 (
FILE
 *
__°ªam
);

613 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

617 
__BEGIN_NAMESPACE_STD


622 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

623 
__wur
;

625 #i‡!
deföed
 
__USE_ISOC11
 \

626 || (
deföed
 
__˝lu•lus
 && __cplusplus <= 201103L)

638 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

640 
__END_NAMESPACE_STD


642 #ifde‡
__USE_GNU


649 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

650 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

654 #ifdef 
__USE_XOPEN2K8


665 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

668 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

669 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

670 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

678 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

679 
size_t
 *
__ª°ri˘
 
__n
,

680 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

684 
__BEGIN_NAMESPACE_STD


689 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

695 
	`puts
 (c⁄° *
__s
);

702 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

709 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

710 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

715 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

716 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

717 
__END_NAMESPACE_STD


719 #ifde‡
__USE_GNU


726 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

727 
FILE
 *
__ª°ri˘
 
__°ªam
);

730 #ifde‡
__USE_MISC


737 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

738 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

740 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

744 
__BEGIN_NAMESPACE_STD


749 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

754 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

759 
	`ªwöd
 (
FILE
 *
__°ªam
);

760 
__END_NAMESPACE_STD


767 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


768 #i‚de‡
__USE_FILE_OFFSET64


773 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

778 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

780 #ifde‡
__REDIRECT


781 
	`__REDIRECT
 (
f£eko
,

782 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

783 
f£eko64
);

784 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

786 
	#f£eko
 
f£eko64


	)

787 
	#·ñlo
 
·ñlo64


	)

792 
__BEGIN_NAMESPACE_STD


793 #i‚de‡
__USE_FILE_OFFSET64


798 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

803 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

805 #ifde‡
__REDIRECT


806 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

807 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

808 
	`__REDIRECT
 (
f£ços
,

809 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

811 
	#fgëpos
 
fgëpos64


	)

812 
	#f£ços
 
f£ços64


	)

815 
__END_NAMESPACE_STD


817 #ifde‡
__USE_LARGEFILE64


818 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

819 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

820 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

821 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

824 
__BEGIN_NAMESPACE_STD


826 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

828 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

831 
__END_NAMESPACE_STD


833 #ifde‡
__USE_MISC


835 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

836 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

837 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

841 
__BEGIN_NAMESPACE_STD


846 
	`≥º‹
 (c⁄° *
__s
);

847 
__END_NAMESPACE_STD


853 
	~<bôs/sys_îæi°.h
>

856 #ifdef 
__USE_POSIX


858 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

861 #ifde‡
__USE_MISC


863 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

867 #ifde‡
__USE_POSIX2


872 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

878 
	`p˛o£
 (
FILE
 *
__°ªam
);

882 #ifdef 
__USE_POSIX


884 *
	$˘îmid
 (*
__s
Ë
__THROW
;

888 #ifde‡
__USE_XOPEN


890 *
	`cu£rid
 (*
__s
);

894 #ifdef 
__USE_GNU


895 
ob°ack
;

898 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

899 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

900 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

901 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

902 c⁄° *
__ª°ri˘
 
__f‹m©
,

903 
_G_va_li°
 
__¨gs
)

904 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

908 #ifde‡
__USE_POSIX


912 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

916 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

919 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

922 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


926 
	#__√ed_gë›t


	)

927 
	~<gë›t.h
>

932 #ifde‡
__USE_EXTERN_INLINES


933 
	~<bôs/°dio.h
>

935 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


936 
	~<bôs/°dio2.h
>

938 #ifde‡
__LDBL_COMPAT


939 
	~<bôs/°dio-ldbl.h
>

942 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

44 #ifde‡
__USE_MISC


49 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


50 
	#__WAIT_INT
(
°©us
) \

51 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

52 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

54 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

62 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


63 
	#__WAIT_STATUS
 *

	)

64 
	#__WAIT_STATUS_DEFN
 *

	)

69 
waô
 *
	m__u±r
;

70 *
	m__ùå
;

71 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

78 
	#__WAIT_STATUS
 *

	)

79 
	#__WAIT_STATUS_DEFN
 *

	)

84 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifde‡
__WIFCONTINUED


91 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

95 
__BEGIN_NAMESPACE_STD


99 
	mquŸ
;

100 
	mªm
;

101 } 
	tdiv_t
;

104 #i‚de‡
__ldiv_t_deföed


107 
	mquŸ
;

108 
	mªm
;

109 } 
	tldiv_t
;

110 
	#__ldiv_t_deföed
 1

	)

112 
	g__END_NAMESPACE_STD


114 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


115 
__BEGIN_NAMESPACE_C99


117 
__exãnsi⁄__
 struct

119 
	mquŸ
;

120 
	mªm
;

121 } 
	tŒdiv_t
;

122 
	#__Œdiv_t_deföed
 1

	)

123 
	g__END_NAMESPACE_C99


128 
	#RAND_MAX
 2147483647

	)

133 
	#EXIT_FAILURE
 1

	)

134 
	#EXIT_SUCCESS
 0

	)

138 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

139 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

142 
__BEGIN_NAMESPACE_STD


144 
	$©of
 (c⁄° *
__≈å
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

147 
	$©oi
 (c⁄° *
__≈å
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

150 
	$©ﬁ
 (c⁄° *
__≈å
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

152 
__END_NAMESPACE_STD


154 #ifde‡
__USE_ISOC99


155 
__BEGIN_NAMESPACE_C99


157 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

158 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

159 
__END_NAMESPACE_C99


162 
__BEGIN_NAMESPACE_STD


164 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

173 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

184 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

185 
__THROW
 
	`__n⁄nuŒ
 ((1));

187 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

190 
__END_NAMESPACE_STD


192 #ifde‡
__USE_MISC


194 
__exãnsi⁄__


195 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

196 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

197 
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
__exãnsi⁄__


200 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 #ifde‡
__USE_ISOC99


206 
__BEGIN_NAMESPACE_C99


208 
__exãnsi⁄__


209 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

210 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

211 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 
__exãnsi⁄__


214 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

215 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifde‡
__USE_GNU


235 
	~<xloˇÀ.h
>

239 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

240 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

241 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

243 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

248 
__exãnsi⁄__


249 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

251 
__loˇÀ_t
 
__loc
)

252 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

254 
__exãnsi⁄__


255 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__ba£
, 
__loˇÀ_t
 
__loc
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

260 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

261 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

264 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

266 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

268 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

269 **
__ª°ri˘
 
__íd±r
,

270 
__loˇÀ_t
 
__loc
)

271 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

275 #ifde‡
__USE_EXTERN_INLINES


276 
__BEGIN_NAMESPACE_STD


277 
__exã∫_ölöe
 

278 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

280  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

281 
	}
}

282 
__exã∫_ölöe
 

283 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

285  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

286 
	}
}

287 
	g__END_NAMESPACE_STD


289 #ifde‡
__USE_ISOC99


290 
__BEGIN_NAMESPACE_C99


291 
__exãnsi⁄__
 
__exã∫_ölöe
 

292 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

294  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

295 
	}
}

296 
	g__END_NAMESPACE_C99


301 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


305 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

308 
	$a64l
 (c⁄° *
__s
)

309 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

313 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


314 
	~<sys/ty≥s.h
>

321 
	$øndom
 (Ë
__THROW
;

324 
	$§™dom
 (
__£ed
Ë
__THROW
;

330 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

331 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

335 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_MISC


343 
	søndom_d©a


345 
öt32_t
 *
Âå
;

346 
öt32_t
 *
Ωå
;

347 
öt32_t
 *
°©e
;

348 
ønd_ty≥
;

349 
ønd_deg
;

350 
ønd_£p
;

351 
öt32_t
 *
íd_±r
;

354 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

355 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

357 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

361 
size_t
 
__°©ñí
,

362 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

363 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

365 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

366 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

367 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

372 
__BEGIN_NAMESPACE_STD


374 
	$ønd
 (Ë
__THROW
;

376 
	$§™d
 (
__£ed
Ë
__THROW
;

377 
__END_NAMESPACE_STD


379 #ifde‡
__USE_POSIX


381 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

385 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


389 
	$dønd48
 (Ë
__THROW
;

390 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 
	$Ã™d48
 (Ë
__THROW
;

394 
	$ƒ™d48
 (
__xsubi
[3])

395 
__THROW
 
	`__n⁄nuŒ
 ((1));

398 
	$mønd48
 (Ë
__THROW
;

399 
	$jønd48
 (
__xsubi
[3])

400 
__THROW
 
	`__n⁄nuŒ
 ((1));

403 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

404 *
	$£ed48
 (
__£ed16v
[3])

405 
__THROW
 
	`__n⁄nuŒ
 ((1));

406 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

408 #ifde‡
__USE_MISC


412 
	sdønd48_d©a


414 
__x
[3];

415 
__ﬁd_x
[3];

416 
__c
;

417 
__öô
;

418 
__exãnsi⁄__
 
__a
;

423 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

424 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

425 
	$î™d48_r
 (
__xsubi
[3],

426 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

427 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

431 *
__ª°ri˘
 
__ªsu…
)

432 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

433 
	$ƒ™d48_r
 (
__xsubi
[3],

434 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

435 *
__ª°ri˘
 
__ªsu…
)

436 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

439 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

442 
	$jønd48_r
 (
__xsubi
[3],

443 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

444 *
__ª°ri˘
 
__ªsu…
)

445 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

448 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

449 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$£ed48_r
 (
__£ed16v
[3],

452 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$lc⁄g48_r
 (
__∑øm
[7],

455 
dønd48_d©a
 *
__buf„r
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

462 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


463 
	#__mÆloc_™d_ˇŒoc_deföed


	)

464 
__BEGIN_NAMESPACE_STD


466 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

468 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

469 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

470 
__END_NAMESPACE_STD


473 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


474 
__BEGIN_NAMESPACE_STD


480 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

481 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

483 
	$‰ì
 (*
__±r
Ë
__THROW
;

484 
__END_NAMESPACE_STD


486 #ifdef 
__USE_MISC


488 
	$c‰ì
 (*
__±r
Ë
__THROW
;

491 #ifde‡
__USE_MISC


492 
	~<Æloˇ.h
>

495 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

496 || 
deföed
 
__USE_MISC


498 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

501 #ifde‡
__USE_XOPEN2K


503 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

504 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

507 #ifde‡
__USE_ISOC11


509 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

510 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

513 
__BEGIN_NAMESPACE_STD


515 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

519 
	$©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

521 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


523 #ifde‡
__˝lu•lus


524 "C++" 
	$©_quick_exô
 ((*
__func
) ())

525 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

527 
	$©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

530 
__END_NAMESPACE_STD


532 #ifdef 
__USE_MISC


535 
	$⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

536 
__THROW
 
	`__n⁄nuŒ
 ((1));

539 
__BEGIN_NAMESPACE_STD


543 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

545 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


549 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

551 
__END_NAMESPACE_STD


553 #ifde‡
__USE_ISOC99


554 
__BEGIN_NAMESPACE_C99


557 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

558 
__END_NAMESPACE_C99


562 
__BEGIN_NAMESPACE_STD


564 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

565 
__END_NAMESPACE_STD


567 #ifde‡
__USE_GNU


570 *
	$£cuª_gëív
 (c⁄° *
__«me
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

574 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


578 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

581 #ifde‡
__USE_XOPEN2K


584 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

585 
__THROW
 
	`__n⁄nuŒ
 ((2));

588 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #ifdef 
__USE_MISC


595 
	$˛óªnv
 (Ë
__THROW
;

599 #i‡
deföed
 
__USE_MISC
 \

600 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

609 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


618 #i‚de‡
__USE_FILE_OFFSET64


619 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

621 #ifde‡
__REDIRECT


622 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

623 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

625 
	#mk°emp
 
mk°emp64


	)

628 #ifde‡
__USE_LARGEFILE64


629 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

633 #ifde‡
__USE_MISC


640 #i‚de‡
__USE_FILE_OFFSET64


641 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

643 #ifde‡
__REDIRECT


644 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

645 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

647 
	#mk°emps
 
mk°emps64


	)

650 #ifde‡
__USE_LARGEFILE64


651 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

652 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

656 #ifde‡
__USE_XOPEN2K8


662 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

665 #ifde‡
__USE_GNU


672 #i‚de‡
__USE_FILE_OFFSET64


673 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

675 #ifde‡
__REDIRECT


676 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

677 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

679 
	#mko°emp
 
mko°emp64


	)

682 #ifde‡
__USE_LARGEFILE64


683 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

692 #i‚de‡
__USE_FILE_OFFSET64


693 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

694 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

696 #ifde‡
__REDIRECT


697 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

698 
__Êags
), 
mko°emps64
)

699 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

701 
	#mko°emps
 
mko°emps64


	)

704 #ifde‡
__USE_LARGEFILE64


705 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

706 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

711 
__BEGIN_NAMESPACE_STD


716 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

717 
__END_NAMESPACE_STD


720 #ifdef 
__USE_GNU


723 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

724 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

727 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


733 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

734 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

739 #i‚de‡
__COMPAR_FN_T


740 
	#__COMPAR_FN_T


	)

741 (*
	t__com∑r_‚_t
) (const *, const *);

743 #ifdef 
__USE_GNU


744 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

747 #ifde‡
__USE_GNU


748 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

751 
__BEGIN_NAMESPACE_STD


754 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

755 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

756 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

758 #ifde‡
__USE_EXTERN_INLINES


759 
	~<bôs/°dlib-b£¨ch.h
>

764 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

766 #ifde‡
__USE_GNU


767 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

768 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

769 
	`__n⁄nuŒ
 ((1, 4));

774 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

775 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

776 
__END_NAMESPACE_STD


778 #ifde‡
__USE_ISOC99


779 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

780 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

784 
__BEGIN_NAMESPACE_STD


788 
div_t
 
	$div
 (
__numî
, 
__díom
)

789 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

790 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

791 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

792 
__END_NAMESPACE_STD


794 #ifde‡
__USE_ISOC99


795 
__BEGIN_NAMESPACE_C99


796 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

797 
__díom
)

798 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

799 
__END_NAMESPACE_C99


803 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

804 || 
deföed
 
__USE_MISC


811 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

812 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

817 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

818 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

823 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

824 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

827 #ifde‡
__USE_MISC


829 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

833 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

834 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

835 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

836 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

841 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

844 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

845 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

846 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

848 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

849 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

850 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

851 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

852 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

853 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

854 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

855 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

859 
__BEGIN_NAMESPACE_STD


862 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

865 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

866 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

869 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

873 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

874 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

876 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

877 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

878 
__THROW
;

879 
__END_NAMESPACE_STD


882 #ifde‡
__USE_MISC


887 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

891 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


898 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

899 *c⁄° *
__ª°ri˘
 
__tokís
,

900 **
__ª°ri˘
 
__vÆuï
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

905 #ifde‡
__USE_XOPEN


907 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

913 #ifde‡
__USE_XOPEN2KXSI


915 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

918 #ifde‡
__USE_XOPEN


923 
	$gø¡±
 (
__fd
Ë
__THROW
;

927 
	$u∆ock±
 (
__fd
Ë
__THROW
;

932 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

935 #ifde‡
__USE_GNU


939 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

940 
__THROW
 
	`__n⁄nuŒ
 ((2));

943 
	`gë±
 ();

946 #ifde‡
__USE_MISC


950 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

951 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 
	~<bôs/°dlib-Êﬂt.h
>

957 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


958 
	~<bôs/°dlib.h
>

960 #ifde‡
__LDBL_COMPAT


961 
	~<bôs/°dlib-ldbl.h
>

965 #unde‡
__√ed_mÆloc_™d_ˇŒoc


967 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

35 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

36 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

40 
__BEGIN_NAMESPACE_STD


42 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

43 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

46 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

47 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

48 
__END_NAMESPACE_STD


53 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


54 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

55 
__c
, 
size_t
 
__n
)

56 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

60 
__BEGIN_NAMESPACE_STD


62 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

65 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

66 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

69 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


72 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

73 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

74 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

75 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 #ifde‡
__OPTIMIZE__


78 
__exã∫_Æways_ölöe
 *

79 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


81  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

84 
__exã∫_Æways_ölöe
 const *

85 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


87  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

90 
	}
}

92 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

93 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

95 
__END_NAMESPACE_STD


97 #ifde‡
__USE_GNU


100 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


101 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

102 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

103 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

104 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

107 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


112 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

113 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

123 
__BEGIN_NAMESPACE_STD


125 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

128 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

129 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

133 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

137 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

141 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

151 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
 
	`__n⁄nuŒ
 ((2));

153 
__END_NAMESPACE_STD


155 #ifde‡
__USE_XOPEN2K8


159 
	~<xloˇÀ.h
>

162 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

163 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

165 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

166 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

169 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


171 *
	$°rdup
 (c⁄° *
__s
)

172 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

178 #i‡
deföed
 
__USE_XOPEN2K8


179 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

180 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

183 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


185 
	#°rdu∑
(
s
) \

186 (
__exãnsi⁄__
 \

188 c⁄° *
__ﬁd
 = (
s
); \

189 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

190 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

191 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

192 
	}
}))

	)

195 
	#°∫du∑
(
s
, 
n
) \

196 (
__exãnsi⁄__
 \

198 c⁄° *
__ﬁd
 = (
s
); \

199 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

200 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

201 
__√w
[
__Àn
] = '\0'; \

202 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

203 }))

	)

206 
	g__BEGIN_NAMESPACE_STD


208 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


211 *
°rchr
 (*
__s
, 
__c
)

212 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

213 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

214 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

216 #ifde‡
__OPTIMIZE__


217 
__exã∫_Æways_ölöe
 *

218 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


220  
__buûtö_°rchr
 (
__s
, 
__c
);

223 
__exã∫_Æways_ölöe
 const *

224 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


226  
__buûtö_°rchr
 (
__s
, 
__c
);

231 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

232 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

235 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


238 *
	`°ºchr
 (*
__s
, 
__c
)

239 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

240 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

241 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

243 #ifde‡
__OPTIMIZE__


244 
__exã∫_Æways_ölöe
 *

245 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


247  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

250 
__exã∫_Æways_ölöe
 const *

251 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


253  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

256 
	}
}

258 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

259 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

261 
__END_NAMESPACE_STD


263 #ifde‡
__USE_GNU


266 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


267 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

268 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

269 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

270 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

272 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

273 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

277 
__BEGIN_NAMESPACE_STD


280 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

281 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

284 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

287 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


290 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

291 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

292 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

293 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

295 #ifde‡
__OPTIMIZE__


296 
__exã∫_Æways_ölöe
 *

297 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


299  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

302 
__exã∫_Æways_ölöe
 const *

303 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


305  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

308 
	}
}

310 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

311 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

314 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


317 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

318 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

319 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

320 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

322 #ifde‡
__OPTIMIZE__


323 
__exã∫_Æways_ölöe
 *

324 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


326  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

329 
__exã∫_Æways_ölöe
 const *

330 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


332  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

335 
	}
}

337 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

338 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

343 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

344 
__THROW
 
	`__n⁄nuŒ
 ((2));

345 
__END_NAMESPACE_STD


349 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

350 c⁄° *
__ª°ri˘
 
__dñim
,

351 **
__ª°ri˘
 
__ßve_±r
)

352 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

353 #ifde‡
__USE_POSIX


354 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

355 **
__ª°ri˘
 
__ßve_±r
)

356 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

359 #ifde‡
__USE_GNU


361 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


362 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

363 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

364 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

365 c⁄° *
__√edÀ
)

366 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

368 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

369 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 #ifde‡
__USE_GNU


377 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

378 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

379 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

383 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

384 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

385 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

386 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

387 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

388 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

392 
__BEGIN_NAMESPACE_STD


394 
size_t
 
	$°æí
 (c⁄° *
__s
)

395 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

396 
__END_NAMESPACE_STD


398 #ifdef 
__USE_XOPEN2K8


401 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

402 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

406 
__BEGIN_NAMESPACE_STD


408 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

409 
__END_NAMESPACE_STD


410 #ifde‡
__USE_XOPEN2K


418 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


421 #ifde‡
__REDIRECT_NTH


422 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

423 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

424 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

426 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

427 
__THROW
 
	`__n⁄nuŒ
 ((2));

428 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

433 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

434 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

438 #ifde‡
__USE_XOPEN2K8


440 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

446 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

448 #ifde‡
__USE_MISC


450 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

451 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

457 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

458 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

461 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


464 *
	`ödex
 (*
__s
, 
__c
)

465 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

466 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

467 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

469 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


470 
__exã∫_Æways_ölöe
 *

471 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


473  
	`__buûtö_ödex
 (
__s
, 
__c
);

476 
__exã∫_Æways_ölöe
 const *

477 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


479  
	`__buûtö_ödex
 (
__s
, 
__c
);

482 
	}
}

484 *
	$ödex
 (c⁄° *
__s
, 
__c
)

485 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

489 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


492 *
	`rödex
 (*
__s
, 
__c
)

493 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

495 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

497 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


498 
__exã∫_Æways_ölöe
 *

499 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


501  
	`__buûtö_rödex
 (
__s
, 
__c
);

504 
__exã∫_Æways_ölöe
 const *

505 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


507  
	`__buûtö_rödex
 (
__s
, 
__c
);

510 
	}
}

512 *
	$rödex
 (c⁄° *
__s
, 
__c
)

513 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

518 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

522 #ifdef 
__USE_GNU


523 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

524 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

525 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

530 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

533 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

534 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

537 #ifdef 
__USE_GNU


540 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

541 
__loˇÀ_t
 
__loc
)

542 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

544 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

545 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

546 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

549 #ifdef 
__USE_MISC


552 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

553 c⁄° *
__ª°ri˘
 
__dñim
)

554 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifdef 
__USE_XOPEN2K8


559 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

562 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

563 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

565 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

570 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

572 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

573 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

577 #ifdef 
__USE_GNU


579 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

580 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

583 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

586 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

588 #i‚de‡
ba£«me


593 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


594 "C++" *
	$ba£«me
 (*
__fûíame
)

595 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

596 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

597 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

599 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

605 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

606 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

607 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


627 
	~<bôs/°rög.h
>

630 
	~<bôs/°rög2.h
>

633 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


635 
	~<bôs/°rög3.h
>

639 #i‡
deföed
 
__USE_GNU
 && deföed 
__OPTIMIZE__
 \

640 && 
deföed
 
__exã∫_Æways_ölöe
 && 
	$__GNUC_PREREQ
 (3,2)

641 #i‡!
deföed
 
_FORCE_INLINES
 && !deföed 
_HAVE_STRING_ARCH_memp˝y


643 #unde‡
memp˝y


644 #unde‡
__memp˝y


645 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y_ölöe
 (de°, src,Ç)

	)

646 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y_ölöe
 (de°, src,Ç)

	)

648 
__exã∫_Æways_ölöe
 *

649 
	$__memp˝y_ölöe
 (*
__ª°ri˘
 
__de°
,

650 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

652  (*Ë
	`mem˝y
 (
__de°
, 
__§c
, 
__n
) + __n;

653 
	}
}

658 
	g__END_DECLS


	@/usr/include/sys/auxv.h

19 #i‚de‡
_SYS_AUXV_H


20 
	#_SYS_AUXV_H
 1

	)

22 
	~<ñf.h
>

23 
	~<bôs/auxv.h
>

24 
	~<sys/cdefs.h
>

25 
	~<bôs/hwˇp.h
>

27 
__BEGIN_DECLS


32 
	$gëauxvÆ
 (
__ty≥
)

33 
__THROW
;

35 
__END_DECLS


	@/usr/include/sys/mman.h

19 #i‚def 
_SYS_MMAN_H


20 
	#_SYS_MMAN_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<bôs/ty≥s.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 #i‚de‡
__off_t_deföed


28 #i‚de‡
__USE_FILE_OFFSET64


29 
__off_t
 
	toff_t
;

31 
__off64_t
 
	toff_t
;

33 
	#__off_t_deföed


	)

36 #i‚de‡
__mode_t_deföed


37 
__mode_t
 
	tmode_t
;

38 
	#__mode_t_deföed


	)

41 
	~<bôs/mm™.h
>

44 
	#MAP_FAILED
 ((*Ë-1)

	)

46 
	g__BEGIN_DECLS


56 #i‚de‡
__USE_FILE_OFFSET64


57 *
	$mm≠
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

58 
__Êags
, 
__fd
, 
__off_t
 
__off£t
Ë
__THROW
;

60 #ifde‡
__REDIRECT_NTH


61 * 
	`__REDIRECT_NTH
 (
mm≠
,

62 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

63 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
),

64 
mm≠64
);

66 
	#mm≠
 
mm≠64


	)

69 #ifde‡
__USE_LARGEFILE64


70 *
	$mm≠64
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

71 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
Ë
__THROW
;

76 
	$munm≠
 (*
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

81 
	$m¥Ÿe˘
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
Ë
__THROW
;

89 
	`msync
 (*
__addr
, 
size_t
 
__Àn
, 
__Êags
);

91 #ifde‡
__USE_MISC


94 
	$madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

96 #ifde‡
__USE_XOPEN2K


98 
	$posix_madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

103 
	$mlock
 (c⁄° *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

106 
	$mu∆ock
 (c⁄° *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

111 
	$mlockÆl
 (
__Êags
Ë
__THROW
;

115 
	$mu∆ockÆl
 (Ë
__THROW
;

117 #ifde‡
__USE_MISC


123 
	$möc‹e
 (*
__°¨t
, 
size_t
 
__Àn
, *
__vec
)

124 
__THROW
;

127 #ifde‡
__USE_GNU


133 *
	$mªm≠
 (*
__addr
, 
size_t
 
__ﬁd_Àn
, size_à
__√w_Àn
,

134 
__Êags
, ...Ë
__THROW
;

138 
	$ªm≠_fûe_∑ges
 (*
__°¨t
, 
size_t
 
__size
, 
__¥Ÿ
,

139 
size_t
 
__pgoff
, 
__Êags
Ë
__THROW
;

144 
	`shm_›í
 (c⁄° *
__«me
, 
__oÊag
, 
mode_t
 
__mode
);

147 
	`shm_u∆ök
 (c⁄° *
__«me
);

149 
__END_DECLS


	@/usr/include/sys/prctl.h

18 #i‚de‡
_SYS_PRCTL_H


19 
	#_SYS_PRCTL_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<löux/¥˘l.h
>

24 
__BEGIN_DECLS


27 
	$¥˘l
 (
__›ti⁄
, ...Ë
__THROW
;

29 
__END_DECLS


	@/usr/include/sys/types.h

22 #i‚def 
_SYS_TYPES_H


23 
	#_SYS_TYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifdef 
__USE_MISC


32 #i‚de‡
__u_ch¨_deföed


33 
__u_ch¨
 
	tu_ch¨
;

34 
__u_sh‹t
 
	tu_sh‹t
;

35 
__u_öt
 
	tu_öt
;

36 
__u_l⁄g
 
	tu_l⁄g
;

37 
__quad_t
 
	tquad_t
;

38 
__u_quad_t
 
	tu_quad_t
;

39 
__fsid_t
 
	tfsid_t
;

40 
	#__u_ch¨_deföed


	)

44 
__loff_t
 
	tloff_t
;

46 #i‚de‡
__öo_t_deföed


47 #i‚de‡
__USE_FILE_OFFSET64


48 
__öo_t
 
	töo_t
;

50 
__öo64_t
 
	töo_t
;

52 
	#__öo_t_deföed


	)

54 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


55 
__öo64_t
 
	töo64_t
;

56 
	#__öo64_t_deföed


	)

59 #i‚de‡
__dev_t_deföed


60 
__dev_t
 
	tdev_t
;

61 
	#__dev_t_deföed


	)

64 #i‚de‡
__gid_t_deföed


65 
__gid_t
 
	tgid_t
;

66 
	#__gid_t_deföed


	)

69 #i‚de‡
__mode_t_deföed


70 
__mode_t
 
	tmode_t
;

71 
	#__mode_t_deföed


	)

74 #i‚de‡
__∆ök_t_deföed


75 
__∆ök_t
 
	t∆ök_t
;

76 
	#__∆ök_t_deföed


	)

79 #i‚de‡
__uid_t_deföed


80 
__uid_t
 
	tuid_t
;

81 
	#__uid_t_deföed


	)

84 #i‚de‡
__off_t_deföed


85 #i‚de‡
__USE_FILE_OFFSET64


86 
__off_t
 
	toff_t
;

88 
__off64_t
 
	toff_t
;

90 
	#__off_t_deföed


	)

92 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


93 
__off64_t
 
	toff64_t
;

94 
	#__off64_t_deföed


	)

97 #i‚de‡
__pid_t_deföed


98 
__pid_t
 
	tpid_t
;

99 
	#__pid_t_deföed


	)

102 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

103 && !
deföed
 
__id_t_deföed


104 
__id_t
 
	tid_t
;

105 
	#__id_t_deföed


	)

108 #i‚de‡
__ssize_t_deföed


109 
__ssize_t
 
	tssize_t
;

110 
	#__ssize_t_deföed


	)

113 #ifdef 
__USE_MISC


114 #i‚de‡
__daddr_t_deföed


115 
__daddr_t
 
	tdaddr_t
;

116 
__ˇddr_t
 
	tˇddr_t
;

117 
	#__daddr_t_deföed


	)

121 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


122 
__key_t
 
	tkey_t
;

123 
	#__key_t_deföed


	)

126 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


127 
	#__√ed_˛ock_t


	)

129 
	#__√ed_time_t


	)

130 
	#__√ed_timî_t


	)

131 
	#__√ed_˛ockid_t


	)

132 
	~<time.h
>

134 #ifde‡
__USE_XOPEN


135 #i‚de‡
__u£c⁄ds_t_deföed


136 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

137 
	#__u£c⁄ds_t_deföed


	)

139 #i‚de‡
__su£c⁄ds_t_deföed


140 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

141 
	#__su£c⁄ds_t_deföed


	)

145 
	#__√ed_size_t


	)

146 
	~<°ddef.h
>

148 #ifde‡
__USE_MISC


150 
	tul⁄g
;

151 
	tush‹t
;

152 
	tuöt
;

157 #i‡!
__GNUC_PREREQ
 (2, 7)

160 #i‚de‡
__öt8_t_deföed


161 
	#__öt8_t_deföed


	)

162 
	töt8_t
;

163 
	töt16_t
;

164 
	töt32_t
;

165 #i‡
__WORDSIZE
 == 64

166 
	töt64_t
;

168 
__exãnsi⁄__
 
	töt64_t
;

173 
	tu_öt8_t
;

174 
	tu_öt16_t
;

175 
	tu_öt32_t
;

176 #i‡
__WORDSIZE
 == 64

177 
	tu_öt64_t
;

179 
__exãnsi⁄__
 
	tu_öt64_t
;

182 
	tªgi°î_t
;

187 
	#__ötN_t
(
N
, 
MODE
) \

188 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

189 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

190 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

192 #i‚de‡
	t__öt8_t_deföed


193 
	t__öt8_t_deföed


	)

194 
	t__ötN_t
 (8, 
	t__QI__
);

195 
__ötN_t
 (16, 
__HI__
);

196 
__ötN_t
 (32, 
__SI__
);

197 
__ötN_t
 (64, 
__DI__
);

200 
__u_ötN_t
 (8, 
__QI__
);

201 
__u_ötN_t
 (16, 
__HI__
);

202 
__u_ötN_t
 (32, 
__SI__
);

203 
__u_ötN_t
 (64, 
__DI__
);

205 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

211 
	#__BIT_TYPES_DEFINED__
 1

	)

214 #ifdef 
__USE_MISC


216 
	~<ídün.h
>

219 
	~<sys/£À˘.h
>

222 
	~<sys/sysma¸os.h
>

226 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

227 && !
deföed
 
__blksize_t_deföed


228 
__blksize_t
 
	tblksize_t
;

229 
	#__blksize_t_deföed


	)

233 #i‚de‡
__USE_FILE_OFFSET64


234 #i‚de‡
__blk˙t_t_deföed


235 
__blk˙t_t
 
	tblk˙t_t
;

236 
	#__blk˙t_t_deföed


	)

238 #i‚de‡
__fsblk˙t_t_deföed


239 
__fsblk˙t_t
 
	tfsblk˙t_t
;

240 
	#__fsblk˙t_t_deföed


	)

242 #i‚de‡
__fsfû˙t_t_deföed


243 
__fsfû˙t_t
 
	tfsfû˙t_t
;

244 
	#__fsfû˙t_t_deföed


	)

247 #i‚de‡
__blk˙t_t_deföed


248 
__blk˙t64_t
 
	tblk˙t_t
;

249 
	#__blk˙t_t_deföed


	)

251 #i‚de‡
__fsblk˙t_t_deföed


252 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

253 
	#__fsblk˙t_t_deföed


	)

255 #i‚de‡
__fsfû˙t_t_deföed


256 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

257 
	#__fsfû˙t_t_deföed


	)

261 #ifde‡
__USE_LARGEFILE64


262 
__blk˙t64_t
 
	tblk˙t64_t
;

263 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

264 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

269 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


270 
	~<bôs/±hªadty≥s.h
>

273 
	g__END_DECLS


	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #ifde‡
__USE_POSIX


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_MISC


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #ifde‡
__USE_POSIX


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_POSIX


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_MISC


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

70 
	#_POSIX2_C_VERSION
 
__POSIX2_THIS_VERSION


	)

74 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

78 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

82 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

86 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

89 #ifde‡
__USE_XOPEN2K8


90 
	#_XOPEN_VERSION
 700

	)

91 #ñi‡
deföed
 
__USE_XOPEN2K


92 
	#_XOPEN_VERSION
 600

	)

93 #ñi‡
deföed
 
__USE_UNIX98


94 
	#_XOPEN_VERSION
 500

	)

96 
	#_XOPEN_VERSION
 4

	)

100 
	#_XOPEN_XCU_VERSION
 4

	)

103 
	#_XOPEN_XPG2
 1

	)

104 
	#_XOPEN_XPG3
 1

	)

105 
	#_XOPEN_XPG4
 1

	)

108 
	#_XOPEN_UNIX
 1

	)

111 
	#_XOPEN_CRYPT
 1

	)

115 
	#_XOPEN_ENH_I18N
 1

	)

118 
	#_XOPEN_LEGACY
 1

	)

205 
	~<bôs/posix_›t.h
>

208 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


209 
	~<bôs/ívú⁄míts.h
>

213 
	#STDIN_FILENO
 0

	)

214 
	#STDOUT_FILENO
 1

	)

215 
	#STDERR_FILENO
 2

	)

220 
	~<bôs/ty≥s.h
>

222 #i‚def 
__ssize_t_deföed


223 
__ssize_t
 
	tssize_t
;

224 
	#__ssize_t_deföed


	)

227 
	#__√ed_size_t


	)

228 
	#__√ed_NULL


	)

229 
	~<°ddef.h
>

231 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


234 #i‚de‡
__gid_t_deföed


235 
__gid_t
 
	tgid_t
;

236 
	#__gid_t_deföed


	)

239 #i‚de‡
__uid_t_deföed


240 
__uid_t
 
	tuid_t
;

241 
	#__uid_t_deföed


	)

244 #i‚de‡
__off_t_deföed


245 #i‚de‡
__USE_FILE_OFFSET64


246 
__off_t
 
	toff_t
;

248 
__off64_t
 
	toff_t
;

250 
	#__off_t_deföed


	)

252 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


253 
__off64_t
 
	toff64_t
;

254 
	#__off64_t_deföed


	)

257 #i‚de‡
__u£c⁄ds_t_deföed


258 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

259 
	#__u£c⁄ds_t_deföed


	)

262 #i‚de‡
__pid_t_deföed


263 
__pid_t
 
	tpid_t
;

264 
	#__pid_t_deföed


	)

268 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


269 #i‚de‡
__öçå_t_deföed


270 
__öçå_t
 
	töçå_t
;

271 
	#__öçå_t_deföed


	)

275 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


276 #i‚de‡
__sockÀn_t_deföed


277 
__sockÀn_t
 
	tsockÀn_t
;

278 
	#__sockÀn_t_deföed


	)

284 
	#R_OK
 4

	)

285 
	#W_OK
 2

	)

286 
	#X_OK
 1

	)

287 
	#F_OK
 0

	)

290 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

292 #ifde‡
__USE_GNU


295 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

296 
__THROW
 
	`__n⁄nuŒ
 ((1));

299 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

300 
__THROW
 
	`__n⁄nuŒ
 ((1));

303 #ifde‡
__USE_ATFILE


307 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

308 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

313 #i‚def 
_STDIO_H


314 
	#SEEK_SET
 0

	)

315 
	#SEEK_CUR
 1

	)

316 
	#SEEK_END
 2

	)

317 #ifde‡
__USE_GNU


318 
	#SEEK_DATA
 3

	)

319 
	#SEEK_HOLE
 4

	)

323 #i‡
deföed
 
__USE_MISC
 && !deföed 
L_SET


325 
	#L_SET
 
SEEK_SET


	)

326 
	#L_INCR
 
SEEK_CUR


	)

327 
	#L_XTND
 
SEEK_END


	)

336 #i‚de‡
__USE_FILE_OFFSET64


337 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

339 #ifde‡
__REDIRECT_NTH


340 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

341 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

342 
l£ek64
);

344 
	#l£ek
 
l£ek64


	)

347 #ifde‡
__USE_LARGEFILE64


348 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

349 
__THROW
;

356 
	`˛o£
 (
__fd
);

363 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

369 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

371 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


372 #i‚de‡
__USE_FILE_OFFSET64


379 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

380 
__off_t
 
__off£t
Ë
__wur
;

387 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

388 
__off_t
 
__off£t
Ë
__wur
;

390 #ifde‡
__REDIRECT


391 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

392 
__off64_t
 
__off£t
),

393 
¥ód64
Ë
__wur
;

394 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

395 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

396 
pwrôe64
Ë
__wur
;

398 
	#¥ód
 
¥ód64


	)

399 
	#pwrôe
 
pwrôe64


	)

403 #ifde‡
__USE_LARGEFILE64


407 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

408 
__off64_t
 
__off£t
Ë
__wur
;

411 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

412 
__off64_t
 
__off£t
Ë
__wur
;

420 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

422 #ifde‡
__USE_GNU


425 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

435 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

447 
	`¶ìp
 (
__£c⁄ds
);

449 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

450 || 
deföed
 
__USE_MISC


455 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

456 
__THROW
;

463 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

472 
	`∑u£
 ();

476 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

477 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

479 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


481 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

486 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

487 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

491 #ifde‡
__USE_ATFILE


494 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

495 
__gid_t
 
__group
, 
__Êag
)

496 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

500 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

502 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


504 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

514 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

516 #ifdef 
__USE_GNU


520 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

523 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

524 || 
deföed
 
__USE_MISC


528 *
	$gëwd
 (*
__buf
)

529 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

534 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

537 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

539 #ifde‡
__USE_GNU


542 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

546 **
__ívú⁄
;

547 #ifde‡
__USE_GNU


548 **
ívú⁄
;

554 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

555 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifde‡
__USE_XOPEN2K8


560 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

561 
__THROW
 
	`__n⁄nuŒ
 ((2));

566 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

567 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

577 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

581 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

582 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

588 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

590 #ifde‡
__USE_GNU


593 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

594 *c⁄° 
__ívp
[])

595 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

599 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


601 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

606 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

612 
	~<bôs/c⁄‚ame.h
>

615 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

616 
__THROW
 
	`__n⁄nuŒ
 ((1));

619 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

622 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

624 #ifdef 
__USE_POSIX2


626 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

631 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

637 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

640 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

641 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


642 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

649 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

651 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


663 
	$£çgΩ
 (Ë
__THROW
;

670 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

672 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


674 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

678 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

681 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

687 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

692 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

694 #ifdef 
__USE_GNU


696 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

703 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

705 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


708 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

711 #ifde‡
__USE_XOPEN2K


713 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

720 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

722 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


725 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

728 #ifde‡
__USE_XOPEN2K


730 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

733 #ifde‡
__USE_GNU


736 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

737 
__THROW
;

741 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

742 
__THROW
;

746 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

747 
__THROW
 
__wur
;

751 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

752 
__THROW
 
__wur
;

759 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

761 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

762 || 
deföed
 
__USE_MISC


767 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

773 *
	$ây«me
 (
__fd
Ë
__THROW
;

777 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

778 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

782 
	$ißây
 (
__fd
Ë
__THROW
;

784 #i‡
deföed
 
__USE_MISC
 \

785 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

788 
	$ây¶Ÿ
 (Ë
__THROW
;

793 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

794 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

796 #ifde‡
__USE_ATFILE


799 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

800 c⁄° *
__to
, 
__Êags
)

801 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

804 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


806 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

807 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

812 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

813 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

814 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

817 #ifde‡
__USE_ATFILE


819 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

820 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

823 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

824 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

825 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

829 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

831 #ifde‡
__USE_ATFILE


833 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

834 
__THROW
 
	`__n⁄nuŒ
 ((2));

838 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

842 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

845 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

852 *
	`gëlogö
 ();

853 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


860 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

863 #ifdef 
__USE_MISC


865 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

869 #ifdef 
__USE_POSIX2


873 
	#__√ed_gë›t


	)

874 
	~<gë›t.h
>

878 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


882 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

886 #i‡
deföed
 
__USE_MISC


889 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

890 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

894 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

900 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

902 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

903 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

909 
	$vh™gup
 (Ë
__THROW
;

912 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

920 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

921 
size_t
 
__off£t
, 
__sˇÀ
)

922 
__THROW
 
	`__n⁄nuŒ
 ((1));

928 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

932 *
	$gëu£rshñl
 (Ë
__THROW
;

933 
	$ídu£rshñl
 (Ë
__THROW
;

934 
	$£tu£rshñl
 (Ë
__THROW
;

940 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

944 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

947 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

951 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

959 
	`fsync
 (
__fd
);

962 #ifde‡
__USE_GNU


965 
	$syncfs
 (
__fd
Ë
__THROW
;

969 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


972 
	`gëho°id
 ();

975 
	$sync
 (Ë
__THROW
;

978 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K


981 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

986 
	$gëdèbÀsize
 (Ë
__THROW
;

992 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


995 #i‚de‡
__USE_FILE_OFFSET64


996 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

997 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

999 #ifde‡
__REDIRECT_NTH


1000 
	`__REDIRECT_NTH
 (
åunˇã
,

1001 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

1002 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1004 
	#åunˇã
 
åunˇã64


	)

1007 #ifde‡
__USE_LARGEFILE64


1008 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1009 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1014 #i‡
deföed
 
__USE_POSIX199309
 \

1015 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1018 #i‚de‡
__USE_FILE_OFFSET64


1019 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1021 #ifde‡
__REDIRECT_NTH


1022 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1023 
·runˇã64
Ë
__wur
;

1025 
	#·runˇã
 
·runˇã64


	)

1028 #ifde‡
__USE_LARGEFILE64


1029 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1035 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1036 || 
deföed
 
__USE_MISC


1040 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1046 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1050 #ifde‡
__USE_MISC


1061 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1066 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1078 
	#F_ULOCK
 0

	)

1079 
	#F_LOCK
 1

	)

1080 
	#F_TLOCK
 2

	)

1081 
	#F_TEST
 3

	)

1083 #i‚de‡
__USE_FILE_OFFSET64


1084 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1086 #ifde‡
__REDIRECT


1087 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1088 
lockf64
Ë
__wur
;

1090 
	#lockf
 
lockf64


	)

1093 #ifde‡
__USE_LARGEFILE64


1094 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1099 #ifde‡
__USE_GNU


1104 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1105 (
__exãnsi⁄__
 \

1106 ({ 
__ªsu…
; \

1107 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1108 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1109 
__ªsu…
; 
	}
}))

	)

1112 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1115 
fd©async
 (
__fûdes
);

1121 #ifdef 
__USE_XOPEN


1123 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1124 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1128 
	$í¸y±
 (*
__glibc_block
, 
__edÊag
)

1129 
__THROW
 
	`__n⁄nuŒ
 ((1));

1136 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1137 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1143 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1145 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1150 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1151 
	~<bôs/uni°d.h
>

1154 
__END_DECLS


	@assert.h

1 #i‚de‡
MALLOC_ASSERT_H


2 
	#MALLOC_ASSERT_H


	)

4 
	~<°dlib.h
>

6 #ifde‡
DEBUG


7 
	#dl_as£π
(
x
)\

9 i‡(!(
x
))\

10 
	`ab‹t
();\

11 }

	)

13 #i‚de‡
dl_as£π


14 
	#dl_as£π
(
x
)

	)

	@check.h

1 #i‚de‡
MALLOC_CHECK_H


2 
	#MALLOC_CHECK_H


	)

32 #i‡!
INSECURE


35 
	#ok_addªss
(
M
, 
a
Ë((*Ë◊Ë>(M)->
Àa°_addr
)

	)

37 
	#ok_√xt
(
p
, 
n
Ë((*Ë’Ë< (*Ë“))

	)

39 
	#ok_öu£
(
p
Ë
	`is_öu£
’)

	)

41 
	#ok_¥ev_öu£
(
p
Ë
	`¥ev_öu£
’)

	)

45 
	#ok_addªss
(
M
, 
a
Ë(1)

	)

46 
	#ok_√xt
(
b
, 
n
Ë(1)

	)

47 
	#ok_öu£
(
p
Ë(1)

	)

48 
	#ok_¥ev_öu£
(
p
Ë(1)

	)

52 #i‡(
FOOTERS
 && !
INSECURE
)

55 
	#ok_magic
(
M
Ë((M)->
magic
 =
∑øms
.magic)

	)

59 
	#ok_magic
(
M
Ë(1)

	)

	@chunk.h

1 #i‚de‡
MALLOC_CHUNK_H


2 
	#MALLOC_CHUNK_H


	)

4 
	~<sys/ty≥s.h
>

6 
	~"c⁄fig.h
"

7 
	~"tmã.h
"

9 
	#CHUNK_ALIGN_MASK
 (
MALLOC_ALIGNMENT
 - ((
size_t
Ë1))

	)

13 
ölöe
 
	$is_Æig√d
(*
p
) {

14  ((
size_t
Ë
p
 & 
CHUNK_ALIGN_MASK
) == 0;

15 
	}
}

18 
ölöe
 
size_t
 
	$Æign_off£t
(*
p
) {

19  ((
size_t
Ë
p
 & 
CHUNK_ALIGN_MASK
) == 0

21 : (
MALLOC_ALIGNMENT
 - ((
size_t
Ë
p
 & 
CHUNK_ALIGN_MASK
)) & CHUNK_ALIGN_MASK;

22 
	}
}

29 
	#TOP_FOOT_SIZE
 \

30 (
	`Æign_off£t
(
	`chunk_to_mem
(0)Ë+ 
	`∑d_ªque°
((
mÆloc_£gmít
)Ë+ 
MIN_CHUNK_SIZE
)

	)

32 
	s™y_chunk
 {

34 
size_t
 
	m¥ev_foŸ
;

35 
size_t
 
	mhód
;

44 
	#PREV_INUSE_BIT
 ((
size_t
Ë1)

	)

45 
	#CURR_INUSE_BIT
 ((
size_t
Ë2)

	)

46 
	#INUSE_BITS
 (
PREV_INUSE_BIT
 | 
CURR_INUSE_BIT
)

	)

50 
	#TAG_MASK
 ((
size_t
)-1 >> 4)

	)

51 
	#TAG_BITS
 ~((
size_t
)
TAG_MASK
)

	)

52 
	#TAG_OFFSET
 (
TAG_MASK
 + 1U)

	)

53 
	#FLAG_BITS
 (
PREV_INUSE_BIT
 | 
CURR_INUSE_BIT
)

	)

54 
	#SIZE_BITS
 (
TAG_MASK
 & ~
FLAG_BITS
)

	)

55 
	#TAG_SHIFT
 ((((
size_t
))-1Ë<< 3)

	)

56 
	#PREV_EXH_BIT
 ((
size_t
)1)

	)

57 
	#NEXT_EXH_BIT
 ((
size_t
)2)

	)

58 
	#NEXT_PEN_BIT
 ((
size_t
)4)

	)

59 
	#EXHAUSTION_BITS
 (
NEXT_PEN_BIT
 | 
NEXT_EXH_BIT
 | 
PREV_EXH_BIT
)

	)

63 
	#FENCEPOST_HEAD
 (
INUSE_BITS
 | (
size_t
))

	)

65 
ölöe
 
size_t
 
	$chunk_size
(*
chunk
) {

66  ((
™y_chunk
 *Ë
chunk
)->
hód
 & 
SIZE_BITS
;

67 
	}
}

70 
ölöe
 
size_t
 
	$gë_¥ev_size
(* 
p
){

71  ((
™y_chunk
*)
p
)->
¥ev_foŸ
 & ~
EXHAUSTION_BITS
;

72 
	}
}

74 
ölöe
 
size_t
 
	$gë_foŸ
(*
chunk
, 
size_t
 
size
) {

75  ((
™y_chunk
 *Ë((*Ë
chunk
 + 
size
))->
¥ev_foŸ
;

76 
	}
}

78 
ölöe
 
	$£t_foŸ
(*
chunk
, 
size_t
 
size
) {

79 if((((
™y_chunk
*)
chunk
)->
¥ev_foŸ
 & 
NEXT_EXH_BIT
) != NEXT_EXH_BIT){

80 
™y_chunk
* 
√xt
 = (™y_chunk*)((*)
chunk
 + 
size
);

81 
√xt
->
¥ev_foŸ
 = (√xt->¥ev_foŸ & 
EXHAUSTION_BITS
Ë| 
size
;

83 
	}
}

85 
ölöe
 
	$cuº_öu£
(*
chunk
) {

86  ((
™y_chunk
 *Ë
chunk
)->
hód
 & 
CURR_INUSE_BIT
;

87 
	}
}

89 
ölöe
 
	$¥ev_öu£
(*
chunk
) {

90  ((
™y_chunk
 *Ë
chunk
)->
hód
 & 
PREV_INUSE_BIT
;

91 
	}
}

93 
ölöe
 
	$is_öu£
(*
chunk
) {

94  (((
™y_chunk
 *Ë
chunk
)->
hód
 & 
FLAG_BITS
Ë!
PREV_INUSE_BIT
;

95 
	}
}

97 
ölöe
 
	$is_mm≠≥d
(*
chunk
) {

98  (((
™y_chunk
 *Ë
chunk
)->
hód
 & 
INUSE_BITS
) == 0;

99 
	}
}

101 
ölöe
 
	$˛ór_¥ev_öu£
(*
chunk
) {

102 ((
™y_chunk
 *Ë
chunk
)->
hód
 &~
PREV_INUSE_BIT
;

103 
	}
}

106 
ölöe
 
	$£t_size_™d_¥ev_öu£_of_‰ì_chunk
(*
chunk
, 
size_t
 
size
) {

107 ((
™y_chunk
 *Ë
chunk
)->
hód
 = (((™y_chunk*)chunk)->hód & 
TAG_BITS
Ë| 
size
 | 
PREV_INUSE_BIT
;

108 
	`£t_foŸ
(
chunk
, 
size
);

109 
	}
}

112 
ölöe
 
	$£t_‰ì_wôh_¥ev_öu£
(*
chunk
, 
size_t
 
size
, *
n
) {

113 
	`˛ór_¥ev_öu£
(
n
);

114 
	`£t_size_™d_¥ev_öu£_of_‰ì_chunk
(
chunk
, 
size
);

115 
	}
}

254 
	smÆloc_chunk
 {

255 
size_t
 
	m¥ev_foŸ
;

256 
size_t
 
	mhód
;

257 
mÆloc_chunk
 *
	mfd
;

258 
mÆloc_chunk
 *
	mbk
;

261 
	tbö_ödex_t
;

262 
	tbö_m≠_t
;

263 
	tÊag_t
;

267 
	#MALLOC_CHUNK_SIZE
 ((
mÆloc_chunk
))

	)

269 #i‡
FOOTERS


270 
	#CHUNK_OVERHEAD
 ((
size_t
Ë* 2)

	)

272 
	#CHUNK_OVERHEAD
 ((
size_t
Ë* 2)

	)

276 
	#MMAP_CHUNK_OVERHEAD
 ((
size_t
Ë* 2)

	)

278 
	#MMAP_FOOT_PAD
 ((
size_t
Ë* 4)

	)

281 
	#MIN_CHUNK_SIZE
 ((
MALLOC_CHUNK_SIZE
 + 
CHUNK_ALIGN_MASK
Ë& ~CHUNK_ALIGN_MASK)

	)

284 
ölöe
 *
	$chunk_to_mem
(*
p
) {

285  (*Ë((*Ë
p
 + (
size_t
) * 2);

286 
	}
}

288 
ölöe
 
mÆloc_chunk
 *
	$mem_to_chunk
(*
p
) {

289  (
mÆloc_chunk
 *Ë((*Ë
p
 - (
size_t
) * 2);

290 
	}
}

293 
ölöe
 
mÆloc_chunk
 *
	$Æign_as_chunk
(*
p
) {

294  (
mÆloc_chunk
 *Ë(
p
 + 
	`Æign_off£t
(
	`chunk_to_mem
(p)));

295 
	}
}

298 
	#MAX_REQUEST
 ((-
MIN_CHUNK_SIZE
Ë<< 2)

	)

299 
	#MIN_REQUEST
 (
MIN_CHUNK_SIZE
 - 
CHUNK_OVERHEAD
 - (
size_t
Ë1)

	)

302 
ölöe
 
size_t
 
	$∑d_ªque°
(
size_t
 
ªq
) {

303  (
ªq
 + 
CHUNK_OVERHEAD
 + 
CHUNK_ALIGN_MASK
) & ~CHUNK_ALIGN_MASK;

304 
	}
}

307 
ölöe
 
size_t
 
	$ªque°_to_size
(
size_t
 
ªq
) {

308  
ªq
 < 
MIN_REQUEST
 ? 
MIN_CHUNK_SIZE
 : 
	`∑d_ªque°
(req);

309 
	}
}

312 
ölöe
 
mÆloc_chunk
 *
	$chunk_∂us_off£t
(*
chunk
, 
size_t
 
size
) {

313  (
mÆloc_chunk
 *Ë(((*Ë
chunk
Ë+ 
size
);

314 
	}
}

316 
ölöe
 
mÆloc_chunk
 *
	$chunk_möus_off£t
(*
chunk
, 
size_t
 
size
) {

317  (
mÆloc_chunk
 *Ë(((*Ë
chunk
Ë- 
size
);

318 
	}
}

321 
ölöe
 
mÆloc_chunk
 *
	$√xt_chunk
(*
chunk
) {

322  (
mÆloc_chunk
 *Ë(((*Ë
chunk
Ë+ (((
™y_chunk
 *Ëchunk)->
hód
 & 
SIZE_BITS
));

323 
	}
}

325 
ölöe
 
mÆloc_chunk
 *
	$¥ev_chunk
(*
chunk
) {

326  (
mÆloc_chunk
 *Ë(((*Ë
chunk
Ë- 
	`gë_¥ev_size
(((
™y_chunk
 *) chunk)));

327 
	}
}

330 
ölöe
 
size_t
 
	$ovîhód_f‹
(*
chunk
) {

331  
	`is_mm≠≥d
(
chunk
Ë? 
MMAP_CHUNK_OVERHEAD
 : 
CHUNK_OVERHEAD
;

332 
	}
}

335 
ölöe
 
	$ˇŒoc_mu°_˛ór
(*
chunk
) {

336  !
	`is_mm≠≥d
(
chunk
);

337 
	}
}

341 
	gmÆloc_°©e
;

343 #i‡!
FOOTERS


345 
ölöe
 
	$m¨k_öu£_foŸ
(
mÆloc_°©e
 *
°©e
, *
chunk
, 
size_t
 
size
) {

346 (Ë
°©e
;

347 (Ë
chunk
;

348 (Ë
size
;

349 
	}
}

354 
ölöe
 
	$£t_öu£
(
mÆloc_°©e
 *
°©e
, *
chunk
, 
size_t
 
size
) {

355 (Ë
°©e
;

356 ((
™y_chunk
 *Ë
chunk
)->
hód
 = (((™y_chunk *Ëchunk)->hód & 
PREV_INUSE_BIT
Ë| 
size
 | 
CURR_INUSE_BIT
;

357 ((
mÆloc_chunk
 *Ë(((*Ë
chunk
Ë+ 
size
))->
hód
 |
PREV_INUSE_BIT
;

358 
	}
}

360 
ölöe
 
is_√xt_exhau°ed
(
mÆloc_chunk
* 
p
);

363 
ölöe
 
	$£t_öu£_™d_¥ev_öu£
(
mÆloc_°©e
 *
°©e
, *
chunk
, 
size_t
 
size
) {

364 (Ë
°©e
;

365 ((
™y_chunk
 *Ë
chunk
)->
hód
 = (((™y_chunk*Ëchunk)->hód & 
TAG_BITS
Ë| 
size
 | 
PREV_INUSE_BIT
 | 
CURR_INUSE_BIT
;

366 if(!
	`is_√xt_exhau°ed
(
chunk
))

367 ((
mÆloc_chunk
 *Ë(((*Ë
chunk
Ë+ 
size
))->
hód
 |
PREV_INUSE_BIT
;

368 
	}
}

371 
ölöe
 
	$£t_size_™d_¥ev_öu£_of_öu£_chunk
(
mÆloc_°©e
 *
°©e
, *
chunk
, 
size_t
 
size
) {

372 (Ë
°©e
;

373 ((
™y_chunk
 *Ë
chunk
)->
hód
 = (((™y_chunk*)chunk)->hód & 
TAG_BITS
Ë| 
size
 | 
INUSE_BITS
;

374 
	}
}

379 
	#m¨k_öu£_foŸ
(
M
, 
p
, 
s
)\

380 (((
mÆloc_chunk
 *)((*)(
p
Ë+ (
s
)))->
¥ev_foŸ
 = ((
size_t
)(
M
Ë^ 
∑øms
.
magic
))

	)

382 
	#gë_°©e_f‹
(
p
)\

383 ((
mÆloc_°©e
 *)(((
mÆloc_chunk
 *)((*)(
p
) +\

384 (
	`chunk_size
(
p
))))->
¥ev_foŸ
 ^ 
∑øms
.
magic
))

	)

386 
	#£t_öu£
(
M
, 
p
, 
s
)\

387 ((
p
)->
hód
 = ((’)->hód & 
PREV_INUSE_BIT
Ë| 
s
 | 
CURR_INUSE_BIT
),\

388 (((
mÆloc_chunk
 *)(((*)(
p
)Ë+ (
s
)))->
hód
 |
PREV_INUSE_BIT
), \

389 
	`m¨k_öu£_foŸ
(
M
,
p
,
s
))

	)

391 
	#£t_öu£_™d_¥ev_öu£
(
M
, 
p
, 
s
)\

392 ((
p
)->
hód
 = (
s
 | 
PREV_INUSE_BIT
 | 
CURR_INUSE_BIT
),\

393 (((
mÆloc_chunk
 *)(((*)(
p
)Ë+ (
s
)))->
hód
 |
PREV_INUSE_BIT
),\

394 
	`m¨k_öu£_foŸ
(
M
, 
p
, 
s
))

	)

396 
	#£t_size_™d_¥ev_öu£_of_öu£_chunk
(
M
, 
p
, 
s
)\

397 ((
p
)->
hód
 = (
s
 | 
PREV_INUSE_BIT
 | 
CURR_INUSE_BIT
),\

398 
	`m¨k_öu£_foŸ
(
M
, 
p
, 
s
))

	)

493 
	smÆloc_åì_chunk
 {

495 
size_t
 
	m¥ev_foŸ
;

496 
size_t
 
	mhód
;

497 
mÆloc_åì_chunk
 *
	mfd
;

498 
mÆloc_åì_chunk
 *
	mbk
;

500 
mÆloc_åì_chunk
 *
	mchûd
[2];

501 
mÆloc_åì_chunk
 *
	m∑ª¡
;

502 
bö_ödex_t
 
	mödex
;

506 
ölöe
 
mÆloc_åì_chunk
 *
	$À·mo°_chûd
(
mÆloc_åì_chunk
 *
t
) {

507  
t
->
chûd
[0] != 0 ?Å->child[0] :Å->child[1];

508 
	}
}

510 
	#compuã_åì_ödex
(
S
, 
I
)\

512 
X
 = 
S
 >> 
TREE_BIN_SHIFT
;\

513 i‡(
X
 == 0)\

514 
I
 = 0;\

515 i‡(
X
 > 0xFFFF)\

516 
I
 = 
NUM_TREE_BINS
-1;\

518 
K
 = (Ë(
X
)*
__CHAR_BIT__
 - 1 - (Ë
	`__buûtö_˛z
(X); \

519 
I
 = (
bö_ödex_t
Ë((
K
 << 1Ë+ ((
S
 >> (K + (
TREE_BIN_SHIFT
-1)) & 1)));\

521 }

	)

525 
ölöe
 
size_t
 
	$èg_max
(
size_t
 
x
, size_à
y
){

526  
x
 > 
y
? x: y;

527 
	}
}

529 
ölöe
 
u_öt8_t
 
	$èg_to_öt
(
size_t
 
èg
){

530  
èg
 >> 
TAG_SHIFT
;

531 
	}
}

533 
ölöe
 
size_t
 
	$öt_to_èg
(
u_öt8_t
 
öt_èg
){

534  
öt_èg
 << 
TAG_SHIFT
;

535 
	}
}

537 
ölöe
 
size_t
 
	$gë_chunk_èg
(
mÆloc_chunk
* 
p
){

538  
p
->
hód
 & 
TAG_BITS
;

539 
	}
}

541 
ölöe
 
	$is_exhau°ed
(
mÆloc_chunk
* 
p
){

542  ((
	`gë_chunk_èg
(
p
Ë+ 
TAG_OFFSET
Ë=
TAG_BITS
);

543 
	}
}

545 
ölöe
 
	$is_ußbÀ
(
mÆloc_chunk
* 
p
){

546  (
p
->
hód
 & 
TAG_BITS
) != TAG_BITS;

547 
	}
}

549 
ölöe
 
	$£t_chunk_èg
(
mÆloc_chunk
* 
p
, 
size_t
 
èg
){

550 
p
->
hód
 &
TAG_MASK
,Ö->hód |
èg
;

551 
	}
}

553 
ölöe
 
	$is_√xt_exhau°ed
(
mÆloc_chunk
* 
p
){

554  (
p
->
¥ev_foŸ
 & 
NEXT_EXH_BIT
) == NEXT_EXH_BIT;

555 
	}
}

557 
ölöe
 
	$is_¥ev_exhau°ed
(
mÆloc_chunk
* 
p
){

558  (
p
->
¥ev_foŸ
 & 
PREV_EXH_BIT
) == PREV_EXH_BIT;

559 
	}
}

561 
ölöe
 
	$is_√xt_≥ndög_dñëi⁄
(
mÆloc_chunk
* 
p
){

562  (
p
->
¥ev_foŸ
 & 
NEXT_PEN_BIT
) == NEXT_PEN_BIT;

563 
	}
}

568 
ö£π_chunk
(
mÆloc_°©e
 *, 
mÆloc_chunk
 *, 
size_t
);

570 
u∆ök_chunk
(
mÆloc_°©e
 *, 
mÆloc_chunk
 *, 
size_t
);

572 
ö£π_smÆl_chunk
(
mÆloc_°©e
 *, 
mÆloc_chunk
 *, 
size_t
);

574 
u∆ök_smÆl_chunk
(
mÆloc_°©e
 *, 
mÆloc_chunk
 *, 
size_t
);

576 
u∆ök_fú°_smÆl_chunk
(
mÆloc_°©e
 *, 
mÆloc_chunk
 *, mÆloc_chunk *, 
bö_ödex_t
);

578 
ª∂a˚_dv
(
mÆloc_°©e
 *, 
mÆloc_chunk
 *, 
size_t
);

580 
ö£π_œrge_chunk
(
mÆloc_°©e
 *, 
mÆloc_åì_chunk
 *, 
size_t
);

582 
u∆ök_œrge_chunk
(
mÆloc_°©e
 *, 
mÆloc_åì_chunk
 *);

584 
di•o£_chunk
(
mÆloc_°©e
 *, 
mÆloc_chunk
 *, 
size_t
);

	@config.h

1 #i‚de‡
MALLOC_CONFIG_H


2 
	#MALLOC_CONFIG_H


	)

4 
	~<sys/ty≥s.h
>

6 #i‚de‡
OVERRIDE


7 
	#OVERRIDE
 1

	)

10 #ifde‡
EMULATE_SBRK


14 #i‚de‡
USE_LOCKS


15 
	#USE_LOCKS
 1

	)

18 #i‚de‡
LOCK_AT_FORK


19 
	#LOCK_AT_FORK
 0

	)

22 #i‚de‡
FOOTERS


23 
	#FOOTERS
 0

	)

26 #i‚de‡
INSECURE


27 
	#INSECURE
 0

	)

31 
	#MAX_SIZE_T
 (~(
size_t
Ë0)

	)

32 
	#SIZE_T_BITSIZE
 ( (
size_t
Ë<< 3)

	)

34 #i‚de‡
MALLOC_ALIGNMENT


35 
	#MALLOC_ALIGNMENT
 ((
size_t
Ë(2 * (*)))

	)

38 #i‚de‡
MORECORE_CONTIGUOUS


39 
	#MORECORE_CONTIGUOUS
 1

	)

42 #i‚de‡
DEFAULT_GRANULARITY


43 #i‡(
MORECORE_CONTIGUOUS
)

44 
	#DEFAULT_GRANULARITY
 (0Ë

	)

46 
	#DEFAULT_GRANULARITY
 ((
size_t
Ë64U * (size_tË1024U)

	)

50 #i‚de‡
DEFAULT_TRIM_THRESHOLD


51 
	#DEFAULT_TRIM_THRESHOLD
 ((
size_t
Ë2U * (size_tË1024U * (size_tË1024U)

	)

54 #i‚de‡
DEFAULT_MMAP_THRESHOLD


55 
	#DEFAULT_MMAP_THRESHOLD
 ((
size_t
Ë256U * (size_tË1024U)

	)

58 #i‚de‡
MAX_RELEASE_CHECK_RATE


59 
	#MAX_RELEASE_CHECK_RATE
 4095

	)

62 
	#USE_MMAP_BIT
 (1U)

	)

64 
	#USE_LOCK_BIT
 (2U)

	)

66 
	#USE_NONCONTIGUOUS_BIT
 (4U)

	)

68 
	#EXTERN_BIT
 (8U)

	)

70 #i‡
deföed
(
__GNUC__
Ë|| deföed(
__˛™g__
)

71 
	#likñy
(
x
Ë
	`__buûtö_ex≥˘
((x),1)

	)

72 
	#u∆ikñy
(
x
Ë
	`__buûtö_ex≥˘
((x),0)

	)

74 
	#likñy
(
x
Ë(x)

	)

75 
	#u∆ikñy
(
x
Ë(x)

	)

78 #i‡
deföed
(
__GNUC__
Ë|| deföed(
__˛™g__
)

79 
	#dl_f‹˚_ölöe
 
__ölöe
 
	`__©åibuã__
((
Æways_ölöe
))

	)

81 
	#dl_f‹˚_ölöe
 
ölöe


	)

84 #i‡
deföed
(
__GNUC__
Ë|| deföed(
__˛™g__
)

85 
	#dl_exp‹t
 
	`__©åibuã__
((
	`visibûôy
 ("deÁu…")))

	)

87 
	#dl_exp‹t


	)

90 #i‡(
deföed
(
__GNUC__
Ë|| deföed(
__˛™g__
)Ë&& !deföed(
__MACH__
)

91 #i‡(
deföed
(
__GNUC__
) && __GNUC__ >= 9)

92 
	#DL_FORWARD
(
fun
Ë
	`__©åibuã__
((
	`Æüs
(#fun), 
u£d
, 
	`visibûôy
("deÁu…"), 
	`c›y
(fun)))

	)

94 
	#DL_FORWARD
(
fun
Ë
	`__©åibuã__
((
	`Æüs
(#fun), 
u£d
, 
	`visibûôy
("deÁu…")))

	)

96 
	#DL_FORWARD_1
(
fun
, 
x
Ë
	`DL_FORWARD
(fun)

	)

97 
	#DL_FORWARD_2
(
fun
, 
x
, 
y
Ë
	`DL_FORWARD
(fun)

	)

98 
	#DL_FORWARD_3
(
fun
, 
x
, 
y
, 
z
Ë
	`DL_FORWARD
(fun)

	)

99 
	#DL_FORWARD0_1
(
fun
, 
x
Ë
	`DL_FORWARD
(fun)

	)

100 
	#DL_FORWARD0_2
(
fun
, 
x
, 
y
Ë
	`DL_FORWARD
(fun)

	)

101 
	#DL_FORWARD0_3
(
fun
, 
x
, 
y
, 
z
Ë
	`DL_FORWARD
(fun)

	)

103 
	#DL_FORWARD_1
(
fun
, 
x
Ë{  
	`fun
(x); }

	)

104 
	#DL_FORWARD_2
(
fun
, 
x
, 
y
Ë{  
	`fun
(x, y); }

	)

105 
	#DL_FORWARD_3
(
fun
, 
x
, 
y
, 
z
Ë{  
	`fun
(x, y, z); }

	)

106 
	#DL_FORWARD0_1
(
fun
, 
x
Ë{ 
	`fun
(x); }

	)

107 
	#DL_FORWARD0_2
(
fun
, 
x
, 
y
Ë{ 
	`fun
(x, y); }

	)

108 
	#DL_FORWARD0_3
(
fun
, 
x
, 
y
, 
z
Ë{ 
	`fun
(x, y, z); }

	)

112 #i‚de‡
USE_DL_PREFIX


113 
	#USE_DL_PREFIX
 1

	)

117 #i‡!
USE_DL_PREFIX


118 
	#dl_ˇŒoc
 
ˇŒoc


	)

119 
	#dl_‰ì
 
‰ì


	)

120 
	#dl_mÆloc
 
mÆloc


	)

121 
	#dl_memÆign
 
memÆign


	)

122 
	#dl_posix_memÆign
 
posix_memÆign


	)

123 
	#dl_ªÆloc
 
ªÆloc


	)

124 
	#dl_ªÆloc_ö_∂a˚
 
ªÆloc_ö_∂a˚


	)

125 
	#dl_vÆloc
 
vÆloc


	)

126 
	#dl_pvÆloc
 
pvÆloc


127 
	#dl_mÆlöfo
 
mÆlöfo


	)

128 
	#dl_mÆl›t
 
mÆl›t


	)

129 
	#dl_mÆloc_åim
 
mÆloc_åim


	)

130 
	#dl_mÆloc_°©s
 
mÆloc_°©s


	)

131 
	#dl_mÆloc_ußbÀ_size
 
mÆloc_ußbÀ_size


	)

132 
	#dl_mÆloc_foŸ¥öt
 
mÆloc_foŸ¥öt


	)

133 
	#dl_mÆloc_max_foŸ¥öt
 
mÆloc_max_foŸ¥öt


	)

134 
	#dl_mÆloc_foŸ¥öt_limô
 
mÆloc_foŸ¥öt_limô


	)

135 
	#dl_mÆloc_£t_foŸ¥öt_limô
 
mÆloc_£t_foŸ¥öt_limô


	)

136 
	#dl_mÆloc_ö•e˘_Æl
 
mÆloc_ö•e˘_Æl


	)

137 
	#dl_ödïídít_ˇŒoc
 
ödïídít_ˇŒoc


	)

138 
	#dl_ödïídít_comÆloc
 
ödïídít_comÆloc


	)

139 
	#dl_bulk_‰ì
 
bulk_‰ì


	)

	@debug.h

1 #i‚de‡
MALLOC_DEBUG_H


2 
	#MALLOC_DEBUG_H


	)

4 
	~"chunk.h
"

5 
	~"c⁄fig.h
"

6 
	~"°©e.h
"

8 #ifde‡
DEBUG


10 
check_t›_chunk
(
mÆloc_°©e
 *, 
mÆloc_chunk
 *);

12 
check_mm≠≥d_chunk
(
mÆloc_°©e
 *, 
mÆloc_chunk
 *);

14 
check_öu£_chunk
(
mÆloc_°©e
 *, 
mÆloc_chunk
 *);

16 
check_mÆlo˚d_chunk
(
mÆloc_°©e
 *, *, 
size_t
);

18 
check_‰ì_chunk
(
mÆloc_°©e
 *, 
mÆloc_chunk
 *);

20 
check_mÆloc_°©e
(
mÆloc_°©e
 *);

24 
	#check_t›_chunk
(
M
, 
P
)

	)

25 
	#check_mm≠≥d_chunk
(
M
, 
P
)

	)

26 
	#check_öu£_chunk
(
M
, 
P
)

	)

27 
	#check_mÆlo˚d_chunk
(
M
, 
P
, 
N
)

	)

28 
	#check_‰ì_chunk
(
M
, 
P
)

	)

29 
	#check_mÆloc_°©e
(
M
)

	)

	@error.h

1 #i‚de‡
MALLOC_ERROR_H


2 
	#MALLOC_ERROR_H


	)

4 
	~"c⁄fig.h
"

6 
	gmÆloc_°©e
;

8 
mÆloc_Áûuª
();

13 
c‹ru±i⁄_îr‹
(
mÆloc_°©e
 *
°©e
);

21 
ußge_îr‹
(
mÆloc_°©e
 *
°©e
, *
p
);

	@heap.h

1 #i‚de‡
DLALLOC_HEAP_H


2 
	#DLALLOC_HEAP_H


	)

4 
	~"mÆloc.h
"

5 
	~"öô.h
"

8 
	#Àa°_bô
(
x
Ë((xË& -(x))

	)

11 
	#À·_bôs
(
x
Ë((x << 1Ë| -(x << 1))

	)

14 
	#compuã_bô2idx
(
X
, 
I
)\

16 
J
;\

17 
J
 = 
	`__buûtö_˘z
(
X
); \

18 
I
 = (
bö_ödex_t
Ë
J
;\

19 }

	)

21 
ölöe
 *
	$öã∫Æ_mÆloc
(
dl_hóp_t
 
hóp
, 
size_t
 
size
) {

22 i‡(
hóp
 =&
globÆ_mÆloc_°©e
) {

23  
	`dl_mÆloc
(
size
);

26  
	`dl_hóp_mÆloc
(
hóp
, 
size
);

28 
	}
}

30 
ölöe
 
	$öã∫Æ_‰ì
(
dl_hóp_t
 
hóp
, *
mem
) {

31 i‡(
hóp
 =&
globÆ_mÆloc_°©e
) {

32 
	`dl_‰ì
(
mem
);

35 
	`dl_hóp_‰ì
(
hóp
, 
mem
);

37 
	}
}

39 *
dl_mÆloc_im∂
(
mÆloc_°©e
 *
°©e
, 
size_t
 
nb
);

41 
dl_‰ì_im∂
(
mÆloc_°©e
 *
°©e
, 
mÆloc_chunk
 *
p
);

43 *
tmÆloc_smÆl
(
mÆloc_°©e
 *
°©e
, 
size_t
 
nb
);

45 *
tmÆloc_œrge
(
mÆloc_°©e
 *
°©e
, 
size_t
 
nb
);

47 *
öã∫Æ_memÆign
(
mÆloc_°©e
 *
°©e
, 
size_t
 
Æignmít
, size_à
byãs
);

49 
size_t
 
öã∫Æ_bulk_‰ì
(
mÆloc_°©e
 *
°©e
, *
¨øy
[], size_à
√Àm
);

51 
mÆloc_chunk
 *
åy_ªÆloc_chunk
(
mÆloc_°©e
 *
°©e
, mÆloc_chunk *
chunk
, 
size_t
 
nb
, 
ˇn_move
);

53 **
üŒoc
(
mÆloc_°©e
 *
°©e
, 
size_t
 
n_ñemíts
, size_à*
sizes
, 
›ts
, *
chunks
[]);

	@init.h

1 #i‚de‡
MALLOC_INIT_H


2 
	#MALLOC_INIT_H


	)

4 
	~"°©e.h
"

5 
	~"tmã.h
"

6 
	~"ªdbœck.h
"

15 
	smÆloc_∑øms
 {

16 
size_t
 
	mmagic
;

17 
size_t
 
	m∑ge_size
;

18 
size_t
 
	mgønuœrôy
;

19 
size_t
 
	mmm≠_thªshﬁd
;

20 
size_t
 
	måim_thªshﬁd
;

21 
Êag_t
 
	mdeÁu…_Êags
;

24 
mÆloc_∑øms
 
∑øms
;

26 #i‡
DBG


27 
	gnum_mm≠
;

28 
size_t
 
	gbrk_addr
;

31 
size_t
 
	gw©îm¨k
;

32 
size_t
 
	gmm≠_w©îm¨k
;

34 
öô_∑øms
();

36 
ch™ge_∑øm
(
∑øm_numbî
, 
vÆue
);

39 
ölöe
 
	$ísuª_öôüliz©i⁄
() {

40 i‡(
∑øms
.
magic
 == 0) {

41 #i‡
DBG


42 
num_mm≠
 = 0;

43 
brk_addr
 = 0;

45 
w©îm¨k
 = 0;

46 
mm≠_w©îm¨k
 = 0;

47 
	`öô_∑øms
();

48 
	`mã_öô
();

49 
	`öô_ªdbœck_åì
();

51 
	}
}

54 
mÆloc_°©e
 
globÆ_mÆloc_°©e
;

56 
ölöe
 
	$is_globÆ
(
mÆloc_°©e
 *
°©e
) {

57  
°©e
 =&
globÆ_mÆloc_°©e
;

58 
	}
}

61 
ölöe
 
size_t
 
	$∑ge_Æign
(
size_t
 
size
) {

62  (
size
 + (
∑øms
.
∑ge_size
 - (
size_t
) 1)) & ~(params.page_size - (size_t) 1);

63 
	}
}

65 
ölöe
 
	$is_∑ge_Æig√d
(*
size
) {

66  ((
size_t
Ë
size
 & (
∑øms
.
∑ge_size
 - (size_t) 1)) == 0;

67 
	}
}

70 
ölöe
 
size_t
 
	$gønuœrôy_Æign
(
size_t
 
size
) {

71  (
size
 + (
∑øms
.
gønuœrôy
 - (
size_t
) 1)) & ~(params.granularity - (size_t) 1);

72 
	}
}

75 
ölöe
 
size_t
 
	$mm≠_Æign
(
size_t
 
size
) {

76  
	`∑ge_Æign
(
size
);

77 
	}
}

	@lock-nolock.h

1 #i‚de‡
MALLOC_LOCK_NOLOCK_H


2 
	#MALLOC_LOCK_NOLOCK_H


	)

4 
	#INITIAL_LOCK
(
lock
Ë(0)

	)

5 
	#DESTROY_LOCK
(
lock
Ë(0)

	)

	@lock-pthread.c

1 
	~"c⁄fig.h
"

2 
	~"lock.h
"

4 
MLOCK_T
 
	gmÆloc_globÆ_muãx
 = 
PTHREAD_MUTEX_INITIALIZER
;

5 
MLOCK_T
 
	gªd_bœck_åì_muãx
 = 
PTHREAD_MUTEX_INITIALIZER
;

7 
	$±hªad_öô_lock
(
MLOCK_T
 *
lock
) {

8 
±hªad_muãx©å_t
 
©å
;

9 i‡(
	`±hªad_muãx©å_öô
(&
©å
)) {

12 i‡(
	`±hªad_muãx_öô
(
lock
, &
©å
)) {

15 i‡(
	`±hªad_muãx©å_de°roy
(&
©å
)) {

19 
	}
}

	@lock-pthread.h

1 #i‚de‡
MALLOC_LOCK_PTHREAD_H


2 
	#MALLOC_LOCK_PTHREAD_H


	)

4 
	~<±hªad.h
>

6 
±hªad_muãx_t
 
	tMLOCK_T
;

8 
	#ACQUIRE_LOCK
(
lock
Ë
	`±hªad_muãx_lock
÷ock)

	)

9 
	#RELEASE_LOCK
(
lock
Ë
	`±hªad_muãx_u∆ock
÷ock)

	)

10 
	#INITIAL_LOCK
(
lock
Ë
	`±hªad_öô_lock
÷ock)

	)

11 
	#DESTROY_LOCK
(
lock
Ë
	`±hªad_muãx_de°roy
÷ock)

	)

13 
±hªad_öô_lock
(
MLOCK_T
 *
lock
);

	@lock-recursive.c

1 
	~<±hªad.h
>

3 
	~"c⁄fig.h
"

4 
	~"lock.h
"

5 
	~"as£π.h
"

7 
MLOCK_T
 
	gmÆloc_globÆ_muãx
 = {

8 .
¶
 = 0,

9 .
	gc
 = 0,

10 .
	gthªad_id
 = (
±hªad_t
) 0,

13 
MLOCK_T
 
	gªd_bœck_åì_muãx
 = {

14 .
¶
 = 0,

15 .
	gc
 = 0,

16 .
	gthªad_id
 = (
±hªad_t
) 0,

19 
dl_f‹˚_ölöe
 
	$ªcursive_acquúe_lock
(
MLOCK_T
 *
lock
) {

20 
±hªad_t
 
my_thªad_id
 = 
	`±hªad_£lf
();

21 
•ös
 = 0;

23 i‡(*((vﬁ©ûê*Ë&
lock
->
¶
) == 0) {

24 i‡(!
	`CAS_LOCK
(&
lock
->
¶
)) {

25 
lock
->
thªad_id
 = 
my_thªad_id
;

26 
lock
->
c
 = 1;

30 i‡(
	`±hªad_equÆ
(
lock
->
thªad_id
, 
my_thªad_id
)) {

31 ++
lock
->
c
;

34 
	`SPIN
(
•ös
);

36 
	}
}

38 
dl_f‹˚_ölöe
 
	$ªcursive_ªÀa£_lock
(
MLOCK_T
 *
lock
) {

39 
	`dl_as£π
(
lock
->
¶
 != 0);

40 i‡(--
lock
->
c
 == 0) {

41 
	`CLEAR_LOCK
(&
lock
->
¶
);

43 
	}
}

	@lock-recursive.h

1 #i‚de‡
MALLOC_LOCK_RECURSIVE_H


2 
	#MALLOC_LOCK_RECURSIVE_H


	)

4 
	~<±hªad.h
>

6 
	smÆloc_ªcursive_lock
 {

7 
	m¶
;

8 
	mc
;

9 
±hªad_t
 
	mthªad_id
;

12 
mÆloc_ªcursive_lock
 
	tMLOCK_T
;

14 
	#ACQUIRE_LOCK
(
lock
Ë
	`ªcursive_acquúe_lock
÷ock)

	)

15 
	#RELEASE_LOCK
(
lock
Ë
	`ªcursive_ªÀa£_lock
÷ock)

	)

16 
	#INITIAL_LOCK
(
lock
Ë(÷ock)->
thªad_id
 = (
±hªad_t
Ë0, (lock)->
¶
 = 0, (lock)->
c
 = 0)

	)

17 
	#DESTROY_LOCK
(
lock
Ë(0)

	)

19 
ªcursive_acquúe_lock
(
MLOCK_T
 *
lock
);

21 
ªcursive_ªÀa£_lock
(
MLOCK_T
 *
lock
);

	@lock-spin.c

1 
	~"c⁄fig.h
"

2 
	~"lock.h
"

3 
	~"as£π.h
"

5 
MLOCK_T
 
	gmÆloc_globÆ_muãx
 = 0;

6 
MLOCK_T
 
	gªd_bœck_åì_muãx
 = 0;

9 
	$•ö_acquúe_lock
(*
¶
) {

10 
•ös
 = 0;

11 *(vﬁ©ûê*Ë
¶
 !0 || 
	`CAS_LOCK
(sl)) {

12 
	`SPIN
(
•ös
);

15 
	}
}

	@lock-spin.h

1 #i‚de‡
MALLOC_LOCK_SPIN_H


2 
	#MALLOC_LOCK_SPIN_H


	)

4 
	tMLOCK_T
;

6 
	#ACQUIRE_LOCK
(
lock
Ë(
	`CAS_LOCK
÷ockË? 
	`•ö_acquúe_lock
÷ockË: 0)

	)

7 
	#RELEASE_LOCK
(
lock
Ë(
	`CLEAR_LOCK
÷ock))

	)

8 
	#INITIAL_LOCK
(
lock
Ë(*lock = 0)

	)

9 
	#DESTROY_LOCK
(
lock
Ë(0)

	)

11 
•ö_acquúe_lock
(*
lock
);

	@lock.h

1 #i‚de‡
MALLOC_LOCK_H


2 
	#MALLOC_LOCK_H


	)

4 
	~<sched.h
>

6 
	~"c⁄fig.h
"

30 #i‡
USE_LOCKS
 || 
USE_SPIN_LOCKS
 || 
USE_RECURSIVE_LOCKS
 || 
USE_PTHREAD_LOCKS


35 #i‡
deföed
(
__GNUC__
)

36 
	#CAS_LOCK
(
¶
Ë
	`__sync_lock_ã°_™d_£t
(¶, 1)

	)

37 
	#CLEAR_LOCK
(
¶
Ë
	`__sync_lock_ªÀa£
(¶)

	)

41 
	#SPINS_PER_YIELD
 63

	)

42 
	#SPIN_LOCK_YIELD
 
	`sched_yõld
();

	)

43 
	#SPIN
(
C
Ë{ i‡((++C & 
SPINS_PER_YIELD
Ë=0Ë{ 
SPIN_LOCK_YIELD
; } }

	)

45 #i‡
USE_RECURSIVE_LOCKS


47 
	~"lock-ªcursive.h
"

49 #ñi‡
USE_PTHREAD_LOCKS


51 
	~"lock-±hªad.h
"

55 
	~"lock-•ö.h
"

59 
MLOCK_T
 
mÆloc_globÆ_muãx
;

60 
MLOCK_T
 
ªd_bœck_åì_muãx
;

62 
	#ACQUIRE_MALLOC_GLOBAL_LOCK
(Ë
	`ACQUIRE_LOCK
(&
mÆloc_globÆ_muãx
);

	)

63 
	#RELEASE_MALLOC_GLOBAL_LOCK
(Ë
	`RELEASE_LOCK
(&
mÆloc_globÆ_muãx
);

	)

64 
	#ACQUIRE_TREE_GLOBAL_LOCK
(Ë
	`ACQUIRE_LOCK
(&
ªd_bœck_åì_muãx
);

	)

65 
	#RELEASE_TREE_GLOBAL_LOCK
(Ë
	`RELEASE_LOCK
(&
ªd_bœck_åì_muãx
);

	)

72 
	#PREACTION
(
°©e
Ë((
	`u£_lock
(°©e)Ë? 
	`ACQUIRE_LOCK
(&(°©e)->
muãx
Ë: 0)

	)

73 
	#POSTACTION
(
°©e
Ë{ i‡(
	`u£_lock
(°©e)Ë{ 
	`RELEASE_LOCK
(&(°©e)->
muãx
); } }

	)

77 
	~"lock-nﬁock.h
"

79 
	#ACQUIRE_MALLOC_GLOBAL_LOCK
()

	)

80 
	#RELEASE_MALLOC_GLOBAL_LOCK
()

	)

82 
	#PREACTION
(
M
Ë(0)

	)

83 
	#POSTACTION
(
M
)

	)

87 #i‡
LOCK_AT_FORK


89 
¥e_f‹k
();

91 
po°_f‹k_∑ª¡
();

93 
po°_f‹k_chûd
();

	@log.h

1 #i‚de‡
DLALLOC_LOG_H


2 
	#DLALLOC_LOG_H


	)

4 
	~<°dio.h
>

9 #i‡
deföed
(
__GNUC__
Ë|| deföed(
__˛™g__
)

10 
__©åibuã__
((
	$f‹m©
(
¥ötf
, 1, 2)))

12 
	`dl_¥ötf
(c⁄° *
fmt
, ...);

14 #i‡
	`deföed
(
__GNUC__
Ë|| deföed(
__˛™g__
)

15 
	`__©åibuã__
((
	$f‹m©
(
¥ötf
, 2, 3)))

17 
	`dl_Ârötf
(
FILE
 *
fûe
, c⁄° *
fmt
, ...);

	@os.h

1 #i‚de‡
MALLOC_ALLOC_H


2 
	#MALLOC_ALLOC_H


	)

4 
	~<sys/ty≥s.h
>

5 
	~<f˙é.h
>

6 
	~<°dio.h
>

8 
	~<uni°d.h
>

10 
	#__USE_GNU


	)

11 
	~<sys/mm™.h
>

13 #unde‡
__USE_GNU


15 
	~"c⁄fig.h
"

16 
	~"sbrk.h
"

17 
	~"ªdbœck.h
"

20 
	#MFAIL
 ((*Ë-1)

	)

22 #i‡
DBG


23 
size_t
 
brk_addr
;

26 
size_t
 
w©îm¨k
;

27 
size_t
 
mm≠_w©îm¨k
;

29 
ölöe
 *
	$ˇŒ_sbrk
(
öçå_t
 
ö¸emít
) {

30 #i‡
	`deföed
(
DISABLE_SBRK
)

31 (Ë
ö¸emít
;

32  
MFAIL
;

33 #ñi‡
EMULATE_SBRK


34 
size_t
 
addr
;

35 if(!
ö¸emít
Ëö¸emíà3*
UNMAP_UNIT
;

37 
ö¸emít
 = in¸emíà% 
UNMAP_UNIT
 ? increment / UNMAP_UNIT * UNMAP_UNIT + UNMAP_UNIT : increment;

38 i‡(!
w©îm¨k
){

39 
addr
 = 
	`sbrk
(
ö¸emít
);

40 
w©îm¨k
 = 
addr
+
ö¸emít
;

43 
addr
 = 
w©îm¨k
;

44 #i‡
	`deföed
(
AARCH64
)

45 
size_t
 
ªs
 = 
	`mm≠
(
w©îm¨k
, 
ö¸emít
, 
PROT_READ
 | 
PROT_WRITE
 | 
PROT_MTE
, 
MAP_FIXED
| 
MAP_PRIVATE
 | 
MAP_ANONYMOUS
, -1, 0);

47 
size_t
 
ªs
 = 
	`mm≠
(
w©îm¨k
, 
ö¸emít
, 
PROT_READ
 | 
PROT_WRITE
, 
MAP_FIXED
| 
MAP_PRIVATE
 | 
MAP_ANONYMOUS
, -1, 0);

49 
w©îm¨k
 +
ö¸emít
;

51 #i‡
DBG


52 if(
brk_addr
 == 0 )

53 
brk_addr
 = 
addr
;

54 
	`dl_¥ötf
("iyb: sbrkÖrogøm bªakÉxãnded by 0x%Œx.\n", 
addr
-
brk_addr
);

56  
addr
;

58 #ñi‡!
	`deföed
(
__APPLE__
)

59 #i‡
DBG


60 
size_t
 
addr
 = 
	`sbrk
(
ö¸emít
);

61 if(
brk_addr
 == 0 )

62 
brk_addr
 = 
addr
;

63 
	`dl_¥ötf
("iyb: sbrkÖrogøm bªakÉxãnded by 0x%Œx.\n", 
addr
-
brk_addr
);

64  
addr
;

66  
	`sbrk
(
ö¸emít
);

70 (Ë
ö¸emít
;

71  
MFAIL
;

73 
	}
}

75 
ölöe
 *
	$ˇŒ_mm≠
(
size_t
 
size
) {

76 #i‡
WATERMARK


77 
size_t
 
ªs
;

78 if(
mm≠_w©îm¨k
){

79 
ªs
 = 
	`mm≠
(
mm≠_w©îm¨k
, 
ö¸emít
, 
PROT_READ
 | 
PROT_WRITE
 | 
MAP_FIXED
, 
MAP_PRIVATE
 | 
MAP_ANONYMOUS
, -1, 0);

80 
mm≠_w©îm¨k
 +
size
;

82 
ªs
 = 
	`mm≠
(0, 
size
, 
PROT_READ
 | 
PROT_WRITE
, 
MAP_PRIVATE
 | 
MAP_ANONYMOUS
, -1, 0);

83 
mm≠_w©îm¨k
 = 
ªs
 + 
size
;

85 #i‡
DBG2


86 
	`dl_¥ötf
("iyb: big chunk mm≠ed 0x%012Œx - 0x%012Œx.\n", 
ªs
,Ñes+
size
);

88  
ªs
;

90  
	`mm≠
(0, 
size
, 
PROT_READ
 | 
PROT_WRITE
, 
MAP_PRIVATE
 | 
MAP_ANONYMOUS
, -1, 0);

92 
	}
}

94 
ölöe
 
	$ˇŒ_munm≠
(*
p
, 
size_t
 
size
) {

95  
	`munm≠
(
p
, 
size
);

96 
	}
}

98 
ölöe
 *
	$ˇŒ_mªm≠
(*
ﬁd_addªss
, 
size_t
 
ﬁd_size
, size_à
√w_size
, 
Êags
) {

99 #i‡!
	`deföed
(
__APPLE__
)

100  
	`mªm≠
(
ﬁd_addªss
, 
ﬁd_size
, 
√w_size
, 
Êags
);

102 (Ë
ﬁd_addªss
;

103 (Ë
ﬁd_size
;

104 (Ë
√w_size
;

105 (Ë
Êags
;

106  
MFAIL
;

108 
	}
}

110 
	gmÆloc_°©e
;

111 
	gmÆloc_chunk
;

113 *
mm≠_Æloc
(
mÆloc_°©e
 *
°©e
, 
size_t
 
size
);

115 
mÆloc_chunk
 *
mm≠_ªsize
(
mÆloc_°©e
 *
°©e
, mÆloc_chunk *
ﬁd_p
, 
size_t
 
size
, 
Êags
);

117 *
sys_Æloc
(
mÆloc_°©e
 *
°©e
, 
size_t
 
size
);

119 
sys_åim
(
mÆloc_°©e
 *
°©e
, 
size_t
 
∑d
);

121 
size_t
 
ªÀa£_unu£d_£gmíts
(
mÆloc_°©e
 *
°©e
);

124 
ªÀa£_exhau°ed_£gmít
(
mÆloc_°©e
 *
°©e
, 
mÆloc_£gmít
* 
£gmít
);

126 
ª∂a˚_ªÀa£d_£gmít
(
mÆloc_°©e
 *
°©e
, 
mÆloc_£gmít
* 
p£g
, mÆloc_£gmít* 
n£g
);

128 
ªÀa£_exhau°ed_chunk
(
mÆloc_°©e
 *
°©e
, 
mÆloc_£gmít
* 
£gmít
, 
mÆloc_chunk
* 
¥ev
, * 
ba£
, 
size_t
 
size
);

	@redblack.h

1 #i‚de‡
TMTE_REDBLACK_H


2 
	#TMTE_REDBLACK_H


	)

4 
	~<sys/ty≥s.h
>

5 
	~"c⁄fig.h
"

6 
	~"chunk.h
"

7 
	~"°©e.h
"

28 
	#RED
 0

	)

29 
	#BLACK
 1

	)

31 
	#UNMAP_UNIT_POWER
 ((
size_t
)12)

	)

32 
	#UNMAP_UNIT
 (
size_t
)((size_t)1<<
UNMAP_UNIT_POWER
)

	)

35 
	#ENCODE_BIT
 ((
size_t
)1)<<63

	)

36 
	#ENCODE_MASK
 (~((
size_t
)
ENCODE_BIT
))

	)

37 
	#COLOR_BIT
 (((
size_t
)1)<<62)

	)

38 
	#COLOR_MASK
 (~((
size_t
)
COLOR_BIT
))

	)

41 
	#LR_MASK
 ((
size_t
)-1 << 48)

	)

42 
	#LR_BITS
 (~((
size_t
)
LR_MASK
))

	)

43 
	#EXH_BITS
 (
LR_MASK
)

	)

44 
	#EXH_MASK
 (
LR_BITS
)

	)

46 
	#GET_ENC
(
n
)\

47 ()((*(
size_t
*)(
n
Ë& 
ENCODE_BIT
Ë>> 63)

	)

49 
	#SET_ENC
(
n
, 
c
)\

50 (*(
size_t
*)(
n
)Ë(*(size_t*)“Ë& 
ENCODE_MASK
Ë| ((size_t)
c
<<63)

	)

52 
	#GET_COLOR
(
n
)\

53 ()((*(
size_t
*)(
n
Ë& 
COLOR_BIT
Ë>> 62)

	)

55 
	#SET_COLOR
(
n
, 
c
)\

56 (*(
size_t
*)(
n
)Ë(*(size_t*)“Ë& 
COLOR_MASK
Ë| ((size_t)
c
<<62)

	)

58 
	#GET_KEY
(
n
)\

59 (((
size_t
)
n
)>>
UNMAP_UNIT_POWER
)

	)

64 
	#GET_EXH
(
n
)\

65 (
size_t
Ë––(size_tË((
n
)->
right
Ë& 
EXH_BITS
)>>48)

	)

69 
	#SET_EXH
(
n
, 
v
)\

70 (
n
)->
right
 = (
node
 *Ë–((
size_t
)(“)->rightË& 
EXH_MASK
Ë| (((size_t)
v
)<<48Ë)

	)

82 
	#SET_L
(
n
, 
l
)\

83 ((
node
 *)
n
)->
À·
 = (((
size_t
)((nodê*Í)->À·Ë& 
LR_MASK
 )| ((size_t)
l
)

	)

87 
	#SET_R
(
n
, 
r
)\

88 ((
node
 *)
n
)->
right
 = (((
size_t
)((nodê*Í)->rightË& 
LR_MASK
 )|((size_t)
r
)

	)

91 
	#GET_L
(
n
)\

92 (((
size_t
Ë–(
n
)->
À·
ËË& 
LR_BITS
)

	)

93 
	#GET_R
(
n
)\

94 –((
size_t
)((
n
)->
right
)Ë& 
LR_BITS
)

	)

96 
	snode
{

97 
node
 *
	mÀ·
;

98 
node
 *
	mright
;

99 
node
 *
	m∑ª¡
;

102 
	ssmÆl_node
{

103 
node
 *
	mÀ·
;

104 
node
 *
	mright
;

109 
node
* 
GET_P
(node* 
n
);

110 
SET_P
(
node
* 
n
, node* 
p
);

113 
node
 *
	gROOT
;

114 
node
 *
	gNILL
;

115 
node
 
	gglobÆ_node
;

117 
ölöe
 
	$öô_ªdbœck_åì
(){

118 
	`SET_COLOR
(&
globÆ_node
, 
BLACK
);

120 
NILL
 = &
globÆ_node
;

123 
ROOT
 = 
NILL
;

158 
	}
}

160 
À·_rŸ©e
(
node
 *
x
);

161 
right_rŸ©e
(
node
 *
x
);

162 
åì_¥öt
(
node
 *
x
, 
•a˚
);

163 
ªd_bœck_ö£π
(
size_t
 
key
, size_à
exh
, size_à
íc
, 
node
 *
z
);

164 
ªd_bœck_ö£π_fixup
(
node
 *
z
);

165 
node
 *
åì_£¨ch
(
size_t
 
key
);

166 
node
 *
∑ª¡_£¨ch
(
size_t
 
key
);

167 
∑ª¡_£¨ch_™d_migøã
(
size_t
 
key
, 
node
 *
√w_node
);

168 
node
 *
åì_möimum
(nodê*
x
);

169 
ªd_bœck_å™•œ¡
(
node
 *
u
, nodê*
v
);

170 
ªd_bœck_dñëe
(
node
 *
z
);

171 
ªd_bœck_dñëe_fixup
(
node
 *
x
);

173 
size_t
 
övÆid©e_chunk
(
mÆloc_°©e
* 
m
, 
mÆloc_chunk
* 
chunk
);

175 #i‡
DBG


176 
num_mm≠
;

	@sbrk.h

1 #i‚de‡
DLALLOC_SBRK_H


2 
	#DLALLOC_SBRK_H


	)

4 
	~<sys/ty≥s.h
>

6 *
emuœã_sbrk
(
ssize_t
 
ö¸emít
);

	@segment.h

1 #i‚de‡
MALLOC_SEGMENT_H


2 
	#MALLOC_SEGMENT_H


	)

4 
	~"c⁄fig.h
"

61 
	smÆloc_£gmít
 {

62 *
	mba£
;

63 
size_t
 
	msize
;

64 
mÆloc_£gmít
 *
	m√xt
;

65 
Êag_t
 
	mÊags
;

68 
size_t
 
	mbœckli°ed_size
;

71 
ölöe
 
	$is_mm≠≥d_£gmít
(
mÆloc_£gmít
 *
£gmít
) {

72  
£gmít
->
Êags
 & 
USE_MMAP_BIT
;

73 
	}
}

75 
ölöe
 
	$is_exã∫_£gmít
(
mÆloc_£gmít
 *
£gmít
) {

76  
£gmít
->
Êags
 & 
EXTERN_BIT
;

77 
	}
}

79 
ölöe
 
	$£gmít_hﬁds
(
mÆloc_£gmít
 *
£gmít
, *
p
) {

80  
£gmít
->
ba£
 <(*Ë
p
 && (*Ë∞< segmít->ba£ + segmít->
size
;

81 
	}
}

83 
mÆloc_£gmít
 *
£gmít_hﬁdög
(
mÆloc_°©e
 *
°©e
, *
p
);

85 
mÆloc_£gmít
 *
¥ev_£gmít
(
mÆloc_°©e
 *
°©e
, mÆloc_£gmít* 
cuº
);

87 
has_£gmít_lök
(
mÆloc_°©e
 *
°©e
, 
mÆloc_£gmít
 *
£gmít
);

89 
u∆ök_£gmít
(
mÆloc_°©e
* 
°©e
, 
mÆloc_£gmít
* 
£gmít_hﬁdög
);

	@state.h

1 #i‚de‡
MALLOC_STATE_H


2 
	#MALLOC_STATE_H


	)

4 
	~"c⁄fig.h
"

5 
	~"chunk.h
"

6 
	~"£gmít.h
"

7 
	~"lock.h
"

8 
	~"ªdbœck.h
"

96 
	#NUM_SMALL_BINS
 (32U)

	)

97 
	#NUM_TREE_BINS
 (32U)

	)

98 
	#SMALL_BIN_SHIFT
 (3U)

	)

99 
	#TREE_BIN_SHIFT
 (8U)

	)

100 
	#MIN_LARGE_SIZE
 ((
size_t
Ë1 << 
TREE_BIN_SHIFT
)

	)

101 
	#MAX_SMALL_SIZE
 (
MIN_LARGE_SIZE
 - (
size_t
Ë1)

	)

102 
	#MAX_SMALL_REQUEST
 (
MAX_SMALL_SIZE
 - 
CHUNK_ALIGN_MASK
 - 
CHUNK_OVERHEAD
)

	)

106 
ölöe
 
	$is_smÆl
(
size_t
 
size
) {

107  (
size
 >> 
SMALL_BIN_SHIFT
Ë< 
NUM_SMALL_BINS
;

108 
	}
}

110 
ölöe
 
bö_ödex_t
 
	$smÆl_ödex
(
size_t
 
size
) {

111  (
bö_ödex_t
Ë(
size
 >> 
SMALL_BIN_SHIFT
);

112 
	}
}

114 
ölöe
 
size_t
 
	$smÆl_ödex_to_size
(
bö_ödex_t
 
ödex
) {

115  
ödex
 << 
SMALL_BIN_SHIFT
;

116 
	}
}

119 
ölöe
 
bö_ödex_t
 
	$À·shi·_f‹_åì_ödex
(
bö_ödex_t
 
i
) {

120  
i
 =
NUM_TREE_BINS
 - 1 ? 0 : 
SIZE_T_BITSIZE
 - (
size_t
Ë1 - ((ò>> 1Ë+ 
TREE_BIN_SHIFT
 - 2);

121 
	}
}

124 
ölöe
 
bö_ödex_t
 
	$mösize_f‹_åì_ödex
(
bö_ödex_t
 
i
) {

125  ((
size_t
Ë1 << ((
i
 >> 1Ë+ 
TREE_BIN_SHIFT
))

126 | (((
size_t
Ë(
i
 & (size_tË1)Ë<< ((ò>> 1Ë+ 
TREE_BIN_SHIFT
 - 1));

127 
	}
}

129 
	smÆloc_°©e
 {

130 
bö_m≠_t
 
	msmÆl_m≠
;

131 
bö_m≠_t
 
	måì_m≠
;

132 
size_t
 
	mdv_size
;

133 
size_t
 
	mt›_size
;

134 *
	mÀa°_addr
;

135 
mÆloc_chunk
 *
	mdv
;

136 
mÆloc_chunk
 *
	mt›
;

137 
size_t
 
	måim_check
;

138 
size_t
 
	mªÀa£_checks
;

139 
size_t
 
	mmagic
;

140 
mÆloc_chunk
 *
	msmÆl_bös
[(
NUM_SMALL_BINS
 + 1) * 2];

141 
mÆloc_åì_chunk
 *
	måì_bös
[
NUM_TREE_BINS
];

142 
size_t
 
	mfoŸ¥öt
;

143 
size_t
 
	mmax_foŸ¥öt
;

144 
size_t
 
	mfoŸ¥öt_limô
;

145 
Êag_t
 
	mÊags
;

146 #i‡
USE_LOCKS


147 
MLOCK_T
 
	mmuãx
;

149 
mÆloc_£gmít
 
	m£gmít
;

151 
size_t
 
	mt›_cﬁ‹ed_size
;

154 
ölöe
 
	$is_öôülized
(
mÆloc_°©e
 *
°©e
) {

155  
°©e
->
t›
 != 0;

156 
	}
}

159 
ölöe
 
mÆloc_chunk
 *
	$smÆl_bö_©
(
mÆloc_°©e
 *
°©e
, 
bö_ödex_t
 
ödex
) {

160  (
mÆloc_chunk
 *Ë(*Ë&(
°©e
->
smÆl_bös
[
ödex
 << 1]);

161 
	}
}

163 
ölöe
 
mÆloc_åì_chunk
 **
	$åì_bö_©
(
mÆloc_°©e
 *
°©e
, 
bö_ödex_t
 
ödex
) {

164  &(
°©e
->
åì_bös
[
ödex
]);

165 
	}
}

168 
ölöe
 
bö_m≠_t
 
	$ödex_to_bô
(
bö_m≠_t
 
ödex
) {

169  (
bö_m≠_t
Ë1 << 
ödex
;

170 
	}
}

173 
ölöe
 
bö_m≠_t
 
	$m¨k_smÆl_m≠
(
mÆloc_°©e
 *
°©e
, 
bö_m≠_t
 
ödex
) {

174  
°©e
->
smÆl_m≠
 |
	`ödex_to_bô
(
ödex
);

175 
	}
}

178 
ölöe
 
bö_m≠_t
 
	$˛ór_smÆl_m≠
(
mÆloc_°©e
 *
°©e
, 
bö_m≠_t
 
ödex
) {

179  
°©e
->
smÆl_m≠
 &~
	`ödex_to_bô
(
ödex
);

180 
	}
}

182 
ölöe
 
	$smÆl_m≠_is_m¨ked
(
mÆloc_°©e
 *
°©e
, 
bö_ödex_t
 
ödex
) {

183  
°©e
->
smÆl_m≠
 & 
	`ödex_to_bô
(
ödex
);

184 
	}
}

186 
ölöe
 
bö_m≠_t
 
	$m¨k_åì_m≠
(
mÆloc_°©e
 *
°©e
, 
bö_m≠_t
 
ödex
) {

187  
°©e
->
åì_m≠
 |
	`ödex_to_bô
(
ödex
);

188 
	}
}

190 
ölöe
 
bö_m≠_t
 
	$˛ór_åì_m≠
(
mÆloc_°©e
 *
°©e
, 
bö_m≠_t
 
ödex
) {

191  
°©e
->
åì_m≠
 &~
	`ödex_to_bô
(
ödex
);

192 
	}
}

194 
ölöe
 
	$åì_m≠_is_m¨ked
(
mÆloc_°©e
 *
°©e
, 
bö_m≠_t
 
ödex
) {

195  
°©e
->
åì_m≠
 & 
	`ödex_to_bô
(
ödex
);

196 
	}
}

198 
ölöe
 
	$u£_mm≠
(
mÆloc_°©e
 *
°©e
) {

199  
°©e
->
Êags
 & 
USE_MMAP_BIT
;

200 
	}
}

202 
ölöe
 
	$íabÀ_mm≠
(
mÆloc_°©e
 *
°©e
) {

203 
°©e
->
Êags
 |
USE_MMAP_BIT
;

204 
	}
}

206 
ölöe
 
	$dißbÀ_mm≠
(
mÆloc_°©e
 *
°©e
) {

207 
°©e
->
Êags
 &~
USE_MMAP_BIT
;

208 
	}
}

210 
ölöe
 
	$u£_lock
(
mÆloc_°©e
 *
°©e
) {

211  
°©e
->
Êags
 & 
USE_LOCK_BIT
;

212 
	}
}

214 
ölöe
 
	$íabÀ_lock
(
mÆloc_°©e
 *
°©e
) {

215 
°©e
->
Êags
 |
USE_LOCK_BIT
;

216 
	}
}

218 
ölöe
 
	$dißbÀ_lock
(
mÆloc_°©e
 *
°©e
) {

219 
°©e
->
Êags
 &~
USE_LOCK_BIT
;

220 
	}
}

222 
ölöe
 
	$£t_lock
(
mÆloc_°©e
 *
°©e
, 
locked
) {

223 
°©e
->
Êags
 = 
locked
 ? (°©e->Êag†| 
USE_LOCK_BIT
) : (state->flags & ~USE_LOCK_BIT);

224 
	}
}

226 
ölöe
 
	$u£_n⁄c⁄tiguous
(
mÆloc_°©e
 *
°©e
) {

227  
°©e
->
Êags
 & 
USE_NONCONTIGUOUS_BIT
;

228 
	}
}

230 
ölöe
 
	$dißbÀ_c⁄tiguous
(
mÆloc_°©e
 *
°©e
) {

231 
°©e
->
Êags
 |
USE_NONCONTIGUOUS_BIT
;

232 
	}
}

234 
ölöe
 
	$should_åim
(
mÆloc_°©e
 *
°©e
, 
size_t
 
size
) {

235  
size
 > 
°©e
->
åim_check
;

236 
	}
}

238 
öô_t›
(
mÆloc_°©e
 *
°©e
, 
mÆloc_chunk
 *
chunk
, 
size_t
 
size
);

240 
öô_bös
(
mÆloc_°©e
 *
°©e
);

242 *
¥ïíd_Æloc
(
mÆloc_°©e
 *
°©e
, *
√w_ba£
, *
ﬁd_ba£
, 
size_t
 
nb
);

244 
add_£gmít
(
mÆloc_°©e
 *
°©e
, *
tba£
, 
size_t
 
tsize
, 
Êag_t
 
mm≠≥d
);

247 
bœckli°_chunk
(
mÆloc_°©e
 *
°©e
, 
mÆloc_chunk
* 
chunk
);

	@tmte.h

1 #i‚de‡
TMTE_DLMALLOC_H


2 
	#TMTE_DLMALLOC_H


	)

4 
	~<°döt.h
>

5 
	~<°ddef.h
>

6 #ifde‡
AARCH64


7 
	~<î∫o.h
>

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<uni°d.h
>

11 
	~<sys/auxv.h
>

13 
	#__USE_GNU


	)

14 
	~<sys/mm™.h
>

15 #ifde‡
AARCH64


16 
	~<sys/¥˘l.h
>

18 
	#SOFTBOUNDCETS_MMAP_FLAGS
 (
MAP_PRIVATE
|
MAP_ANONYMOUS
|
MAP_NORESERVE
)

	)

19 #unde‡
__USE_GNU


22 #i‚de‡
RISCV


23 * 
__mã_èg_mem
;

24 #ifde‡
AARCH64


25 
	#HWCAP2_MTE
 (1 << 18)

	)

26 
	#PROT_MTE
 (0x20)

	)

27 
	#PR_SET_TAGGED_ADDR_CTRL
 55

	)

28 
	#PR_GET_TAGGED_ADDR_CTRL
 56

	)

29 
	#PR_TAGGED_ADDR_ENABLE
 (1UL << 0)

	)

30 
	#PR_MTE_TCF_SHIFT
 1

	)

31 
	#PR_MTE_TCF_NONE
 (0UL << 
PR_MTE_TCF_SHIFT
)

	)

32 
	#PR_MTE_TCF_SYNC
 (1UL << 
PR_MTE_TCF_SHIFT
)

	)

33 
	#PR_MTE_TCF_ASYNC
 (2UL << 
PR_MTE_TCF_SHIFT
)

	)

34 
	#PR_MTE_TCF_MASK
 (3UL << 
PR_MTE_TCF_SHIFT
)

	)

35 
	#PR_MTE_TAG_SHIFT
 3

	)

36 
	#PR_MTE_TAG_MASK
 (0xffffUL << 
PR_MTE_TAG_SHIFT
)

	)

40 #ifde‡
RISCV


41 
ölöe
 
	$lﬂd_èg
(*
addr
) {

42 
rv
 = 32;

43 
asm
 volatile ("ltag %0, 0(%1)"

44 :"Ù"(
rv
)

45 :"r"(
addr
)

47  
rv
;

48 
	}
}

51 
ölöe
 
	$°‹e_èg
(*
addr
, 
èg
) {

52 
asm
 volatile ("stag %0, 0(%1)"

54 :"r"(
èg
), "r"(
addr
)

56 
	}
}

59 #ifde‡
AARCH64


63 
	#ö£π_øndom_èg
(
±r
) ({ \

64 
uöt64_t
 
__vÆ
; \

65 
	`asm
("úg %0, %1" : "Ù" (
__vÆ
Ë: "r" (
±r
)); \

66 
__vÆ
; \

67 })

	)

72 
	#£t_èg
(
ègged_addr
) do { \

73 
asm
 vﬁ©ûe("°g %0, [%0]" : : "r" (
ègged_addr
) : "memory"); \

74 } 0)

	)

77 
ölöe
 
	$mã_öô
(){

78 #ifde‡
AARCH64


79 
hwˇp2
 = 
	`gëauxvÆ
(
AT_HWCAP2
);

82 if(!(
hwˇp2
 & 
HWCAP2_MTE
)){

83 
	`ab‹t
();

89 i‡(
	`¥˘l
(
PR_SET_TAGGED_ADDR_CTRL
,

90 
PR_TAGGED_ADDR_ENABLE
 | 
PR_MTE_TCF_SYNC
 | (0xff„ << 
PR_MTE_TAG_SHIFT
),

92 
	`≥º‹
("prctl() failed");

93 
	`ab‹t
();

97 
__mã_èg_mem
 = (*Ë
	`mm≠
(0, 0x0000100000000000, 
PROT_MTE
| 
PROT_READ
|
PROT_WRITE
, 
SOFTBOUNDCETS_MMAP_FLAGS
, -1, 0);

99 if(
__mã_èg_mem
 =
MAP_FAILED
){

100 
	`ab‹t
();

104 
__mã_èg_mem
 = (*Ë
	`mm≠
(0, 0x0000100000000000 , 
PROT_READ
 | 
PROT_WRITE
 , 
SOFTBOUNDCETS_MMAP_FLAGS
, -1, 0);

106 
	}
}

108 
ölöe
 
u_öt8_t
 
	$mã_cﬁ‹_èg2
(*
ba£
, 
size
, 
u_öt8_t
 
èg_num
) {

109 *
èg_°¨t
 = 
__mã_èg_mem
 + (()
ba£
 >> 4);

110 *
èg_íd
 = 
__mã_èg_mem
 + (()(
ba£
 + 
size
 - 1) >> 4);

111 *
cur
 = 
èg_°¨t
; cu∏<
èg_íd
; cur++)

112 *
cur
 = 
èg_num
;

114  
èg_num
;

116 
	}
}

117 
	gtŸÆ2
 = 0;

118 
	gtŸÆ3
 = 0;

119 
	ghundªd_mega
 = 1000000000;

120 
ölöe
 
u_öt8_t
 
	$mã_cﬁ‹_èg
(*
ba£
, 
size
, 
u_öt8_t
 
èg_num
) {

132 #i‡
	`deföed
–
RISCV
)

133 
Àngth
 = ()
size
 / 2;

134 *
cur
 = ()
ba£
 & 0xFFFFFFF0;

135 if(()
ba£
 & 0x0F)

136 
Àngth
 += 1;

141 *
èg_°¨t
 = 
__mã_èg_mem
 + (()
ba£
 >> 4);

142 *
èg_íd
 = 
__mã_èg_mem
 + (()(
ba£
 + 
size
 - 1) >> 4);

143 *
cur
 = 
èg_°¨t
; cu∏<
èg_íd
; cur++)

144 *
cur
 = 
èg_num
;

147  
èg_num
;

148 
	}
}

150 
ölöe
 
u_öt8_t
 
	$mã_lﬂd_èg
(* 
ba£
, 
size
){

151 #ifde‡
RISCV


152 
ba£_èg
 = 
	`lﬂd_èg
(
ba£
);

154 
ba£_èg
 = *(
__mã_èg_mem
 + (()
ba£
 >> 4));

156 i‡(
ba£_èg
)

157  
ba£_èg
;

160 
	}
}

	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/bits/auxv.h

20 
	#AT_NULL
 0

	)

21 
	#AT_IGNORE
 1

	)

22 
	#AT_EXECFD
 2

	)

23 
	#AT_PHDR
 3

	)

24 
	#AT_PHENT
 4

	)

25 
	#AT_PHNUM
 5

	)

26 
	#AT_PAGESZ
 6

	)

27 
	#AT_BASE
 7

	)

28 
	#AT_FLAGS
 8

	)

29 
	#AT_ENTRY
 9

	)

30 
	#AT_NOTELF
 10

	)

31 
	#AT_UID
 11

	)

32 
	#AT_EUID
 12

	)

33 
	#AT_GID
 13

	)

34 
	#AT_EGID
 14

	)

35 
	#AT_CLKTCK
 17

	)

38 
	#AT_PLATFORM
 15

	)

39 
	#AT_HWCAP
 16

	)

44 
	#AT_FPUCW
 18

	)

47 
	#AT_DCACHEBSIZE
 19

	)

48 
	#AT_ICACHEBSIZE
 20

	)

49 
	#AT_UCACHEBSIZE
 21

	)

53 
	#AT_IGNOREPPC
 22

	)

55 
	#AT_SECURE
 23

	)

57 
	#AT_BASE_PLATFORM
 24

	)

59 
	#AT_RANDOM
 25

	)

61 
	#AT_HWCAP2
 26

	)

64 
	#AT_EXECFN
 31

	)

68 
	#AT_SYSINFO
 32

	)

69 
	#AT_SYSINFO_EHDR
 33

	)

73 
	#AT_L1I_CACHESHAPE
 34

	)

74 
	#AT_L1D_CACHESHAPE
 35

	)

75 
	#AT_L2_CACHESHAPE
 36

	)

76 
	#AT_L3_CACHESHAPE
 37

	)

	@/usr/include/bits/confname.h

19 #i‚de‡
_UNISTD_H


26 
	m_PC_LINK_MAX
,

27 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

28 
	m_PC_MAX_CANON
,

29 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

30 
	m_PC_MAX_INPUT
,

31 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

32 
	m_PC_NAME_MAX
,

33 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

34 
	m_PC_PATH_MAX
,

35 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

36 
	m_PC_PIPE_BUF
,

37 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

38 
	m_PC_CHOWN_RESTRICTED
,

39 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

40 
	m_PC_NO_TRUNC
,

41 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

42 
	m_PC_VDISABLE
,

43 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

44 
	m_PC_SYNC_IO
,

45 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

46 
	m_PC_ASYNC_IO
,

47 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

48 
	m_PC_PRIO_IO
,

49 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

50 
	m_PC_SOCK_MAXBUF
,

51 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

52 
	m_PC_FILESIZEBITS
,

53 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

54 
	m_PC_REC_INCR_XFER_SIZE
,

55 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

56 
	m_PC_REC_MAX_XFER_SIZE
,

57 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

58 
	m_PC_REC_MIN_XFER_SIZE
,

59 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

60 
	m_PC_REC_XFER_ALIGN
,

61 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

62 
	m_PC_ALLOC_SIZE_MIN
,

63 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

64 
	m_PC_SYMLINK_MAX
,

65 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

66 
	m_PC_2_SYMLINKS


67 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

73 
	m_SC_ARG_MAX
,

74 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

75 
	m_SC_CHILD_MAX
,

76 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

77 
	m_SC_CLK_TCK
,

78 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

79 
	m_SC_NGROUPS_MAX
,

80 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

81 
	m_SC_OPEN_MAX
,

82 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

83 
	m_SC_STREAM_MAX
,

84 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

85 
	m_SC_TZNAME_MAX
,

86 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

87 
	m_SC_JOB_CONTROL
,

88 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

89 
	m_SC_SAVED_IDS
,

90 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

91 
	m_SC_REALTIME_SIGNALS
,

92 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

93 
	m_SC_PRIORITY_SCHEDULING
,

94 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

95 
	m_SC_TIMERS
,

96 
	#_SC_TIMERS
 
_SC_TIMERS


	)

97 
	m_SC_ASYNCHRONOUS_IO
,

98 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

99 
	m_SC_PRIORITIZED_IO
,

100 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

101 
	m_SC_SYNCHRONIZED_IO
,

102 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

103 
	m_SC_FSYNC
,

104 
	#_SC_FSYNC
 
_SC_FSYNC


	)

105 
	m_SC_MAPPED_FILES
,

106 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

107 
	m_SC_MEMLOCK
,

108 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

109 
	m_SC_MEMLOCK_RANGE
,

110 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

111 
	m_SC_MEMORY_PROTECTION
,

112 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

113 
	m_SC_MESSAGE_PASSING
,

114 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

115 
	m_SC_SEMAPHORES
,

116 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

117 
	m_SC_SHARED_MEMORY_OBJECTS
,

118 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

119 
	m_SC_AIO_LISTIO_MAX
,

120 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

121 
	m_SC_AIO_MAX
,

122 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

123 
	m_SC_AIO_PRIO_DELTA_MAX
,

124 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

125 
	m_SC_DELAYTIMER_MAX
,

126 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

127 
	m_SC_MQ_OPEN_MAX
,

128 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

129 
	m_SC_MQ_PRIO_MAX
,

130 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

131 
	m_SC_VERSION
,

132 
	#_SC_VERSION
 
_SC_VERSION


	)

133 
	m_SC_PAGESIZE
,

134 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

135 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

136 
	m_SC_RTSIG_MAX
,

137 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

138 
	m_SC_SEM_NSEMS_MAX
,

139 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

140 
	m_SC_SEM_VALUE_MAX
,

141 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

142 
	m_SC_SIGQUEUE_MAX
,

143 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

144 
	m_SC_TIMER_MAX
,

145 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

149 
	m_SC_BC_BASE_MAX
,

150 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

151 
	m_SC_BC_DIM_MAX
,

152 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

153 
	m_SC_BC_SCALE_MAX
,

154 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

155 
	m_SC_BC_STRING_MAX
,

156 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

157 
	m_SC_COLL_WEIGHTS_MAX
,

158 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

159 
	m_SC_EQUIV_CLASS_MAX
,

160 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

161 
	m_SC_EXPR_NEST_MAX
,

162 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

163 
	m_SC_LINE_MAX
,

164 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

165 
	m_SC_RE_DUP_MAX
,

166 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

167 
	m_SC_CHARCLASS_NAME_MAX
,

168 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

170 
	m_SC_2_VERSION
,

171 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

172 
	m_SC_2_C_BIND
,

173 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

174 
	m_SC_2_C_DEV
,

175 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

176 
	m_SC_2_FORT_DEV
,

177 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

178 
	m_SC_2_FORT_RUN
,

179 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

180 
	m_SC_2_SW_DEV
,

181 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

182 
	m_SC_2_LOCALEDEF
,

183 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

185 
	m_SC_PII
,

186 
	#_SC_PII
 
_SC_PII


	)

187 
	m_SC_PII_XTI
,

188 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

189 
	m_SC_PII_SOCKET
,

190 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

191 
	m_SC_PII_INTERNET
,

192 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

193 
	m_SC_PII_OSI
,

194 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

195 
	m_SC_POLL
,

196 
	#_SC_POLL
 
_SC_POLL


	)

197 
	m_SC_SELECT
,

198 
	#_SC_SELECT
 
_SC_SELECT


	)

199 
	m_SC_UIO_MAXIOV
,

200 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

201 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

202 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

203 
	m_SC_PII_INTERNET_STREAM
,

204 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

205 
	m_SC_PII_INTERNET_DGRAM
,

206 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

207 
	m_SC_PII_OSI_COTS
,

208 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

209 
	m_SC_PII_OSI_CLTS
,

210 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

211 
	m_SC_PII_OSI_M
,

212 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

213 
	m_SC_T_IOV_MAX
,

214 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

217 
	m_SC_THREADS
,

218 
	#_SC_THREADS
 
_SC_THREADS


	)

219 
	m_SC_THREAD_SAFE_FUNCTIONS
,

220 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

221 
	m_SC_GETGR_R_SIZE_MAX
,

222 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

223 
	m_SC_GETPW_R_SIZE_MAX
,

224 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

225 
	m_SC_LOGIN_NAME_MAX
,

226 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

227 
	m_SC_TTY_NAME_MAX
,

228 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

229 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

230 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

231 
	m_SC_THREAD_KEYS_MAX
,

232 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

233 
	m_SC_THREAD_STACK_MIN
,

234 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

235 
	m_SC_THREAD_THREADS_MAX
,

236 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

237 
	m_SC_THREAD_ATTR_STACKADDR
,

238 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

239 
	m_SC_THREAD_ATTR_STACKSIZE
,

240 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

241 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

242 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

243 
	m_SC_THREAD_PRIO_INHERIT
,

244 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

245 
	m_SC_THREAD_PRIO_PROTECT
,

246 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

247 
	m_SC_THREAD_PROCESS_SHARED
,

248 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

250 
	m_SC_NPROCESSORS_CONF
,

251 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

252 
	m_SC_NPROCESSORS_ONLN
,

253 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

254 
	m_SC_PHYS_PAGES
,

255 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

256 
	m_SC_AVPHYS_PAGES
,

257 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

258 
	m_SC_ATEXIT_MAX
,

259 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

260 
	m_SC_PASS_MAX
,

261 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

263 
	m_SC_XOPEN_VERSION
,

264 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

265 
	m_SC_XOPEN_XCU_VERSION
,

266 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

267 
	m_SC_XOPEN_UNIX
,

268 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

269 
	m_SC_XOPEN_CRYPT
,

270 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

271 
	m_SC_XOPEN_ENH_I18N
,

272 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

273 
	m_SC_XOPEN_SHM
,

274 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

276 
	m_SC_2_CHAR_TERM
,

277 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

278 
	m_SC_2_C_VERSION
,

279 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

280 
	m_SC_2_UPE
,

281 
	#_SC_2_UPE
 
_SC_2_UPE


	)

283 
	m_SC_XOPEN_XPG2
,

284 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

285 
	m_SC_XOPEN_XPG3
,

286 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

287 
	m_SC_XOPEN_XPG4
,

288 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

290 
	m_SC_CHAR_BIT
,

291 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

292 
	m_SC_CHAR_MAX
,

293 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

294 
	m_SC_CHAR_MIN
,

295 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

296 
	m_SC_INT_MAX
,

297 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

298 
	m_SC_INT_MIN
,

299 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

300 
	m_SC_LONG_BIT
,

301 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

302 
	m_SC_WORD_BIT
,

303 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

304 
	m_SC_MB_LEN_MAX
,

305 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

306 
	m_SC_NZERO
,

307 
	#_SC_NZERO
 
_SC_NZERO


	)

308 
	m_SC_SSIZE_MAX
,

309 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

310 
	m_SC_SCHAR_MAX
,

311 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

312 
	m_SC_SCHAR_MIN
,

313 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

314 
	m_SC_SHRT_MAX
,

315 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

316 
	m_SC_SHRT_MIN
,

317 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

318 
	m_SC_UCHAR_MAX
,

319 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

320 
	m_SC_UINT_MAX
,

321 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

322 
	m_SC_ULONG_MAX
,

323 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

324 
	m_SC_USHRT_MAX
,

325 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

327 
	m_SC_NL_ARGMAX
,

328 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

329 
	m_SC_NL_LANGMAX
,

330 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

331 
	m_SC_NL_MSGMAX
,

332 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

333 
	m_SC_NL_NMAX
,

334 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

335 
	m_SC_NL_SETMAX
,

336 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

337 
	m_SC_NL_TEXTMAX
,

338 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

340 
	m_SC_XBS5_ILP32_OFF32
,

341 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

342 
	m_SC_XBS5_ILP32_OFFBIG
,

343 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

344 
	m_SC_XBS5_LP64_OFF64
,

345 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

346 
	m_SC_XBS5_LPBIG_OFFBIG
,

347 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

349 
	m_SC_XOPEN_LEGACY
,

350 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

351 
	m_SC_XOPEN_REALTIME
,

352 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

353 
	m_SC_XOPEN_REALTIME_THREADS
,

354 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

356 
	m_SC_ADVISORY_INFO
,

357 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

358 
	m_SC_BARRIERS
,

359 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

360 
	m_SC_BASE
,

361 
	#_SC_BASE
 
_SC_BASE


	)

362 
	m_SC_C_LANG_SUPPORT
,

363 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

364 
	m_SC_C_LANG_SUPPORT_R
,

365 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

366 
	m_SC_CLOCK_SELECTION
,

367 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

368 
	m_SC_CPUTIME
,

369 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

370 
	m_SC_THREAD_CPUTIME
,

371 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

372 
	m_SC_DEVICE_IO
,

373 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

374 
	m_SC_DEVICE_SPECIFIC
,

375 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

376 
	m_SC_DEVICE_SPECIFIC_R
,

377 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

378 
	m_SC_FD_MGMT
,

379 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

380 
	m_SC_FIFO
,

381 
	#_SC_FIFO
 
_SC_FIFO


	)

382 
	m_SC_PIPE
,

383 
	#_SC_PIPE
 
_SC_PIPE


	)

384 
	m_SC_FILE_ATTRIBUTES
,

385 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

386 
	m_SC_FILE_LOCKING
,

387 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

388 
	m_SC_FILE_SYSTEM
,

389 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

390 
	m_SC_MONOTONIC_CLOCK
,

391 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

392 
	m_SC_MULTI_PROCESS
,

393 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

394 
	m_SC_SINGLE_PROCESS
,

395 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

396 
	m_SC_NETWORKING
,

397 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

398 
	m_SC_READER_WRITER_LOCKS
,

399 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

400 
	m_SC_SPIN_LOCKS
,

401 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

402 
	m_SC_REGEXP
,

403 
	#_SC_REGEXP
 
_SC_REGEXP


	)

404 
	m_SC_REGEX_VERSION
,

405 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

406 
	m_SC_SHELL
,

407 
	#_SC_SHELL
 
_SC_SHELL


	)

408 
	m_SC_SIGNALS
,

409 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

410 
	m_SC_SPAWN
,

411 
	#_SC_SPAWN
 
_SC_SPAWN


	)

412 
	m_SC_SPORADIC_SERVER
,

413 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

414 
	m_SC_THREAD_SPORADIC_SERVER
,

415 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

416 
	m_SC_SYSTEM_DATABASE
,

417 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

418 
	m_SC_SYSTEM_DATABASE_R
,

419 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

420 
	m_SC_TIMEOUTS
,

421 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

422 
	m_SC_TYPED_MEMORY_OBJECTS
,

423 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

424 
	m_SC_USER_GROUPS
,

425 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

426 
	m_SC_USER_GROUPS_R
,

427 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

428 
	m_SC_2_PBS
,

429 
	#_SC_2_PBS
 
_SC_2_PBS


	)

430 
	m_SC_2_PBS_ACCOUNTING
,

431 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

432 
	m_SC_2_PBS_LOCATE
,

433 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

434 
	m_SC_2_PBS_MESSAGE
,

435 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

436 
	m_SC_2_PBS_TRACK
,

437 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

438 
	m_SC_SYMLOOP_MAX
,

439 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

440 
	m_SC_STREAMS
,

441 
	#_SC_STREAMS
 
_SC_STREAMS


	)

442 
	m_SC_2_PBS_CHECKPOINT
,

443 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

445 
	m_SC_V6_ILP32_OFF32
,

446 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

447 
	m_SC_V6_ILP32_OFFBIG
,

448 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

449 
	m_SC_V6_LP64_OFF64
,

450 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

451 
	m_SC_V6_LPBIG_OFFBIG
,

452 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

454 
	m_SC_HOST_NAME_MAX
,

455 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

456 
	m_SC_TRACE
,

457 
	#_SC_TRACE
 
_SC_TRACE


	)

458 
	m_SC_TRACE_EVENT_FILTER
,

459 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

460 
	m_SC_TRACE_INHERIT
,

461 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

462 
	m_SC_TRACE_LOG
,

463 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

465 
	m_SC_LEVEL1_ICACHE_SIZE
,

466 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

467 
	m_SC_LEVEL1_ICACHE_ASSOC
,

468 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

469 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

470 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

471 
	m_SC_LEVEL1_DCACHE_SIZE
,

472 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

473 
	m_SC_LEVEL1_DCACHE_ASSOC
,

474 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

475 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

476 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

477 
	m_SC_LEVEL2_CACHE_SIZE
,

478 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

479 
	m_SC_LEVEL2_CACHE_ASSOC
,

480 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

481 
	m_SC_LEVEL2_CACHE_LINESIZE
,

482 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

483 
	m_SC_LEVEL3_CACHE_SIZE
,

484 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

485 
	m_SC_LEVEL3_CACHE_ASSOC
,

486 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

487 
	m_SC_LEVEL3_CACHE_LINESIZE
,

488 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

489 
	m_SC_LEVEL4_CACHE_SIZE
,

490 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

491 
	m_SC_LEVEL4_CACHE_ASSOC
,

492 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

493 
	m_SC_LEVEL4_CACHE_LINESIZE
,

494 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

497 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

498 
	#_SC_IPV6
 
_SC_IPV6


	)

499 
	m_SC_RAW_SOCKETS
,

500 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

502 
	m_SC_V7_ILP32_OFF32
,

503 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

504 
	m_SC_V7_ILP32_OFFBIG
,

505 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

506 
	m_SC_V7_LP64_OFF64
,

507 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

508 
	m_SC_V7_LPBIG_OFFBIG
,

509 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

511 
	m_SC_SS_REPL_MAX
,

512 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

514 
	m_SC_TRACE_EVENT_NAME_MAX
,

515 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

516 
	m_SC_TRACE_NAME_MAX
,

517 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

518 
	m_SC_TRACE_SYS_MAX
,

519 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

520 
	m_SC_TRACE_USER_EVENT_MAX
,

521 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

523 
	m_SC_XOPEN_STREAMS
,

524 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

526 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

527 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

528 
	m_SC_THREAD_ROBUST_PRIO_PROTECT


529 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

535 
	m_CS_PATH
,

536 
	#_CS_PATH
 
_CS_PATH


	)

538 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

539 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

540 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

542 
	m_CS_GNU_LIBC_VERSION
,

543 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

544 
	m_CS_GNU_LIBPTHREAD_VERSION
,

545 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

547 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

548 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

549 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

551 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

552 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

553 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

555 
	m_CS_LFS_CFLAGS
 = 1000,

556 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

557 
	m_CS_LFS_LDFLAGS
,

558 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

559 
	m_CS_LFS_LIBS
,

560 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

561 
	m_CS_LFS_LINTFLAGS
,

562 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

563 
	m_CS_LFS64_CFLAGS
,

564 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

565 
	m_CS_LFS64_LDFLAGS
,

566 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

567 
	m_CS_LFS64_LIBS
,

568 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

569 
	m_CS_LFS64_LINTFLAGS
,

570 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

572 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

573 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

574 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

575 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

576 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

577 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

578 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

579 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

580 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

581 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

582 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

583 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

584 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

585 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

586 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

587 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

588 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

589 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

590 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

591 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

592 
	m_CS_XBS5_LP64_OFF64_LIBS
,

593 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

594 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

595 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

596 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

597 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

598 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

599 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

600 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

601 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

602 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

603 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

605 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

606 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

607 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

608 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

609 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

610 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

611 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

612 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

613 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

614 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

615 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

616 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

617 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

618 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

619 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

620 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

621 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

622 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

623 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

624 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

625 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

626 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

627 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

628 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

629 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

630 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

631 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

632 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

633 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

634 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

635 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

636 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

638 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

639 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

640 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

641 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

642 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

643 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

644 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

645 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

646 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

647 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

648 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

649 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

650 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

651 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

652 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

653 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

654 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

655 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

656 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

657 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

658 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

659 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

660 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

661 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

662 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

663 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

664 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

665 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

666 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

667 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

668 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
,

669 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

671 
	m_CS_V6_ENV
,

672 
	#_CS_V6_ENV
 
_CS_V6_ENV


	)

673 
	m_CS_V7_ENV


674 
	#_CS_V7_ENV
 
_CS_V7_ENV


	)

	@/usr/include/bits/environments.h

18 #i‚de‡
_UNISTD_H


22 
	~<bôs/w‹dsize.h
>

42 #i‡
__WORDSIZE
 == 64

56 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

57 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

58 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

61 
	#_POSIX_V7_LP64_OFF64
 1

	)

62 
	#_POSIX_V6_LP64_OFF64
 1

	)

63 
	#_XBS5_LP64_OFF64
 1

	)

69 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

70 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

71 
	#_XBS5_ILP32_OFFBIG
 1

	)

73 #i‚de‡
__x86_64__


75 
	#_POSIX_V7_ILP32_OFF32
 1

	)

76 
	#_POSIX_V6_ILP32_OFF32
 1

	)

77 
	#_XBS5_ILP32_OFF32
 1

	)

95 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

96 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

97 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


98 
	#__ILP32_OFFBIG_CFLAGS
 "-mx32"

	)

99 
	#__ILP32_OFFBIG_LDFLAGS
 "-mx32"

	)

101 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

102 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

104 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

105 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/errno.h

19 #ifde‡
_ERRNO_H


21 #unde‡
EDOM


22 #unde‡
EILSEQ


23 #unde‡
ERANGE


24 
	~<löux/î∫o.h
>

27 
	#ENOTSUP
 
EOPNOTSUPP


	)

30 #i‚de‡
ECANCELED


31 
	#ECANCELED
 125

	)

35 #i‚de‡
EOWNERDEAD


36 
	#EOWNERDEAD
 130

	)

37 
	#ENOTRECOVERABLE
 131

	)

40 #i‚de‡
ERFKILL


41 
	#ERFKILL
 132

	)

44 #i‚de‡
EHWPOISON


45 
	#EHWPOISON
 133

	)

48 #i‚de‡
__ASSEMBLER__


50 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

52 #i‡!
deföed
 
_LIBC
 || deföed 
_LIBC_REENTRANT


54 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

59 #i‡!
deföed
 
_ERRNO_H
 && deföed 
__√ed_Em©h


63 
	#EDOM
 33

	)

64 
	#EILSEQ
 84

	)

65 
	#ERANGE
 34

	)

	@/usr/include/bits/fcntl.h

19 #i‚de‡
_FCNTL_H


23 #ifde‡
__x86_64__


24 
	#__O_LARGEFILE
 0

	)

27 #ifde‡
__x86_64__


29 
	#F_GETLK64
 5

	)

30 
	#F_SETLK64
 6

	)

31 
	#F_SETLKW64
 7

	)

35 
	sÊock


37 
	ml_ty≥
;

38 
	ml_whí˚
;

39 #i‚de‡
__USE_FILE_OFFSET64


40 
__off_t
 
	ml_°¨t
;

41 
__off_t
 
	ml_Àn
;

43 
__off64_t
 
	ml_°¨t
;

44 
__off64_t
 
	ml_Àn
;

46 
__pid_t
 
	ml_pid
;

49 #ifde‡
__USE_LARGEFILE64


50 
	sÊock64


52 
	ml_ty≥
;

53 
	ml_whí˚
;

54 
__off64_t
 
	ml_°¨t
;

55 
__off64_t
 
	ml_Àn
;

56 
__pid_t
 
	ml_pid
;

61 
	~<bôs/f˙é-löux.h
>

	@/usr/include/bits/fcntl2.h

19 #i‚def 
_FCNTL_H


25 #i‚de‡
__USE_FILE_OFFSET64


26 
	$__›í_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

27 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

28 
›í
Ë
	`__n⁄nuŒ
 ((1));

30 
	`__REDIRECT
 (
__›í_2
, (c⁄° *
__∑th
, 
__oÊag
),

31 
__›í64_2
Ë
	`__n⁄nuŒ
 ((1));

32 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

33 
›í64
Ë
	`__n⁄nuŒ
 ((1));

35 
	`__îr‹de˛
 (
__›í_too_m™y_¨gs
,

37 
	`__îr‹de˛
 (
__›í_missög_mode
,

40 
__f‹tify_fun˘i⁄
 

41 
	$›í
 (c⁄° *
__∑th
, 
__oÊag
, ...)

43 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

44 
	`__›í_too_m™y_¨gs
 ();

46 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

48 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

50 
	`__›í_missög_mode
 ();

51  
	`__›í_2
 (
__∑th
, 
__oÊag
);

53  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

56 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

57  
	`__›í_2
 (
__∑th
, 
__oÊag
);

59  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

60 
	}
}

63 #ifde‡
__USE_LARGEFILE64


64 
	$__›í64_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

65 
	`__REDIRECT
 (
__›í64_Æüs
, (c⁄° *
__∑th
, 
__oÊag
,

66 ...), 
›í64
Ë
	`__n⁄nuŒ
 ((1));

67 
	`__îr‹de˛
 (
__›í64_too_m™y_¨gs
,

69 
	`__îr‹de˛
 (
__›í64_missög_mode
,

72 
__f‹tify_fun˘i⁄
 

73 
	$›í64
 (c⁄° *
__∑th
, 
__oÊag
, ...)

75 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

76 
	`__›í64_too_m™y_¨gs
 ();

78 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

80 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

82 
	`__›í64_missög_mode
 ();

83  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

85  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

88 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

89  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

91  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

92 
	}
}

96 #ifde‡
__USE_ATFILE


97 #i‚de‡
__USE_FILE_OFFSET64


98 
	$__›í©_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

99 
	`__n⁄nuŒ
 ((2));

100 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

101 
__oÊag
, ...), 
›í©
)

102 
	`__n⁄nuŒ
 ((2));

104 
	`__REDIRECT
 (
__›í©_2
, (
__fd
, c⁄° *
__∑th
,

105 
__oÊag
), 
__›í©64_2
)

106 
	`__n⁄nuŒ
 ((2));

107 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

108 
__oÊag
, ...), 
›í©64
)

109 
	`__n⁄nuŒ
 ((2));

111 
	`__îr‹de˛
 (
__›í©_too_m™y_¨gs
,

113 
	`__îr‹de˛
 (
__›í©_missög_mode
,

116 
__f‹tify_fun˘i⁄
 

117 
	$›í©
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

119 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

120 
	`__›í©_too_m™y_¨gs
 ();

122 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

124 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

126 
	`__›í©_missög_mode
 ();

127  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

129  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

132 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

133  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

135  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

136 
	}
}

139 #ifde‡
__USE_LARGEFILE64


140 
	$__›í©64_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

141 
	`__n⁄nuŒ
 ((2));

142 
	`__REDIRECT
 (
__›í©64_Æüs
, (
__fd
, c⁄° *
__∑th
,

143 
__oÊag
, ...), 
›í©64
)

144 
	`__n⁄nuŒ
 ((2));

145 
	`__îr‹de˛
 (
__›í©64_too_m™y_¨gs
,

147 
	`__îr‹de˛
 (
__›í©64_missög_mode
,

150 
__f‹tify_fun˘i⁄
 

151 
	$›í©64
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

153 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

154 
	`__›í©64_too_m™y_¨gs
 ();

156 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

158 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

160 
	`__›í©64_missög_mode
 ();

161  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

163  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

166 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

167  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

169  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

170 
	}
}

	@/usr/include/bits/hwcap.h

19 #i‚de‡
_SYS_AUXV_H


	@/usr/include/bits/mman.h

19 #i‚de‡
_SYS_MMAN_H


27 #ifde‡
__USE_MISC


28 
	#MAP_32BIT
 0x40

	)

32 #ifde‡
__USE_MISC


33 
	#MAP_GROWSDOWN
 0x00100

	)

34 
	#MAP_DENYWRITE
 0x00800

	)

35 
	#MAP_EXECUTABLE
 0x01000

	)

36 
	#MAP_LOCKED
 0x02000

	)

37 
	#MAP_NORESERVE
 0x04000

	)

38 
	#MAP_POPULATE
 0x08000

	)

39 
	#MAP_NONBLOCK
 0x10000

	)

40 
	#MAP_STACK
 0x20000

	)

41 
	#MAP_HUGETLB
 0x40000

	)

45 
	~<bôs/mm™-löux.h
>

	@/usr/include/bits/posix_opt.h

19 #i‚def 
_BITS_POSIX_OPT_H


20 
	#_BITS_POSIX_OPT_H
 1

	)

23 
	#_POSIX_JOB_CONTROL
 1

	)

26 
	#_POSIX_SAVED_IDS
 1

	)

29 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

32 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

35 
	#_POSIX_FSYNC
 200809L

	)

38 
	#_POSIX_MAPPED_FILES
 200809L

	)

41 
	#_POSIX_MEMLOCK
 200809L

	)

44 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

47 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

50 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

54 
	#_POSIX_VDISABLE
 '\0'

	)

57 
	#_POSIX_NO_TRUNC
 1

	)

60 
	#_XOPEN_REALTIME
 1

	)

63 
	#_XOPEN_REALTIME_THREADS
 1

	)

66 
	#_XOPEN_SHM
 1

	)

69 
	#_POSIX_THREADS
 200809L

	)

72 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

73 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

76 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

79 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

82 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

85 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

89 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

91 #ifde‡
__USE_XOPEN2K8


93 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

96 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

100 
	#_POSIX_SEMAPHORES
 200809L

	)

103 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

106 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

107 
	#_POSIX_ASYNC_IO
 1

	)

109 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

111 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

114 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

117 
	#_LFS_LARGEFILE
 1

	)

118 
	#_LFS64_LARGEFILE
 1

	)

119 
	#_LFS64_STDIO
 1

	)

122 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

125 
	#_POSIX_CPUTIME
 0

	)

128 
	#_POSIX_THREAD_CPUTIME
 0

	)

131 
	#_POSIX_REGEXP
 1

	)

134 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

137 
	#_POSIX_SHELL
 1

	)

140 
	#_POSIX_TIMEOUTS
 200809L

	)

143 
	#_POSIX_SPIN_LOCKS
 200809L

	)

146 
	#_POSIX_SPAWN
 200809L

	)

149 
	#_POSIX_TIMERS
 200809L

	)

152 
	#_POSIX_BARRIERS
 200809L

	)

155 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

158 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

161 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

164 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

167 
	#_POSIX_ADVISORY_INFO
 200809L

	)

170 
	#_POSIX_IPV6
 200809L

	)

173 
	#_POSIX_RAW_SOCKETS
 200809L

	)

176 
	#_POSIX2_CHAR_TERM
 200809L

	)

179 
	#_POSIX_SPORADIC_SERVER
 -1

	)

180 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

183 
	#_POSIX_TRACE
 -1

	)

184 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

185 
	#_POSIX_TRACE_INHERIT
 -1

	)

186 
	#_POSIX_TRACE_LOG
 -1

	)

189 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

	@/usr/include/bits/pthreadtypes.h

18 #i‚de‡
_BITS_PTHREADTYPES_H


19 
	#_BITS_PTHREADTYPES_H
 1

	)

21 
	~<bôs/w‹dsize.h
>

23 #ifde‡
__x86_64__


24 #i‡
__WORDSIZE
 == 64

25 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

26 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

27 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

28 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

29 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

30 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

31 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

32 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

33 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

35 
	#__SIZEOF_PTHREAD_ATTR_T
 32

	)

36 
	#__SIZEOF_PTHREAD_MUTEX_T
 32

	)

37 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

38 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

39 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

40 
	#__SIZEOF_PTHREAD_RWLOCK_T
 44

	)

41 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

42 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

43 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

46 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

47 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

48 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

49 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

50 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

51 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

52 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

53 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

54 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

60 
	t±hªad_t
;

63 
	u±hªad_©å_t


65 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

66 
	m__Æign
;

68 #i‚de‡
__have_±hªad_©å_t


69 
±hªad_©å_t
 
	t±hªad_©å_t
;

70 
	#__have_±hªad_©å_t
 1

	)

74 #ifde‡
__x86_64__


75 
	s__±hªad_öã∫Æ_li°


77 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

78 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

79 } 
	t__±hªad_li°_t
;

81 
	s__±hªad_öã∫Æ_¶i°


83 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

84 } 
	t__±hªad_¶i°_t
;

92 
	s__±hªad_muãx_s


94 
	m__lock
;

95 
	m__cou¡
;

96 
	m__ow√r
;

97 #ifde‡
__x86_64__


98 
	m__nu£rs
;

102 
	m__köd
;

103 #ifde‡
__x86_64__


104 
	m__•ös
;

105 
	m__ñisi⁄
;

106 
__±hªad_li°_t
 
	m__li°
;

107 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

109 
	#__PTHREAD_SPINS
 0, 0

	)

111 
	m__nu£rs
;

112 
__exãnsi⁄__
 union

116 
	m__e•ös
;

117 
	m__ñisi⁄
;

118 
	#__•ös
 
__ñisi⁄_d©a
.
__e•ös


	)

119 
	#__ñisi⁄
 
__ñisi⁄_d©a
.
__ñisi⁄


	)

120 
	#__PTHREAD_SPINS
 { 0, 0 }

	)

121 } 
	m__ñisi⁄_d©a
;

122 
__±hªad_¶i°_t
 
	m__li°
;

125 } 
	m__d©a
;

126 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

127 
	m__Æign
;

128 } 
	t±hªad_muãx_t
;

132 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

133 
	m__Æign
;

134 } 
	t±hªad_muãx©å_t
;

143 
	m__lock
;

144 
	m__fuãx
;

145 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

146 
__exãnsi⁄__
 
	m__wakeup_£q
;

147 
__exãnsi⁄__
 
	m__wokí_£q
;

148 *
	m__muãx
;

149 
	m__nwaôîs
;

150 
	m__brﬂdˇ°_£q
;

151 } 
	m__d©a
;

152 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

153 
__exãnsi⁄__
 
	m__Æign
;

154 } 
	t±hªad_c⁄d_t
;

158 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

159 
	m__Æign
;

160 } 
	t±hªad_c⁄d©å_t
;

164 
	t±hªad_key_t
;

168 
	t±hªad_⁄˚_t
;

171 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


176 #ifde‡
__x86_64__


179 
	m__lock
;

180 
	m__ƒ_ªadîs
;

181 
	m__ªadîs_wakeup
;

182 
	m__wrôî_wakeup
;

183 
	m__ƒ_ªadîs_queued
;

184 
	m__ƒ_wrôîs_queued
;

185 
	m__wrôî
;

186 
	m__sh¨ed
;

187 sig√d 
	m__rwñisi⁄
;

188 #ifde‡ 
__ILP32__


189 
	m__∑d1
[3];

190 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0, { 0, 0, 0 }

	)

192 
	m__∑d1
[7];

193 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0, { 0, 0, 0, 0, 0, 0, 0 }

	)

195 
	m__∑d2
;

198 
	m__Êags
;

199 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

200 } 
	m__d©a
;

204 
	m__lock
;

205 
	m__ƒ_ªadîs
;

206 
	m__ªadîs_wakeup
;

207 
	m__wrôî_wakeup
;

208 
	m__ƒ_ªadîs_queued
;

209 
	m__ƒ_wrôîs_queued
;

212 
	m__Êags
;

213 
	m__sh¨ed
;

214 sig√d 
	m__rwñisi⁄
;

215 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0

	)

216 
	m__∑d2
;

217 
	m__wrôî
;

218 } 
	m__d©a
;

220 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

221 
	m__Æign
;

222 } 
	t±hªad_rwlock_t
;

226 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

227 
	m__Æign
;

228 } 
	t±hªad_rwlock©å_t
;

232 #ifde‡
__USE_XOPEN2K


234 vﬁ©ûê
	t±hªad_•ölock_t
;

241 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

242 
	m__Æign
;

243 } 
	t±hªad_b¨rõr_t
;

247 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

248 
	m__Æign
;

249 } 
	t±hªad_b¨rõøâr_t
;

253 #i‚de‡
__x86_64__


255 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/sched.h

20 #i‚de‡
__√ed_sched∑øm


22 #i‚de‡
_SCHED_H


28 
	#SCHED_OTHER
 0

	)

29 
	#SCHED_FIFO
 1

	)

30 
	#SCHED_RR
 2

	)

31 #ifde‡
__USE_GNU


32 
	#SCHED_BATCH
 3

	)

33 
	#SCHED_IDLE
 5

	)

35 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

38 #ifde‡
__USE_GNU


40 
	#CSIGNAL
 0x000000f‡

	)

41 
	#CLONE_VM
 0x00000100

	)

42 
	#CLONE_FS
 0x00000200

	)

43 
	#CLONE_FILES
 0x00000400

	)

44 
	#CLONE_SIGHAND
 0x00000800

	)

45 
	#CLONE_PTRACE
 0x00002000

	)

46 
	#CLONE_VFORK
 0x00004000

	)

48 
	#CLONE_PARENT
 0x00008000

	)

50 
	#CLONE_THREAD
 0x00010000

	)

51 
	#CLONE_NEWNS
 0x00020000

	)

52 
	#CLONE_SYSVSEM
 0x00040000

	)

53 
	#CLONE_SETTLS
 0x00080000

	)

54 
	#CLONE_PARENT_SETTID
 0x00100000

	)

56 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

58 
	#CLONE_DETACHED
 0x00400000

	)

59 
	#CLONE_UNTRACED
 0x00800000

	)

61 
	#CLONE_CHILD_SETTID
 0x01000000

	)

63 
	#CLONE_NEWUTS
 0x04000000

	)

64 
	#CLONE_NEWIPC
 0x08000000

	)

65 
	#CLONE_NEWUSER
 0x10000000

	)

66 
	#CLONE_NEWPID
 0x20000000

	)

67 
	#CLONE_NEWNET
 0x40000000

	)

68 
	#CLONE_IO
 0x80000000

	)

72 
	ssched_∑øm


74 
	m__sched_¥i‹ôy
;

77 
	g__BEGIN_DECLS


79 #ifde‡
__USE_GNU


81 
	$˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

82 
__Êags
, *
__¨g
, ...Ë
__THROW
;

85 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

88 
	$sched_gë˝u
 (Ë
__THROW
;

91 
	$£äs
 (
__fd
, 
__n°y≥
Ë
__THROW
;

95 
__END_DECLS


99 #i‡!
deföed
 
__deföed_sched∑øm
 \

100 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

101 
	#__deföed_sched∑øm
 1

	)

103 
	s__sched_∑øm


105 
__sched_¥i‹ôy
;

107 #unde‡
__√ed_sched∑øm


111 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


112 
	#__˝u_£t_t_deföed


	)

114 
	#__CPU_SETSIZE
 1024

	)

115 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

118 
__CPU_MASK_TYPE
 
	t__˝u_mask
;

121 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

122 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

127 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

128 } 
	t˝u_£t_t
;

131 #i‡
	`__GNUC_PREREQ
 (2, 91)

132 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

133 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

135 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

137 
size_t
 
__i
; \

138 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

139 
__˝u_mask
 *
__bôs
 = (
˝u£ç
)->__bits; \

140 
__i
 = 0; __ò< 
__imax
; ++__i) \

141 
__bôs
[
__i
] = 0; \

142 
	}
} 0)

	)

144 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

145 (
__exãnsi⁄__
 \

146 ({ 
size_t
 
__˝u
 = (
˝u
); \

147 
__˝u
 / 8 < (
£tsize
) \

148 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

149 |
	`__CPUMASK
 (
__˝u
)) \

150 : 0; }))

	)

151 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

152 (
__exãnsi⁄__
 \

153 ({ 
size_t
 
__˝u
 = (
˝u
); \

154 
__˝u
 / 8 < (
£tsize
) \

155 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

156 &~
	`__CPUMASK
 (
__˝u
)) \

157 : 0; }))

	)

158 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

159 (
__exãnsi⁄__
 \

160 ({ 
size_t
 
__˝u
 = (
˝u
); \

161 
__˝u
 / 8 < (
£tsize
) \

162 ? ((((c⁄° 
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

163 & 
	`__CPUMASK
 (
__˝u
))) != 0 \

164 : 0; }))

	)

166 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

167 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

169 #i‡
__GNUC_PREREQ
 (2, 91)

170 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

171 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

173 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

174 (
__exãnsi⁄__
 \

175 ({ c⁄° 
__˝u_mask
 *
__¨r1
 = (
˝u£ç1
)->
__bôs
; \

176 c⁄° 
__˝u_mask
 *
__¨r2
 = (
˝u£ç2
)->
__bôs
; \

177 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

178 
size_t
 
__i
; \

179 
__i
 = 0; __ò< 
__imax
; ++__i) \

180 i‡(
__¨r1
[
__i
] !
__¨r2
[__i]) \

182 
__i
 =
__imax
; }))

	)

185 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

186 (
__exãnsi⁄__
 \

187 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

188 c⁄° 
__˝u_mask
 *
__¨r1
 = (
§c£t1
)->
__bôs
; \

189 c⁄° 
__˝u_mask
 *
__¨r2
 = (
§c£t2
)->
__bôs
; \

190 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

191 
size_t
 
__i
; \

192 
__i
 = 0; __ò< 
__imax
; ++__i) \

193 ((
__˝u_mask
 *Ë
__de°
->
__bôs
)[
__i
] = 
__¨r1
[__i] 
›
 
__¨r2
[__i]; \

194 
__de°
; }))

	)

196 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

197 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË*  (
__˝u_mask
))

	)

198 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

199 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

201 
__BEGIN_DECLS


203 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

204 
__THROW
;

205 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

206 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

208 
__END_DECLS


	@/usr/include/bits/setjmp.h

19 #i‚de‡
_BITS_SETJMP_H


20 
	#_BITS_SETJMP_H
 1

	)

22 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


26 
	~<bôs/w‹dsize.h
>

28 #i‚de‡
_ASM


30 #i‡
__WORDSIZE
 == 64

31 
	t__jmp_buf
[8];

32 #ñi‡
deföed
 
__x86_64__


33 
__exãnsi⁄__
 
	t__jmp_buf
[8];

35 
	t__jmp_buf
[6];

	@/usr/include/bits/stat.h

18 #i‡!
deföed
 
_SYS_STAT_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_STAT_H


23 
	#_BITS_STAT_H
 1

	)

26 #i‚de‡
__x86_64__


27 
	#_STAT_VER_LINUX_OLD
 1

	)

28 
	#_STAT_VER_KERNEL
 1

	)

29 
	#_STAT_VER_SVR4
 2

	)

30 
	#_STAT_VER_LINUX
 3

	)

33 
	#_MKNOD_VER_LINUX
 1

	)

34 
	#_MKNOD_VER_SVR4
 2

	)

35 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

37 
	#_STAT_VER_KERNEL
 0

	)

38 
	#_STAT_VER_LINUX
 1

	)

41 
	#_MKNOD_VER_LINUX
 0

	)

44 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

46 
	s°©


48 
__dev_t
 
	m°_dev
;

49 #i‚de‡
__x86_64__


50 
	m__∑d1
;

52 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


53 
__öo_t
 
	m°_öo
;

55 
__öo_t
 
	m__°_öo
;

57 #i‚de‡
__x86_64__


58 
__mode_t
 
	m°_mode
;

59 
__∆ök_t
 
	m°_∆ök
;

61 
__∆ök_t
 
	m°_∆ök
;

62 
__mode_t
 
	m°_mode
;

64 
__uid_t
 
	m°_uid
;

65 
__gid_t
 
	m°_gid
;

66 #ifde‡
__x86_64__


67 
	m__∑d0
;

69 
__dev_t
 
	m°_rdev
;

70 #i‚de‡
__x86_64__


71 
	m__∑d2
;

73 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


74 
__off_t
 
	m°_size
;

76 
__off64_t
 
	m°_size
;

78 
__blksize_t
 
	m°_blksize
;

79 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


80 
__blk˙t_t
 
	m°_blocks
;

82 
__blk˙t64_t
 
	m°_blocks
;

84 #ifde‡
__USE_XOPEN2K8


91 
time•ec
 
	m°_©im
;

92 
time•ec
 
	m°_mtim
;

93 
time•ec
 
	m°_˘im
;

94 
	#°_©ime
 
°_©im
.
tv_£c


	)

95 
	#°_mtime
 
°_mtim
.
tv_£c


	)

96 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

98 
__time_t
 
	m°_©ime
;

99 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

100 
__time_t
 
	m°_mtime
;

101 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

102 
__time_t
 
	m°_˘ime
;

103 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

105 #ifde‡
__x86_64__


106 
__sysˇŒ_¶⁄g_t
 
	m__glibc_ª£rved
[3];

108 #i‚de‡
__USE_FILE_OFFSET64


109 
	m__glibc_ª£rved4
;

110 
	m__glibc_ª£rved5
;

112 
__öo64_t
 
	m°_öo
;

117 #ifde‡
__USE_LARGEFILE64


119 
	s°©64


121 
__dev_t
 
	m°_dev
;

122 #ifde‡
__x86_64__


123 
__öo64_t
 
	m°_öo
;

124 
__∆ök_t
 
	m°_∆ök
;

125 
__mode_t
 
	m°_mode
;

127 
	m__∑d1
;

128 
__öo_t
 
	m__°_öo
;

129 
__mode_t
 
	m°_mode
;

130 
__∆ök_t
 
	m°_∆ök
;

132 
__uid_t
 
	m°_uid
;

133 
__gid_t
 
	m°_gid
;

134 #ifde‡
__x86_64__


135 
	m__∑d0
;

136 
__dev_t
 
	m°_rdev
;

137 
__off_t
 
	m°_size
;

139 
__dev_t
 
	m°_rdev
;

140 
	m__∑d2
;

141 
__off64_t
 
	m°_size
;

143 
__blksize_t
 
	m°_blksize
;

144 
__blk˙t64_t
 
	m°_blocks
;

145 #ifde‡
__USE_XOPEN2K8


152 
time•ec
 
	m°_©im
;

153 
time•ec
 
	m°_mtim
;

154 
time•ec
 
	m°_˘im
;

156 
__time_t
 
	m°_©ime
;

157 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

158 
__time_t
 
	m°_mtime
;

159 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

160 
__time_t
 
	m°_˘ime
;

161 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

163 #ifde‡
__x86_64__


164 
__sysˇŒ_¶⁄g_t
 
	m__glibc_ª£rved
[3];

166 
__öo64_t
 
	m°_öo
;

172 
	#_STATBUF_ST_BLKSIZE


	)

173 
	#_STATBUF_ST_RDEV


	)

175 
	#_STATBUF_ST_NSEC


	)

179 
	#__S_IFMT
 0170000

	)

182 
	#__S_IFDIR
 0040000

	)

183 
	#__S_IFCHR
 0020000

	)

184 
	#__S_IFBLK
 0060000

	)

185 
	#__S_IFREG
 0100000

	)

186 
	#__S_IFIFO
 0010000

	)

187 
	#__S_IFLNK
 0120000

	)

188 
	#__S_IFSOCK
 0140000

	)

192 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

193 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

194 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

198 
	#__S_ISUID
 04000

	)

199 
	#__S_ISGID
 02000

	)

200 
	#__S_ISVTX
 01000

	)

201 
	#__S_IREAD
 0400

	)

202 
	#__S_IWRITE
 0200

	)

203 
	#__S_IEXEC
 0100

	)

205 #ifde‡
__USE_ATFILE


206 
	#UTIME_NOW
 ((1»<< 30Ë- 1l)

	)

207 
	#UTIME_OMIT
 ((1»<< 30Ë- 2l)

	)

	@/usr/include/bits/stdio-ldbl.h

19 #i‚de‡
_STDIO_H


23 
__BEGIN_NAMESPACE_STD


24 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

25 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

26 
	$__LDBL_REDIR_DECL
 (
•rötf
)

27 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

28 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

29 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

30 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

31 && !
deföed
 
__REDIRECT
 \

32 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

33 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

34 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

37 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

41 
__END_NAMESPACE_STD


43 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


44 
__BEGIN_NAMESPACE_C99


45 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

46 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

47 
__END_NAMESPACE_C99


50 #ifdef 
__USE_ISOC99


51 
__BEGIN_NAMESPACE_C99


52 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

53 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

54 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

55 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

58 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

62 
__END_NAMESPACE_C99


65 #ifde‡
__USE_XOPEN2K8


66 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

67 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

70 #ifde‡
__USE_GNU


71 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

73 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

74 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

75 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

78 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


79 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

80 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

81 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


82 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

83 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

85 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

88 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

89 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

90 #ifde‡
__USE_XOPEN2K8


91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

94 #ifde‡
__USE_GNU


95 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

96 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

97 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

98 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

19 #i‚de‡
_STDIO_H


23 #i‚de‡
__exã∫_ölöe


24 
	#__STDIO_INLINE
 
ölöe


	)

26 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

30 #ifde‡
__USE_EXTERN_INLINES


33 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
)

35 
__STDIO_INLINE
 

36 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

38  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

39 
	}
}

43 
__STDIO_INLINE
 

44 
	$gëch¨
 ()

46  
	`_IO_gëc
 (
°dö
);

47 
	}
}

50 #ifde‡
__USE_MISC


52 
__STDIO_INLINE
 

53 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

55  
	`_IO_gëc_u∆ocked
 (
__Â
);

56 
	}
}

60 #ifde‡
__USE_POSIX


62 
__STDIO_INLINE
 

63 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

65  
	`_IO_gëc_u∆ocked
 (
__Â
);

66 
	}
}

69 
__STDIO_INLINE
 

70 
	$gëch¨_u∆ocked
 ()

72  
	`_IO_gëc_u∆ocked
 (
°dö
);

73 
	}
}

78 
__STDIO_INLINE
 

79 
	$putch¨
 (
__c
)

81  
	`_IO_putc
 (
__c
, 
°dout
);

82 
	}
}

85 #ifde‡
__USE_MISC


87 
__STDIO_INLINE
 

88 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

90  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

91 
	}
}

95 #ifde‡
__USE_POSIX


97 
__STDIO_INLINE
 

98 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

100  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

101 
	}
}

104 
__STDIO_INLINE
 

105 
	$putch¨_u∆ocked
 (
__c
)

107  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

108 
	}
}

112 #ifdef 
__USE_GNU


114 
__STDIO_INLINE
 
_IO_ssize_t


115 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

117  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

118 
	}
}

122 #ifde‡
__USE_MISC


124 
__STDIO_INLINE
 

125 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

127  
	`_IO_„of_u∆ocked
 (
__°ªam
);

128 
	}
}

131 
__STDIO_INLINE
 

132 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

134  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

135 
	}
}

141 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

142 && !
deföed
 
	g__˝lu•lus


144 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

145 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

146 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

147 && (
size_t
Ë(
size
) != 0) \

148 ? ({ *
__±r
 = (*Ë(
±r
); \

149 
FILE
 *
__°ªam
 = (
°ªam
); \

150 
size_t
 
__˙t
; \

151 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

152 
__˙t
 > 0; --__cnt) \

154 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

155 i‡(
__c
 =
EOF
) \

157 *
__±r
++ = 
__c
; \

159 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

160 / (
size_t
Ë(
size
); }) \

161 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

162 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

164 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

165 (Ë(
n
), (
size_t
) 0) \

166 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

168 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

169 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

170 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

171 && (
size_t
Ë(
size
) != 0) \

172 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

173 
FILE
 *
__°ªam
 = (
°ªam
); \

174 
size_t
 
__˙t
; \

175 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

176 
__˙t
 > 0; --__cnt) \

177 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

179 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

180 / (
size_t
Ë(
size
); }) \

181 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

182 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

184 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

185 (Ë(
n
), (
size_t
) 0) \

186 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

190 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

19 #i‚de‡
_STDIO_H


23 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

24 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

25 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

26 c⁄° *
__ª°ri˘
 
__f‹m©
,

27 
_G_va_li°
 
__≠
Ë
__THROW
;

29 #ifde‡
__va_¨g_∑ck


30 
__f‹tify_fun˘i⁄
 

31 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
, ...))

33  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

34 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

35 
	}
}

36 #ñi‡!
deföed
 
__˝lu•lus


37 
	#•rötf
(
°r
, ...) \

38 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

39 
__VA_ARGS__
)

	)

42 
__f‹tify_fun˘i⁄
 

43 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
,

44 
_G_va_li°
 
__≠
))

46  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

47 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

48 
	}
}

50 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


52 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

53 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

54 ...Ë
__THROW
;

55 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

56 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

57 
_G_va_li°
 
__≠
Ë
__THROW
;

59 #ifde‡
__va_¨g_∑ck


60 
__f‹tify_fun˘i⁄
 

61 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

62 c⁄° *
__ª°ri˘
 
__fmt
, ...))

64  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

65 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

66 
	}
}

67 #ñi‡!
deföed
 
__˝lu•lus


68 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

69 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

70 
__VA_ARGS__
)

	)

73 
__f‹tify_fun˘i⁄
 

74 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

75 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

77  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

78 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

79 
	}
}

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

85 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

86 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

87 
__¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

88 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

89 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

90 
__v¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

91 
_G_va_li°
 
__≠
);

93 #ifde‡
__va_¨g_∑ck


94 
__f‹tify_fun˘i⁄
 

95 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° *__ª°ri˘ 
__fmt
, ...)

97  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

98 
	`__va_¨g_∑ck
 ());

99 
	}
}

101 
__f‹tify_fun˘i⁄
 

102 
	$¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, ...)

104  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

105 
	}
}

106 #ñi‡!
deföed
 
__˝lu•lus


107 
	#¥ötf
(...) \

108 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

109 
	#Ârötf
(
°ªam
, ...) \

110 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

113 
__f‹tify_fun˘i⁄
 

114 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

116 #ifde‡
__USE_EXTERN_INLINES


117  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

119  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

121 
	}
}

123 
__f‹tify_fun˘i⁄
 

124 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

125 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

127  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

128 
	}
}

130 #ifde‡
__USE_XOPEN2K8


131 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, c⁄° *
__ª°ri˘
 
__fmt
,

132 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

133 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

134 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

135 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

137 #ifde‡
__va_¨g_∑ck


138 
__f‹tify_fun˘i⁄
 

139 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

141  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

142 
	`__va_¨g_∑ck
 ());

143 
	}
}

144 #ñi‡!
deföed
 
__˝lu•lus


145 
	#d¥ötf
(
fd
, ...) \

146 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

149 
__f‹tify_fun˘i⁄
 

150 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

152  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

153 
	}
}

156 #ifde‡
__USE_GNU


158 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

159 c⁄° *
__ª°ri˘
 
__fmt
, ...)

160 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

161 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

162 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

163 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

164 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

165 
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

167 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

168 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

169 
__Êag
,

170 c⁄° *
__ª°ri˘
 
__f‹m©
,

171 
_G_va_li°
 
__¨gs
)

172 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

174 #ifde‡
__va_¨g_∑ck


175 
__f‹tify_fun˘i⁄
 

176 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
, ...))

178  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

179 
	`__va_¨g_∑ck
 ());

180 
	}
}

182 
__f‹tify_fun˘i⁄
 

183 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

186  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

187 
	`__va_¨g_∑ck
 ());

188 
	}
}

190 
__f‹tify_fun˘i⁄
 

191 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

192 c⁄° *
__ª°ri˘
 
__fmt
, ...))

194  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

195 
	`__va_¨g_∑ck
 ());

196 
	}
}

197 #ñi‡!
deföed
 
__˝lu•lus


198 
	#a•rötf
(
±r
, ...) \

199 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

200 
	#__a•rötf
(
±r
, ...) \

201 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

202 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

203 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

206 
__f‹tify_fun˘i⁄
 

207 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

208 
_G_va_li°
 
__≠
))

210  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

211 
	}
}

213 
__f‹tify_fun˘i⁄
 

214 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

215 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

217  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

218 
__≠
);

219 
	}
}

225 #i‡!
deföed
 
__USE_ISOC11
 \

226 || (
deföed
 
	g__˝lu•lus
 && __˝lu•lu†<201103L && !deföed 
__USE_GNU
)

227 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

228 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

229 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

232 
__f‹tify_fun˘i⁄
 
__wur
 *

233 
	$gës
 (*
__°r
)

235 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

236  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

237  
	`__gës_w¨n
 (
__°r
);

238 
	}
}

241 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

242 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

243 *
	`__REDIRECT
 (
__fgës_Æüs
,

244 (*
__ª°ri˘
 
__s
, 
__n
,

245 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

246 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

247 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

248 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

249 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

252 
__f‹tify_fun˘i⁄
 
__wur
 *

253 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

255 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

257 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

258  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

260 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

261  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

263  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

264 
	}
}

266 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

269 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

270 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

271 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

272 
‰ód
Ë
__wur
;

273 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

274 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

275 
size_t
 
__size
, size_à
__n
,

276 
FILE
 *
__ª°ri˘
 
__°ªam
),

277 
__‰ód_chk
)

278 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

281 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


282 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

283 
FILE
 *
__ª°ri˘
 
__°ªam
)

285 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

287 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

288 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

289 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

290  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

292 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

293  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

295  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

296 
	}
}

298 #ifde‡
__USE_GNU


299 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

300 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

301 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

302 (*
__ª°ri˘
 
__s
, 
__n
,

303 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

304 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

305 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

306 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

307 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

310 
__f‹tify_fun˘i⁄
 
__wur
 *

311 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

313 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

315 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

316  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

318 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

319  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

321  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

322 
	}
}

325 #ifde‡
__USE_MISC


326 #unde‡
‰ód_u∆ocked


327 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

330 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

331 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

332 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

333 
‰ód_u∆ocked
Ë
__wur
;

334 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

335 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

336 
size_t
 
__size
, size_à
__n
,

337 
FILE
 *
__ª°ri˘
 
__°ªam
),

338 
__‰ód_u∆ocked_chk
)

339 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

342 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


343 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

344 
FILE
 *
__ª°ri˘
 
__°ªam
)

346 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

349 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

350 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

351  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

352 
__°ªam
);

354 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

355  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

356 
__°ªam
);

359 #ifde‡
__USE_EXTERN_INLINES


360 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

361 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

362 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

363 && 
__size
 * 
__n
 <= 8)

365 
size_t
 
__˙t
 = 
__size
 * 
__n
;

366 *
__˝å
 = (*Ë
__±r
;

367 i‡(
__˙t
 == 0)

370 ; 
__˙t
 > 0; --__cnt)

372 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

373 i‡(
__c
 =
EOF
)

375 *
__˝å
++ = 
__c
;

377  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

380  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

381 
	}
}

	@/usr/include/bits/stdio_lim.h

18 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


22 #ifde‡
_STDIO_H


23 
	#L_tm≤am
 20

	)

24 
	#TMP_MAX
 238328

	)

25 
	#FILENAME_MAX
 4096

	)

27 #ifde‡
__USE_POSIX


28 
	#L_˘îmid
 9

	)

29 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


30 
	#L_cu£rid
 9

	)

35 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


36 #unde‡
FOPEN_MAX


37 
	#FOPEN_MAX
 16

	)

40 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


41 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-bsearch.h

19 
__exã∫_ölöe
 *

20 
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

21 
__com∑r_‚_t
 
__com∑r
)

23 
size_t
 
__l
, 
__u
, 
__idx
;

24 c⁄° *
__p
;

25 
__com∑ris⁄
;

27 
__l
 = 0;

28 
__u
 = 
__nmemb
;

29 
__l
 < 
__u
)

31 
__idx
 = (
__l
 + 
__u
) / 2;

32 
__p
 = (*Ë(((c⁄° *Ë
__ba£
Ë+ (
__idx
 * 
__size
));

33 
__com∑ris⁄
 = (*
__com∑r
Ë(
__key
, 
__p
);

34 i‡(
__com∑ris⁄
 < 0)

35 
__u
 = 
__idx
;

36 i‡(
__com∑ris⁄
 > 0)

37 
__l
 = 
__idx
 + 1;

39  (*Ë
__p
;

42  
NULL
;

43 
	}
}

	@/usr/include/bits/stdlib-float.h

19 #i‚de‡
_STDLIB_H


23 #ifde‡
__USE_EXTERN_INLINES


24 
__BEGIN_NAMESPACE_STD


25 
__exã∫_ölöe
 

26 
__NTH
 (
	$©of
 (c⁄° *
__≈å
))

28  
	`°πod
 (
__≈å
, (**Ë
NULL
);

29 
	}
}

30 
	g__END_NAMESPACE_STD


	@/usr/include/bits/stdlib-ldbl.h

19 #i‚de‡
_STDLIB_H


23 #ifdef 
__USE_ISOC99


24 
__BEGIN_NAMESPACE_C99


25 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

26 
__END_NAMESPACE_C99


29 #ifde‡
__USE_GNU


30 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

33 #ifde‡
__USE_MISC


34 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

35 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

36 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

38 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

19 #i‚de‡
_STDLIB_H


23 *
	$__ªÆ∑th_chk
 (c⁄° *
__ª°ri˘
 
__«me
,

24 *
__ª°ri˘
 
__ªsﬁved
,

25 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

26 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

27 (c⁄° *
__ª°ri˘
 
__«me
,

28 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

29 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

30 (c⁄° *
__ª°ri˘
 
__«me
,

31 *
__ª°ri˘
 
__ªsﬁved
,

32 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


33 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

36 
__f‹tify_fun˘i⁄
 
__wur
 *

37 
	`__NTH
 (
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

39 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

41 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


42 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

43  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

45  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

48  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

49 
	}
}

52 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

53 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

54 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

55 
size_t
 
__buÊí
), 
±¢ame_r
)

56 
	`__n⁄nuŒ
 ((2));

57 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

58 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

59 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

60 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

63 
__f‹tify_fun˘i⁄
 

64 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

66 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

68 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

69  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

70 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

71  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

73  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

74 
	}
}

77 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

78 
__THROW
 
__wur
;

79 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

80 
w˘omb
Ë
__wur
;

82 
__f‹tify_fun˘i⁄
 
__wur
 

83 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

88 
	#__STDLIB_MB_LEN_MAX
 16

	)

89 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


92 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

93  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

94  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

95 
	}
}

98 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

99 c⁄° *
__ª°ri˘
 
__§c
,

100 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

101 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

102 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

103 c⁄° *
__ª°ri˘
 
__§c
,

104 
size_t
 
__Àn
), 
mb°owcs
);

105 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

106 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

107 c⁄° *
__ª°ri˘
 
__§c
,

108 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

109 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

112 
__f‹tify_fun˘i⁄
 
size_t


113 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° *__ª°ri˘ 
__§c
,

114 
size_t
 
__Àn
))

116 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

118 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

119  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

120 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

122 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

123  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

124 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

126  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

127 
	}
}

130 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

131 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

132 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

133 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

134 (*
__ª°ri˘
 
__d°
,

135 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

136 
size_t
 
__Àn
), 
wc°ombs
);

137 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

138 (*
__ª°ri˘
 
__d°
,

139 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

140 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

141 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

143 
__f‹tify_fun˘i⁄
 
size_t


144 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__§c
,

145 
size_t
 
__Àn
))

147 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

149 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

150  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

151 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

152  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

154  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

155 
	}
}

	@/usr/include/bits/string.h

19 #i‚de‡
_STRING_H


24 
	#_STRING_INLINE_u«lig√d
 1

	)

27 
	#_HAVE_STRING_ARCH_memp˝y
 1

	)

31 #i‡!
deföed
 
__x86_64__
 && (deföed 
__i486__
 || deföed 
__≥¡ium__
 \

32 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

33 || 
deföed
 
	g__noc⁄a__
 || deföed 
	g__©om__
 \

34 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__c‹ei7__
 \

35 || 
deföed
 
	g__ßndybridge__
 || deföed 
	g__haswñl__
 \

36 || 
deföed
 
	g__b⁄√Œ__
 || deföed 
	g__sûvîm⁄t__
 \

37 || 
deföed
 
	g__k6__
 || deföed 
	g__geode__
 \

38 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

39 || 
deföed
 
	g__amdÁm10__
 || deföed 
	g__bdvî1__
 \

40 || 
deföed
 
	g__bdvî2__
 || deföed 
	g__bdvî3__
 \

41 || 
deföed
 
	g__bdvî4__
 || deföed 
	g__btvî1__
 \

42 || 
deföed
 
	g__btvî2__
)

46 #i‡!
deföed
 
__NO_STRING_INLINES
 && deföed 
__USE_STRING_INLINES
 \

47 && 
deföed
 
	g__GNUC__
 && __GNUC__ >= 2

49 #i‚de‡
__STRING_INLINE


50 #i‚de‡
__exã∫_ölöe


51 
	#__STRING_INLINE
 
ölöe


	)

53 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

58 
	#__STRING_SMALL_GET16
(
§c
, 
idx
) \

59 ((((c⁄° *Ë(
§c
))[
idx
 + 1] << 8) \

60 | ((c⁄° *Ë(
§c
))[
idx
])

	)

61 
	#__STRING_SMALL_GET32
(
§c
, 
idx
) \

62 (((((c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

63 | ((c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

64 | ((c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

65 | ((c⁄° *Ë(
§c
))[
idx
])

	)

69 
	#_HAVE_STRING_ARCH_mem˝y
 1

	)

70 
	#mem˝y
(
de°
, 
§c
, 
n
) \

71 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

72 ? 
	`__mem˝y_c
 ((
de°
), (
§c
), (
n
)) \

73 : 
	`__mem˝y_g
 ((
de°
), (
§c
), (
n
))))

	)

74 
	#__mem˝y_c
(
de°
, 
§c
, 
n
) \

75 ((
n
) == 0 \

76 ? (
de°
) \

77 : (((
n
) % 4 == 0) \

78 ? 
	`__mem˝y_by4
 (
de°
, 
§c
, 
n
) \

79 : (((
n
) % 2 == 0) \

80 ? 
	`__mem˝y_by2
 (
de°
, 
§c
, 
n
) \

81 : 
	`__mem˝y_g
 (
de°
, 
§c
, 
n
))))

	)

83 
__STRING_INLINE
 *
__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
,

84 
size_t
 
__n
);

86 
__STRING_INLINE
 *

87 
	$__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

89 
__d0
, 
__d1
;

90 *
__tmp
 = 
__de°
;

91 
__asm__
 
__vﬁ©ûe__


99 : "=&r" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

100 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 4)

102  
__de°
;

103 
	}
}

105 
__STRING_INLINE
 *
__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
,

106 
size_t
 
__n
);

108 
__STRING_INLINE
 *

109 
	$__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

111 
__d0
, 
__d1
;

112 *
__tmp
 = 
__de°
;

113 
__asm__
 
__vﬁ©ûe__


126 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

127 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 2)

129  
__de°
;

130 
	}
}

132 
__STRING_INLINE
 *
__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
);

134 
__STRING_INLINE
 *

135 
	$__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

137 
__d0
, 
__d1
, 
__d2
;

138 *
__tmp
 = 
__de°
;

139 
__asm__
 
__vﬁ©ûe__


150 : "=&c" (
__d0
), "=&D" (
__d1
), "=&S" (
__d2
),

151 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

152 : "0" (
__n
), "1" (
__tmp
), "2" (
__§c
),

153 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
)

155  
__de°
;

156 
	}
}

158 
	#_HAVE_STRING_ARCH_memmove
 1

	)

159 #i‚de‡
_FORCE_INLINES


162 
	#memmove
(
de°
, 
§c
, 
n
Ë
	`__memmove_g
 (de°, src,Ç)

	)

164 
__STRING_INLINE
 *
	$__memmove_g
 (*, c⁄° *, 
size_t
)

165 
	`__asm__
 ("memmove");

167 
__STRING_INLINE
 *

168 
	$__memmove_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

170 
__d0
, 
__d1
, 
__d2
;

171 *
__tmp
 = 
__de°
;

172 i‡(
__de°
 < 
__§c
)

173 
__asm__
 
__vﬁ©ûe__


176 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

177 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

178 : "0" (
__n
), "1" (
__§c
), "2" (
__tmp
),

179 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

181 
__asm__
 
__vﬁ©ûe__


187 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

188 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

189 : "0" (
__n
), "1" (__¿+ (c⁄° *Ë
__§c
),

190 "2" (
__n
 + (*Ë
__tmp
),

191 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

192  
__de°
;

193 
	}
}

197 
	#_HAVE_STRING_ARCH_memcmp
 1

	)

198 #i‚de‡
_FORCE_INLINES


199 #i‚de‡
__PIC__


201 
__STRING_INLINE
 

202 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

204 
__d0
, 
__d1
, 
__d2
;

205 
__ªs
;

206 
__asm__
 
__vﬁ©ûe__


214 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

215 : "0" (0), "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

216 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

217 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

219  
__ªs
;

220 
	}
}

225 
	#_HAVE_STRING_ARCH_mem£t
 1

	)

226 
	#_USE_STRING_ARCH_mem£t
 1

	)

227 
	#mem£t
(
s
, 
c
, 
n
) \

228 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

229 ? ((
n
) == 1 \

230 ? 
	`__mem£t_c1
 ((
s
), (
c
)) \

231 : 
	`__mem£t_gc
 ((
s
), (
c
), (
n
))) \

232 : (
	`__buûtö_c⁄°™t_p
 (
c
) \

233 ? (
	`__buûtö_c⁄°™t_p
 (
n
) \

234 ? 
	`__mem£t_c˙
 ((
s
), (
c
), (
n
)) \

235 : 
	`mem£t
 ((
s
), (
c
), (
n
))) \

236 : (
	`__buûtö_c⁄°™t_p
 (
n
) \

237 ? 
	`__mem£t_g˙
 ((
s
), (
c
), (
n
)) \

238 : 
	`mem£t
 ((
s
), (
c
), (
n
))))))

	)

240 
	#__mem£t_c1
(
s
, 
c
Ë({ *
__s
 = (s); \

241 *((*Ë
__s
Ë(Ë(
c
); \

242 
__s
; })

	)

244 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

245 ({ *
__s
 = (
s
); \

247 
__ui
; \

248 
__usi
; \

249 
__uc
; \

250 } *
__u
 = 
__s
; \

251 
__c
 = ((Ë((Ë(
c
))) * 0x01010101; \

257 i‡((
n
) == 3 || (n) >= 5) \

258 
__asm__
 
	`__vﬁ©ûe__
 ("" : "Ù" (
__c
) : "0" (__c)); \

261 
n
) \

264 
__u
->
__ui
 = 
__c
; \

265 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

267 
__u
->
__ui
 = 
__c
; \

268 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

270 
__u
->
__ui
 = 
__c
; \

271 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

273 
__u
->
__usi
 = (Ë
__c
; \

274 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

275 
__u
->
__uc
 = (Ë
__c
; \

279 
__u
->
__ui
 = 
__c
; \

280 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

282 
__u
->
__ui
 = 
__c
; \

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

285 
__u
->
__ui
 = 
__c
; \

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

288 
__u
->
__usi
 = (Ë
__c
; \

292 
__u
->
__ui
 = 
__c
; \

293 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

295 
__u
->
__ui
 = 
__c
; \

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

298 
__u
->
__ui
 = 
__c
; \

299 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

301 
__u
->
__uc
 = (Ë
__c
; \

305 
__u
->
__ui
 = 
__c
; \

306 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

308 
__u
->
__ui
 = 
__c
; \

309 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

311 
__u
->
__ui
 = 
__c
; \

312 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

314 
__u
->
__ui
 = 
__c
; \

319 
__s
; })

	)

321 
	#__mem£t_c˙
(
s
, 
c
, 
n
) \

322 (((
n
) % 4 == 0) \

323 ? 
	`__mem£t_c˙_by4
 (
s
, ((Ë((Ë(
c
))) * 0x01010101,\

324 
n
) \

325 : (((
n
) % 2 == 0) \

326 ? 
	`__mem£t_c˙_by2
 (
s
, \

327 ((Ë((Ë(
c
))) * 0x01010101,\

328 
n
) \

329 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

331 
__STRING_INLINE
 *
__mem£t_c˙_by4
 (*
__s
, 
__c
,

332 
size_t
 
__n
);

334 
__STRING_INLINE
 *

335 
	$__mem£t_c˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

337 *
__tmp
 = 
__s
;

338 
__d0
;

339 #ifde‡
__i686__


340 
__asm__
 
__vﬁ©ûe__


343 : "=&a" (
__c
), "=&D" (
__tmp
), "=&c" (
__d0
),

344 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

345 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

348 
__asm__
 
__vﬁ©ûe__


354 : "=&r" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

355 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

356 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

359  
__s
;

360 
	}
}

362 
__STRING_INLINE
 *
__mem£t_c˙_by2
 (*
__s
, 
__c
,

363 
size_t
 
__n
);

365 
__STRING_INLINE
 *

366 
	$__mem£t_c˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

368 
__d0
, 
__d1
;

369 *
__tmp
 = 
__s
;

370 #ifde‡
__i686__


371 
__asm__
 
__vﬁ©ûe__


375 : "=&a" (
__d0
), "=&D" (
__tmp
), "=&c" (
__d1
),

376 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

377 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

380 
__asm__
 
__vﬁ©ûe__


386 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

387 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

388 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

391  
__s
;

392 
	}
}

394 
	#__mem£t_g˙
(
s
, 
c
, 
n
) \

395 (((
n
) % 4 == 0) \

396 ? 
	`__mem£t_g˙_by4
 (
s
, 
c
, 
n
) \

397 : (((
n
) % 2 == 0) \

398 ? 
	`__mem£t_g˙_by2
 (
s
, 
c
, 
n
) \

399 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

401 
__STRING_INLINE
 *
__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
);

403 
__STRING_INLINE
 *

404 
	$__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

406 *
__tmp
 = 
__s
;

407 
__d0
;

408 
__asm__
 
__vﬁ©ûe__


418 : "=&q" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

419 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

420 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

422  
__s
;

423 
	}
}

425 
__STRING_INLINE
 *
__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
);

427 
__STRING_INLINE
 *

428 
	$__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

430 
__d0
, 
__d1
;

431 *
__tmp
 = 
__s
;

432 
__asm__
 
__vﬁ©ûe__


443 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

444 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

445 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

447  
__s
;

448 
	}
}

452 
	#_HAVE_STRING_ARCH_memchr
 1

	)

453 #i‚de‡
_FORCE_INLINES


454 
__STRING_INLINE
 *

455 
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

457 
__d0
;

458 #ifde‡
__i686__


459 
__d1
;

461 *
__ªs
;

462 i‡(
__n
 == 0)

463  
NULL
;

464 #ifde‡
__i686__


465 
__asm__
 
__vﬁ©ûe__


469 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

470 : "a" (
__c
), "0" (
__s
), "1" (
__n
), "2" (1),

471 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

474 
__asm__
 
__vﬁ©ûe__


480 : "=D" (
__ªs
), "=&c" (
__d0
)

481 : "a" (
__c
), "0" (
__s
), "1" (
__n
),

482 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

485  
__ªs
 - 1;

486 
	}
}

489 
	#_HAVE_STRING_ARCH_memrchr
 1

	)

490 #i‚de‡
_FORCE_INLINES


491 
__STRING_INLINE
 *
__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
);

493 
__STRING_INLINE
 *

494 
	$__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

496 
__d0
;

497 #ifde‡
__i686__


498 
__d1
;

500 *
__ªs
;

501 i‡(
__n
 == 0)

502  
NULL
;

503 #ifde‡
__i686__


504 
__asm__
 
__vﬁ©ûe__


510 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

511 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n), "2" (-1),

512 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

515 
__asm__
 
__vﬁ©ûe__


522 : "=D" (
__ªs
), "=&c" (
__d0
)

523 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n),

524 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

527  
__ªs
;

528 
	}
}

529 #ifde‡
__USE_GNU


530 
	#memrchr
(
s
, 
c
, 
n
Ë
	`__memrchr
 ((s), (c), (n))

	)

535 
	#_HAVE_STRING_ARCH_øwmemchr
 1

	)

536 
__STRING_INLINE
 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

538 #i‚de‡
_FORCE_INLINES


539 
__STRING_INLINE
 *

540 
	$__øwmemchr
 (c⁄° *
__s
, 
__c
)

542 
__d0
;

543 *
__ªs
;

544 
__asm__
 
__vﬁ©ûe__


547 : "=D" (
__ªs
), "=&c" (
__d0
)

548 : "a" (
__c
), "0" (
__s
), "1" (0xffffffff),

549 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

551  
__ªs
 - 1;

552 
	}
}

553 #ifde‡
__USE_GNU


554 
__STRING_INLINE
 *

555 
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

557  
	`__øwmemchr
 (
__s
, 
__c
);

558 
	}
}

564 
	#_HAVE_STRING_ARCH_°æí
 1

	)

565 
	#°æí
(
°r
) \

566 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
°r
) \

567 ? 
	`__buûtö_°æí
 (
°r
) \

568 : 
	`__°æí_g
 (
°r
)))

	)

569 
__STRING_INLINE
 
size_t
 
__°æí_g
 (c⁄° *
__°r
);

571 
__STRING_INLINE
 
size_t


572 
	$__°æí_g
 (c⁄° *
__°r
)

574 
__dummy
;

575 c⁄° *
__tmp
 = 
__°r
;

576 
__asm__
 
__vﬁ©ûe__


582 : "Ù" (
__tmp
), "=&q" (
__dummy
)

583 : "0" (
__°r
),

584 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__°r
)

586  
__tmp
 - 
__°r
 - 1;

587 
	}
}

591 
	#_HAVE_STRING_ARCH_°r˝y
 1

	)

592 
	#°r˝y
(
de°
, 
§c
) \

593 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

594 ? ( ((
§c
)[0]Ë=1 && 
	`°æí
 (src) + 1 <= 8 \

595 ? 
	`__°r˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

596 : (*Ë
	`mem˝y
 ((*Ë(
de°
), \

597 (c⁄° *Ë(
§c
), \

598 
	`°æí
 (
§c
) + 1)) \

599 : 
	`__°r˝y_g
 ((
de°
), (
§c
))))

	)

601 
	#__°r˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

602 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

604 
__ui
; \

605 
__usi
; \

606 
__uc
; \

607 
__c
; \

608 } *
__u
 = (*Ë
__de°
; \

609 
§˛í
) \

612 
__u
->
__uc
 = '\0'; \

615 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

618 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

619 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

620 
__u
->
__uc
 = '\0'; \

623 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

626 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

627 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

628 
__u
->
__uc
 = '\0'; \

631 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

632 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

633 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

636 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

637 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

638 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

639 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

640 
__u
->
__uc
 = '\0'; \

643 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

644 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

645 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

648 (*Ë
__de°
; }))

	)

650 
__STRING_INLINE
 *
__°r˝y_g
 (*
__de°
, c⁄° *
__§c
);

652 
__STRING_INLINE
 *

653 
	$__°r˝y_g
 (*
__de°
, c⁄° *
__§c
)

655 *
__tmp
 = 
__de°
;

656 
__dummy
;

657 
__asm__
 
__vﬁ©ûe__


666 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
),

667 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

668 : "0" (
__§c
), "1" (
__tmp
),

669 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

671  
__de°
;

672 
	}
}

675 #ifde‡
__USE_GNU


676 
	#_HAVE_STRING_ARCH_°p˝y
 1

	)

678 
	#__°p˝y
(
de°
, 
§c
) \

679 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

680 ? (
	`°æí
 (
§c
) + 1 <= 8 \

681 ? 
	`__°p˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

682 : 
	`__°p˝y_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1)) \

683 : 
	`__°p˝y_g
 ((
de°
), (
§c
))))

	)

684 
	#__°p˝y_c
(
de°
, 
§c
, 
§˛í
) \

685 ((
§˛í
) % 4 == 0 \

686 ? 
	`__memp˝y_by4
 (
de°
, 
§c
, 
§˛í
) - 1 \

687 : ((
§˛í
) % 2 == 0 \

688 ? 
	`__memp˝y_by2
 (
de°
, 
§c
, 
§˛í
) - 1 \

689 : 
	`__memp˝y_byn
 (
de°
, 
§c
, 
§˛í
Ë- 1))

	)

692 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 ((de°), (§c))

	)

694 
	#__°p˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

695 (
	`__exãnsi⁄__
 ({ union { \

696 
__ui
; \

697 
__usi
; \

698 
__uc
; \

699 
__c
; \

700 } *
__u
 = (*Ë(
de°
); \

701 
§˛í
) \

704 
__u
->
__uc
 = '\0'; \

707 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

708 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

711 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

712 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

713 
__u
->
__uc
 = '\0'; \

716 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

717 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

720 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

721 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

722 
__u
->
__uc
 = '\0'; \

725 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

726 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

727 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

728 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

731 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

732 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

733 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

734 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

735 
__u
->
__uc
 = '\0'; \

738 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

739 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

740 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

741 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

744 (*Ë
__u
; }))

	)

746 
__STRING_INLINE
 *
__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
,

747 
size_t
 
__§˛í
);

749 
__STRING_INLINE
 *

750 
	$__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

752 *
__tmp
 = 
__de°
;

753 
__d0
, 
__d1
;

754 
__asm__
 
__vﬁ©ûe__


762 : "=&r" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

763 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4)

765  
__tmp
;

766 
	}
}

768 
__STRING_INLINE
 *
__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
,

769 
size_t
 
__§˛í
);

771 
__STRING_INLINE
 *

772 
	$__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

774 *
__tmp
 = 
__de°
;

775 
__d0
, 
__d1
;

776 
__asm__
 
__vﬁ©ûe__


789 : "=&q" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
),

790 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

791 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

792 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

794  
__tmp
 + 2;

795 
	}
}

797 
__STRING_INLINE
 *
__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
,

798 
size_t
 
__§˛í
);

800 
__STRING_INLINE
 *

801 
	$__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

803 
__d0
, 
__d1
;

804 *
__tmp
 = 
__de°
;

805 
__asm__
 
__vﬁ©ûe__


816 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

817 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

818 : "0" (
__tmp
), "1" (
__§˛í
), "2" (
__§c
),

819 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

821  
__tmp
;

822 
	}
}

824 
__STRING_INLINE
 *
__°p˝y_g
 (*
__de°
, c⁄° *
__§c
);

826 
__STRING_INLINE
 *

827 
	$__°p˝y_g
 (*
__de°
, c⁄° *
__§c
)

829 *
__tmp
 = 
__de°
;

830 
__dummy
;

831 
__asm__
 
__vﬁ©ûe__


840 : "=&r" (
__§c
), "Ù" (
__tmp
), "=&q" (
__dummy
),

841 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

842 : "0" (
__§c
), "1" (
__tmp
),

843 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

845  
__tmp
 - 1;

846 
	}
}

851 
	#_HAVE_STRING_ARCH_°∫˝y
 1

	)

852 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

853 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

854 ? ((
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

855 ? (*Ë
	`mem˝y
 ((*Ë(
de°
), \

856 (c⁄° *Ë(
§c
), 
n
) \

857 : 
	`__°∫˝y_cg
 ((
de°
), (
§c
), 
	`°æí
 (§cË+ 1, 
n
))) \

858 : 
	`__°∫˝y_gg
 ((
de°
), (
§c
), 
n
)))

	)

859 
	#__°∫˝y_cg
(
de°
, 
§c
, 
§˛í
, 
n
) \

860 (((
§˛í
) % 4 == 0) \

861 ? 
	`__°∫˝y_by4
 (
de°
, 
§c
, 
§˛í
, 
n
) \

862 : (((
§˛í
) % 2 == 0) \

863 ? 
	`__°∫˝y_by2
 (
de°
, 
§c
, 
§˛í
, 
n
) \

864 : 
	`__°∫˝y_byn
 (
de°
, 
§c
, 
§˛í
, 
n
)))

	)

866 
__STRING_INLINE
 *
__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[],

867 
size_t
 
__§˛í
, size_à
__n
);

869 
__STRING_INLINE
 *

870 
	$__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

872 *
__tmp
 = 
__de°
;

873 
__dummy1
, 
__dummy2
;

874 
__asm__
 
__vﬁ©ûe__


882 : "=&r" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

883 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

884 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4),

885 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

887 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

888  
__de°
;

889 
	}
}

891 
__STRING_INLINE
 *
__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[],

892 
size_t
 
__§˛í
, size_à
__n
);

894 
__STRING_INLINE
 *

895 
	$__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

897 *
__tmp
 = 
__de°
;

898 
__dummy1
, 
__dummy2
;

899 
__asm__
 
__vﬁ©ûe__


912 : "=&q" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

913 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

914 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

915 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

917 (Ë
	`mem£t
 (
__tmp
 + 2, '\0', 
__n
 - 
__§˛í
);

918  
__de°
;

919 
	}
}

921 
__STRING_INLINE
 *
__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[],

922 
size_t
 
__§˛í
, size_à
__n
);

924 
__STRING_INLINE
 *

925 
	$__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

927 
__d0
, 
__d1
;

928 *
__tmp
 = 
__de°
;

929 
__asm__
 
__vﬁ©ûe__


940 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

941 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

942 : "1" (
__§˛í
), "0" (
__tmp
),"2" (
__§c
),

943 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

945 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

946  
__de°
;

947 
	}
}

949 
__STRING_INLINE
 *
__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
,

950 
size_t
 
__n
);

952 
__STRING_INLINE
 *

953 
	$__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

955 *
__tmp
 = 
__de°
;

956 
__dummy
;

957 i‡(
__n
 > 0)

958 
__asm__
 
__vﬁ©ûe__


974 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
), "=&r" (
__n
)

975 : "0" (
__§c
), "1" (
__tmp
), "3" (
__n
)

978  
__de°
;

979 
	}
}

983 
	#_HAVE_STRING_ARCH_°rˇt
 1

	)

984 
	#°rˇt
(
de°
, 
§c
) \

985 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

986 ? 
	`__°rˇt_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

987 : 
	`__°rˇt_g
 ((
de°
), (
§c
))))

	)

989 
__STRING_INLINE
 *
__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[],

990 
size_t
 
__§˛í
);

992 
__STRING_INLINE
 *

993 
	$__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
)

995 #ifde‡
__i686__


996 
__d0
;

997 *
__tmp
;

998 
__asm__
 
__vﬁ©ûe__


1000 : "=D" (
__tmp
), "=&c" (
__d0
),

1001 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1002 : "0" (
__de°
), "1" (0xffffffff), "a" (0),

1003 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

1005 --
__tmp
;

1007 *
__tmp
 = 
__de°
;

1008 
__asm__
 
__vﬁ©ûe__


1014 : "Ù" (
__tmp
),

1015 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1016 : "0" (
__tmp
),

1017 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

1020 (Ë
	`mem˝y
 (
__tmp
, 
__§c
, 
__§˛í
);

1021  
__de°
;

1022 
	}
}

1024 
__STRING_INLINE
 *
__°rˇt_g
 (*
__de°
, c⁄° *
__§c
);

1026 
__STRING_INLINE
 *

1027 
	$__°rˇt_g
 (*
__de°
, c⁄° *
__§c
)

1029 *
__tmp
 = 
__de°
;

1030 
__dummy
;

1031 
__asm__
 
__vﬁ©ûe__


1044 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
),

1045 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1046 : "1" (
__tmp
), "2" (
__§c
),

1047 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

1049  
__de°
;

1050 
	}
}

1054 
	#_HAVE_STRING_ARCH_°∫ˇt
 1

	)

1055 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

1056 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

1057 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

1058 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

1059 ? 
	`°rˇt
 (
__de°
, (
§c
)) \

1060 : (*(*)
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

1061 (c⁄° *Ë(
§c
), \

1062 (
n
)Ë0, 
__de°
)) \

1063 : 
	`__°∫ˇt_g
 (
__de°
, (
§c
), (
n
)); }))

	)

1065 
__STRING_INLINE
 *
__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[],

1066 
size_t
 
__n
);

1068 
__STRING_INLINE
 *

1069 
	$__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__n
)

1071 *
__tmp
 = 
__de°
;

1072 
__dummy
;

1073 #ifde‡
__i686__


1074 
__asm__
 
__vﬁ©ûe__


1088 : "=&a" (
__dummy
), "=&D" (
__tmp
), "=&S" (
__§c
), "=&c" (
__n
)

1089 : "g" (
__n
), "0" (0), "1" (
__tmp
), "2" (
__§c
), "3" (0xffffffff)

1092 --
__tmp
;

1093 
__asm__
 
__vﬁ©ûe__


1110 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__n
)

1111 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
)

1114  
__de°
;

1115 
	}
}

1119 
	#_HAVE_STRING_ARCH_°rcmp
 1

	)

1120 
	#°rcmp
(
s1
, 
s2
) \

1121 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

1122 && ( ((
s1
)[0]Ë!1 || 
	`°æí
 (s1) >= 4) \

1123 && ( ((
s2
)[0]Ë!1 || 
	`°æí
 (s2) >= 4) \

1124 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

1125 (
	`°æí
 (
s1
Ë< såÀ¿(
s2
) \

1126 ? 
	`°æí
 (
s1
Ë: såÀ¿(
s2
)) + 1) \

1127 : (
	`__buûtö_c⁄°™t_p
 (
s1
) &&  ((s1)[0]) == 1 \

1128 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (
s1
) < 4 \

1129 ? (
	`__buûtö_c⁄°™t_p
 (
s2
) &&  ((s2)[0]) == 1 \

1130 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1131 (c⁄° *Ë(
s2
), \

1132 
	`°æí
 (
s1
)) \

1133 : 
	`__°rcmp_cg
 ((c⁄° *Ë(
s1
), \

1134 (c⁄° *Ë(
s2
), \

1135 
	`°æí
 (
s1
))) \

1136 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&&  ((
s1
)[0]) == 1 \

1137 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (s2) < 4 \

1138 ? (
	`__buûtö_c⁄°™t_p
 (
s1
) \

1139 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1140 (c⁄° *Ë(
s2
), \

1141 
	`°æí
 (
s2
)) \

1142 : 
	`__°rcmp_gc
 ((c⁄° *Ë(
s1
), \

1143 (c⁄° *Ë(
s2
), \

1144 
	`°æí
 (
s2
))) \

1145 : 
	`__°rcmp_gg
 ((
s1
), (
s2
))))))

	)

1147 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

1148 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = (
s1
)[0] - (
s2
)[0]; \

1149 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

1151 
__ªsu…
 = (
s1
)[1] - (
s2
)[1]; \

1152 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

1154 
__ªsu…
 = (
s1
)[2] - (
s2
)[2]; \

1155 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

1156 
__ªsu…
 = (
s1
)[3] - (
s2
)[3]; \

1159 
__ªsu…
; }))

	)

1161 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

1162 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = (
s2
); \

1163 
__ªsu…
 = (
s1
)[0] - 
__s2
[0]; \

1164 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

1166 
__ªsu…
 = (
s1
)[1] - 
__s2
[1]; \

1167 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

1169 
__ªsu…
 = (
s1
)[2] - 
__s2
[2]; \

1170 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

1171 
__ªsu…
 = (
s1
)[3] - 
__s2
[3]; \

1174 
__ªsu…
; }))

	)

1176 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

1177 (
	`__exãnsi⁄__
 ({ c⁄° *
__s1
 = (
s1
); \

1178 
__ªsu…
 = 
__s1
[0] - (
s2
)[0]; \

1179 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

1181 
__ªsu…
 = 
__s1
[1] - (
s2
)[1]; \

1182 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

1184 
__ªsu…
 = 
__s1
[2] - (
s2
)[2]; \

1185 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

1186 
__ªsu…
 = 
__s1
[3] - (
s2
)[3]; \

1189 
__ªsu…
; }))

	)

1191 
__STRING_INLINE
 
__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
);

1193 
__STRING_INLINE
 

1194 
	$__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
)

1196 
__ªs
;

1197 
__asm__
 
__vﬁ©ûe__


1213 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
)

1214 : "1" (
__s1
), "2" (
__s2
),

1215 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s1
),

1216 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s2
)

1218  
__ªs
;

1219 
	}
}

1223 
	#_HAVE_STRING_ARCH_°∫cmp
 1

	)

1224 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

1225 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`°æí
 (s1Ë< ((
size_t
Ë(
n
)) \

1226 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1227 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`°æí
 (s2Ë< ((
size_t
Ë(
n
))\

1228 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1229 : 
	`__°∫cmp_g
 ((
s1
), (
s2
), (
n
)))))

	)

1231 
__STRING_INLINE
 
__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
,

1232 
size_t
 
__n
);

1234 
__STRING_INLINE
 

1235 
	$__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

1237 
__ªs
;

1238 
__asm__
 
__vﬁ©ûe__


1257 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
), "=&r" (
__n
)

1258 : "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

1259 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

1260 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

1262  
__ªs
;

1263 
	}
}

1267 
	#_HAVE_STRING_ARCH_°rchr
 1

	)

1268 
	#_USE_STRING_ARCH_°rchr
 1

	)

1269 
	#°rchr
(
s
, 
c
) \

1270 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1271 ? ((
c
) == '\0' \

1272 ? (*Ë
	`__øwmemchr
 ((
s
), (
c
)) \

1273 : 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1274 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1276 
__STRING_INLINE
 *
__°rchr_c
 (c⁄° *
__s
, 
__c
);

1278 
__STRING_INLINE
 *

1279 
	$__°rchr_c
 (c⁄° *
__s
, 
__c
)

1281 
__d0
;

1282 *
__ªs
;

1283 
__asm__
 
__vﬁ©ûe__


1293 : "Ù" (
__ªs
), "=&a" (
__d0
)

1294 : "0" (
__s
), "1" (
__c
),

1295 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1297  
__ªs
;

1298 
	}
}

1300 
__STRING_INLINE
 *
__°rchr_g
 (c⁄° *
__s
, 
__c
);

1302 
__STRING_INLINE
 *

1303 
	$__°rchr_g
 (c⁄° *
__s
, 
__c
)

1305 
__d0
;

1306 *
__ªs
;

1307 
__asm__
 
__vﬁ©ûe__


1318 : "Ù" (
__ªs
), "=&a" (
__d0
)

1319 : "0" (
__s
), "1" (
__c
),

1320 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1322  
__ªs
;

1323 
	}
}

1327 
	#_HAVE_STRING_ARCH_°rch∫ul
 1

	)

1328 
	#__°rch∫ul
(
s
, 
c
) \

1329 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1330 ? ((
c
) == '\0' \

1331 ? (*Ë
	`__øwmemchr
 ((
s
), 
c
) \

1332 : 
	`__°rch∫ul_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1333 : 
	`__°rch∫ul_g
 ((
s
), 
c
)))

	)

1335 
__STRING_INLINE
 *
__°rch∫ul_c
 (c⁄° *
__s
, 
__c
);

1337 
__STRING_INLINE
 *

1338 
	$__°rch∫ul_c
 (c⁄° *
__s
, 
__c
)

1340 
__d0
;

1341 *
__ªs
;

1342 
__asm__
 
__vﬁ©ûe__


1352 : "Ù" (
__ªs
), "=&a" (
__d0
)

1353 : "0" (
__s
), "1" (
__c
),

1354 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1356  
__ªs
;

1357 
	}
}

1359 
__STRING_INLINE
 *
__°rch∫ul_g
 (c⁄° *
__s
, 
__c
);

1361 
__STRING_INLINE
 *

1362 
	$__°rch∫ul_g
 (c⁄° *
__s
, 
__c
)

1364 
__d0
;

1365 *
__ªs
;

1366 
__asm__
 
__vﬁ©ûe__


1377 : "Ù" (
__ªs
), "=&a" (
__d0
)

1378 : "0" (
__s
), "1" (
__c
),

1379 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1381  
__ªs
;

1382 
	}
}

1383 #ifde‡
__USE_GNU


1384 
	#°rch∫ul
(
s
, 
c
Ë
	`__°rch∫ul
 ((s), (c))

	)

1388 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


1390 
	#_HAVE_STRING_ARCH_ödex
 1

	)

1391 
	#ödex
(
s
, 
c
) \

1392 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1393 ? 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1394 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1399 
	#_HAVE_STRING_ARCH_°ºchr
 1

	)

1400 
	#°ºchr
(
s
, 
c
) \

1401 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1402 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1403 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1405 #ifde‡
__i686__


1406 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1408 
__STRING_INLINE
 *

1409 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1411 
__d0
, 
__d1
;

1412 *
__ªs
;

1413 
__asm__
 
__vﬁ©ûe__


1421 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1422 : "0" (1), "1" (
__s
), "2" (
__c
),

1423 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1425  
__ªs
 - 1;

1426 
	}
}

1428 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1430 
__STRING_INLINE
 *

1431 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1433 
__d0
, 
__d1
;

1434 *
__ªs
;

1435 
__asm__
 
__vﬁ©ûe__


1444 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1445 : "0" (1), "1" (
__s
), "2" (
__c
),

1446 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1448  
__ªs
 - 1;

1449 
	}
}

1451 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1453 
__STRING_INLINE
 *

1454 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1456 
__d0
, 
__d1
;

1457 *
__ªs
;

1458 
__asm__
 
__vﬁ©ûe__


1468 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1469 : "0" (0), "1" (
__s
), "2" (
__c
),

1470 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1472  
__ªs
;

1473 
	}
}

1475 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1477 
__STRING_INLINE
 *

1478 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1480 
__d0
, 
__d1
;

1481 *
__ªs
;

1482 
__asm__
 
__vﬁ©ûe__


1493 : "Ù" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1494 : "0" (0), "1" (
__s
), "2" (
__c
),

1495 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1497  
__ªs
;

1498 
	}
}

1502 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


1504 
	#_HAVE_STRING_ARCH_rödex
 1

	)

1505 
	#rödex
(
s
, 
c
) \

1506 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1507 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1508 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1514 
	#_HAVE_STRING_ARCH_°rc•n
 1

	)

1515 
	#°rc•n
(
s
, 
ªje˘
) \

1516 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
) &&  ((reject)[0]) == 1 \

1517 ? ((
ªje˘
)[0] == '\0' \

1518 ? 
	`°æí
 (
s
) \

1519 : ((
ªje˘
)[1] == '\0' \

1520 ? 
	`__°rc•n_c1
 ((
s
), (((
ªje˘
)[0] << 8) & 0xff00)) \

1521 : 
	`__°rc•n_cg
 ((
s
), (
ªje˘
), 
	`°æí
 (reject)))) \

1522 : 
	`__°rc•n_g
 ((
s
), (
ªje˘
))))

	)

1524 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

1526 #i‚de‡
_FORCE_INLINES


1527 
__STRING_INLINE
 
size_t


1528 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

1530 
__d0
;

1531 *
__ªs
;

1532 
__asm__
 
__vﬁ©ûe__


1541 : "Ù" (
__ªs
), "=&a" (
__d0
)

1542 : "0" (
__s
), "1" (
__ªje˘
),

1543 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1545  (
__ªs
 - 1Ë- 
__s
;

1546 
	}
}

1549 
__STRING_INLINE
 
size_t
 
__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[],

1550 
size_t
 
__ªje˘_Àn
);

1552 
__STRING_INLINE
 
size_t


1553 
	$__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[], 
size_t
 
__ªje˘_Àn
)

1555 
__d0
, 
__d1
, 
__d2
;

1556 c⁄° *
__ªs
;

1557 
__asm__
 
__vﬁ©ûe__


1568 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1569 : "0" (
__s
), "d" (
__ªje˘
), "g" (
__ªje˘_Àn
)

1571  (
__ªs
 - 1Ë- 
__s
;

1572 
	}
}

1574 
__STRING_INLINE
 
size_t
 
__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
);

1575 #ifde‡
__PIC__


1577 
__STRING_INLINE
 
size_t


1578 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1580 
__d0
, 
__d1
, 
__d2
;

1581 c⁄° *
__ªs
;

1582 
__asm__
 
__vﬁ©ûe__


1599 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1600 : "r" (
__ªje˘
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1602  (
__ªs
 - 1Ë- 
__s
;

1603 
	}
}

1605 
__STRING_INLINE
 
size_t


1606 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1608 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1609 c⁄° *
__ªs
;

1610 
__asm__
 
__vﬁ©ûe__


1624 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1625 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ªje˘
), "b" (__reject)

1628  (
__ªs
 - 1Ë- 
__s
;

1629 
	}
}

1635 
	#_HAVE_STRING_ARCH_°r•n
 1

	)

1636 
	#°r•n
(
s
, 
ac˚±
) \

1637 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1638 ? ((
ac˚±
)[0] == '\0' \

1639 ? ((Ë(
s
), 0) \

1640 : ((
ac˚±
)[1] == '\0' \

1641 ? 
	`__°r•n_c1
 ((
s
), (((
ac˚±
)[0] << 8 ) & 0xff00)) \

1642 : 
	`__°r•n_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1643 : 
	`__°r•n_g
 ((
s
), (
ac˚±
))))

	)

1645 #i‚de‡
_FORCE_INLINES


1646 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1648 
__STRING_INLINE
 
size_t


1649 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1651 
__d0
;

1652 *
__ªs
;

1654 
__asm__
 
__vﬁ©ûe__


1660 : "Ù" (
__ªs
), "=&q" (
__d0
)

1661 : "0" (
__s
), "1" (
__ac˚±
),

1662 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1664  (
__ªs
 - 1Ë- 
__s
;

1665 
	}
}

1668 
__STRING_INLINE
 
size_t
 
__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1669 
size_t
 
__ac˚±_Àn
);

1671 
__STRING_INLINE
 
size_t


1672 
	$__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1674 
__d0
, 
__d1
, 
__d2
;

1675 c⁄° *
__ªs
;

1676 
__asm__
 
__vﬁ©ûe__


1687 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1688 : "0" (
__s
), "g" (
__ac˚±
), "g" (
__ac˚±_Àn
),

1691 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
),

1692 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__ac˚±_Àn
]; } *)
__ac˚±
)

1694  (
__ªs
 - 1Ë- 
__s
;

1695 
	}
}

1697 
__STRING_INLINE
 
size_t
 
__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1698 #ifde‡
__PIC__


1700 
__STRING_INLINE
 
size_t


1701 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1703 
__d0
, 
__d1
, 
__d2
;

1704 c⁄° *
__ªs
;

1705 
__asm__
 
__vﬁ©ûe__


1721 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1722 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (__accept)

1724  (
__ªs
 - 1Ë- 
__s
;

1725 
	}
}

1727 
__STRING_INLINE
 
size_t


1728 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1730 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1731 c⁄° *
__ªs
;

1732 
__asm__
 
__vﬁ©ûe__


1746 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1747 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ac˚±
), "b" (__accept)

1749  (
__ªs
 - 1Ë- 
__s
;

1750 
	}
}

1755 
	#_HAVE_STRING_ARCH_°Ωbrk
 1

	)

1756 
	#°Ωbrk
(
s
, 
ac˚±
) \

1757 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1758 ? ((
ac˚±
)[0] == '\0' \

1759 ? ((Ë(
s
), (*) 0) \

1760 : ((
ac˚±
)[1] == '\0' \

1761 ? 
	`°rchr
 ((
s
), (
ac˚±
)[0]) \

1762 : 
	`__°Ωbrk_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1763 : 
	`__°Ωbrk_g
 ((
s
), (
ac˚±
))))

	)

1765 
__STRING_INLINE
 *
__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1766 
size_t
 
__ac˚±_Àn
);

1768 
__STRING_INLINE
 *

1769 
	$__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1771 
__d0
, 
__d1
, 
__d2
;

1772 *
__ªs
;

1773 
__asm__
 
__vﬁ©ûe__


1788 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1789 : "0" (
__s
), "d" (
__ac˚±
), "g" (
__ac˚±_Àn
)

1791  
__ªs
;

1792 
	}
}

1794 
__STRING_INLINE
 *
__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1795 #ifde‡
__PIC__


1797 
__STRING_INLINE
 *

1798 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1800 
__d0
, 
__d1
, 
__d2
;

1801 *
__ªs
;

1802 
__asm__
 
__vﬁ©ûe__


1823 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1824 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1826  
__ªs
;

1827 
	}
}

1829 
__STRING_INLINE
 *

1830 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1832 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1833 *
__ªs
;

1834 
__asm__
 
__vﬁ©ûe__


1853 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&d" (
__d2
), "=&D" (
__d3
)

1854 : "0" (
__s
), "1" (0), "2" (0xffffffff), "b" (
__ac˚±
)

1856  
__ªs
;

1857 
	}
}

1862 
	#_HAVE_STRING_ARCH_°r°r
 1

	)

1863 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1864 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
) &&  ((needle)[0]) == 1 \

1865 ? ((
√edÀ
)[0] == '\0' \

1866 ? (
hay°ack
) \

1867 : ((
√edÀ
)[1] == '\0' \

1868 ? 
	`°rchr
 ((
hay°ack
), (
√edÀ
)[0]) \

1869 : 
	`__°r°r_cg
 ((
hay°ack
), (
√edÀ
), \

1870 
	`°æí
 (
√edÀ
)))) \

1871 : 
	`__°r°r_g
 ((
hay°ack
), (
√edÀ
))))

	)

1875 
__STRING_INLINE
 *
__°r°r_cg
 (c⁄° *
__hay°ack
,

1876 c⁄° 
__√edÀ
[],

1877 
size_t
 
__√edÀ_Àn
);

1879 
__STRING_INLINE
 *

1880 
	$__°r°r_cg
 (c⁄° *
__hay°ack
, c⁄° 
__√edÀ
[],

1881 
size_t
 
__√edÀ_Àn
)

1883 
__d0
, 
__d1
, 
__d2
;

1884 *
__ªs
;

1885 
__asm__
 
__vﬁ©ûe__


1898 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

1899 : "g" (
__√edÀ_Àn
), "1" (
__hay°ack
), "d" (
__√edÀ
)

1901  
__ªs
;

1902 
	}
}

1904 
__STRING_INLINE
 *
__°r°r_g
 (c⁄° *
__hay°ack
,

1905 c⁄° *
__√edÀ
);

1906 #ifde‡
__PIC__


1908 
__STRING_INLINE
 *

1909 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1911 
__d0
, 
__d1
, 
__d2
;

1912 *
__ªs
;

1913 
__asm__
 
__vﬁ©ûe__


1932 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
)

1933 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1934 "d" (
__√edÀ
)

1936  
__ªs
;

1937 
	}
}

1939 
__STRING_INLINE
 *

1940 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1942 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1943 *
__ªs
;

1944 
__asm__
 
__vﬁ©ûe__


1961 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1962 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1963 "b" (
__√edÀ
)

1965  
__ªs
;

1966 
	}
}

1972 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


1973 #ifde‡
__i686__


1974 
	#_HAVE_STRING_ARCH_ffs
 1

	)

1975 
	#ffs
(
w‹d
Ë(
	`__buûtö_c⁄°™t_p
 (word) \

1976 ? 
	`__buûtö_ffs
 (
w‹d
) \

1977 : ({ 
__˙t
, 
__tmp
; \

1978 
__asm__
 
__vﬁ©ûe__
 \

1981 : "=&r" (
__˙t
), "Ù" (
__tmp
) \

1982 : "rm" (
w‹d
), "1" (-1)); \

1983 
__˙t
 + 1; }))

	)

1985 #i‚de‡
ff¶


1986 
	#ff¶
(
w‹d
Ë
	`ffs
(w‹d)

	)

1991 #i‚de‡
_FORCE_INLINES


1992 #unde‡
__STRING_INLINE


	@/usr/include/bits/string2.h

20 #i‚de‡
_STRING_H


24 #i‚de‡
__NO_STRING_INLINES


41 #i‚de‡
__STRING_INLINE


42 #ifde‡
__˝lu•lus


43 
	#__STRING_INLINE
 
ölöe


	)

45 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

49 #i‡
_STRING_INLINE_u«lig√d


51 
	~<ídün.h
>

52 
	~<bôs/ty≥s.h
>

54 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


55 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

56 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

57 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

58 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

59 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

60 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

61 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

62 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

64 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

65 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

66 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1])

	)

67 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

68 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

69 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

70 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

71 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3])

	)

76 
	#__STRING2_COPY_TYPE
(
N
) \

77 °ru˘ { 
__¨r
[
N
]; } \

78 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

79 
	t__STRING2_COPY_TYPE
 (2);

80 
__STRING2_COPY_TYPE
 (3);

81 
__STRING2_COPY_TYPE
 (4);

82 
__STRING2_COPY_TYPE
 (5);

83 
__STRING2_COPY_TYPE
 (6);

84 
__STRING2_COPY_TYPE
 (7);

85 
__STRING2_COPY_TYPE
 (8);

86 #unde‡
__STRING2_COPY_TYPE


92 
	#__°rög2_1b±r_p
(
__x
) \

93 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

96 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


97 #i‡!
__GNUC_PREREQ
 (3, 0)

98 #i‡
_STRING_INLINE_u«lig√d


99 
	#mem£t
(
s
, 
c
, 
n
) \

100 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

101 ? ((
n
) == 1 \

102 ? 
	`__mem£t_1
 (
s
, 
c
) \

103 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

104 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

105 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

106 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

108 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

109 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

111 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

112 ({ *
__s
 = (
s
); \

114 
__ui
; \

115 
__usi
; \

116 
__uc
; \

117 } *
__u
 = 
__s
; \

118 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

121 (Ë(
n
)) \

124 
__u
->
__ui
 = 
__c
 * 0x01010101; \

125 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

127 
__u
->
__ui
 = 
__c
 * 0x01010101; \

128 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

130 
__u
->
__ui
 = 
__c
 * 0x01010101; \

131 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

133 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

134 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

135 
__u
->
__uc
 = (Ë
__c
; \

139 
__u
->
__ui
 = 
__c
 * 0x01010101; \

140 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

142 
__u
->
__ui
 = 
__c
 * 0x01010101; \

143 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

145 
__u
->
__ui
 = 
__c
 * 0x01010101; \

146 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

148 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

152 
__u
->
__ui
 = 
__c
 * 0x01010101; \

153 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

155 
__u
->
__ui
 = 
__c
 * 0x01010101; \

156 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

158 
__u
->
__ui
 = 
__c
 * 0x01010101; \

159 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

161 
__u
->
__uc
 = (Ë
__c
; \

165 
__u
->
__ui
 = 
__c
 * 0x01010101; \

166 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

168 
__u
->
__ui
 = 
__c
 * 0x01010101; \

169 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

171 
__u
->
__ui
 = 
__c
 * 0x01010101; \

172 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

174 
__u
->
__ui
 = 
__c
 * 0x01010101; \

179 
__s
; })

	)

181 
	#mem£t
(
s
, 
c
, 
n
) \

182 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

183 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

184 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

193 #i‡
__GNUC_PREREQ
 (2, 91)

194 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

202 #ifde‡
__USE_GNU


203 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


204 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


205 #i‡
__GNUC_PREREQ
 (3, 4)

206 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

207 #ñi‡
__GNUC_PREREQ
 (3, 0)

208 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

209 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

210 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

211 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

212 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

214 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

215 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

216 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

217 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

218 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

222 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

225 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


226 #i‡
_STRING_INLINE_u«lig√d


227 #i‚de‡
_FORCE_INLINES


228 
	#__memp˝y_¨gs
(
§c
) \

229 ((c⁄° *Ë(
§c
))[0], ((const *) (src))[2], \

230 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[6], \

231 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

236 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

237 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

238 
__uöt32_t
, 
size_t
);

239 
__STRING_INLINE
 *

240 
	$__memp˝y_smÆl
 (*
__de°1
,

241 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

242 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

243 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

244 
size_t
 
__§˛í
)

247 
__uöt32_t
 
__ui
;

248 
__uöt16_t
 
__usi
;

249 
__uc
;

250 
__c
;

251 } *
__u
 = 
__de°1
;

252 (Ë
__§˛í
)

255 
__u
->
__c
 = 
__§c0_1
;

256 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

259 
__u
->
__usi
 = 
__§c0_2
;

260 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

263 
__u
->
__usi
 = 
__§c0_2
;

264 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

265 
__u
->
__c
 = 
__§c2_1
;

266 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

269 
__u
->
__ui
 = 
__§c0_4
;

270 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

273 
__u
->
__ui
 = 
__§c0_4
;

274 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

275 
__u
->
__c
 = 
__§c4_1
;

276 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

279 
__u
->
__ui
 = 
__§c0_4
;

280 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

281 
__u
->
__usi
 = 
__§c4_2
;

282 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

285 
__u
->
__ui
 = 
__§c0_4
;

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

287 
__u
->
__usi
 = 
__§c4_2
;

288 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

289 
__u
->
__c
 = 
__§c6_1
;

290 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

293 
__u
->
__ui
 = 
__§c0_4
;

294 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

295 
__u
->
__ui
 = 
__§c4_4
;

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

299  (*Ë
__u
;

300 
	}
}

302 #i‚de‡
_FORCE_INLINES


303 
	#__memp˝y_¨gs
(
§c
) \

304 ((c⁄° *Ë(
§c
))[0], \

305 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

306 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1] } }), \

307 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

308 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

309 ((c⁄° *Ë(
§c
))[2] } }), \

310 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

311 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

312 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3] } }), \

313 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

314 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

315 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

316 ((c⁄° *Ë(
§c
))[4] } }), \

317 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

318 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

319 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

320 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5] } }), \

321 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

322 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

323 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

324 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

325 ((c⁄° *Ë(
§c
))[6] } }), \

326 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

327 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

328 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

329 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

330 ((c⁄° *Ë(
§c
))[6], ((c⁄° *Ë(§c))[7] } })

	)

332 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

333 
__STRING2_COPY_ARR3
,

334 
__STRING2_COPY_ARR4
,

335 
__STRING2_COPY_ARR5
,

336 
__STRING2_COPY_ARR6
,

337 
__STRING2_COPY_ARR7
,

338 
__STRING2_COPY_ARR8
, 
size_t
);

339 
__STRING_INLINE
 *

340 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

341 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

342 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

343 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

344 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

347 
__c
;

348 
__STRING2_COPY_ARR2
 
__sˇ2
;

349 
__STRING2_COPY_ARR3
 
__sˇ3
;

350 
__STRING2_COPY_ARR4
 
__sˇ4
;

351 
__STRING2_COPY_ARR5
 
__sˇ5
;

352 
__STRING2_COPY_ARR6
 
__sˇ6
;

353 
__STRING2_COPY_ARR7
 
__sˇ7
;

354 
__STRING2_COPY_ARR8
 
__sˇ8
;

355 } *
__u
 = 
__de°
;

356 (Ë
__§˛í
)

359 
__u
->
__c
 = 
__§c1
;

362 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

365 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

368 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

371 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

374 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

377 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

380 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

383  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

384 
	}
}

392 #i‚de‡
_HAVE_STRING_ARCH_°rchr


393 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

394 #i‡
__GNUC_PREREQ
 (3, 2)

395 
	#°rchr
(
s
, 
c
) \

396 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

397 && (
c
) == '\0' \

398 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

399 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

401 
	#°rchr
(
s
, 
c
) \

402 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

403 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

404 : 
	`°rchr
 (
s
, 
c
)))

	)

410 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

411 || 
deföed
 
	g_FORCE_INLINES


412 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

413 
	#°r˝y
(
de°
, 
§c
) \

414 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

415 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

416 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

417 
	`°æí
 (
§c
) + 1) \

418 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

419 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

422 #i‡
_STRING_INLINE_u«lig√d


423 #i‚de‡
_FORCE_INLINES


424 
	#__°r˝y_¨gs
(
§c
) \

425 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

430 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

431 
__uöt32_t
, __uöt32_t, 
size_t
);

432 
__STRING_INLINE
 *

433 
	$__°r˝y_smÆl
 (*
__de°
,

434 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

435 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

436 
size_t
 
__§˛í
)

439 
__uöt32_t
 
__ui
;

440 
__uöt16_t
 
__usi
;

441 
__uc
;

442 } *
__u
 = (*Ë
__de°
;

443 (Ë
__§˛í
)

446 
__u
->
__uc
 = '\0';

449 
__u
->
__usi
 = 
__§c0_2
;

452 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

454 
__u
->
__uc
 = '\0';

457 
__u
->
__ui
 = 
__§c0_4
;

460 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

462 
__u
->
__uc
 = '\0';

465 
__u
->
__ui
 = 
__§c0_4
;

466 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

467 
__u
->
__usi
 = 
__§c4_2
;

470 
__u
->
__ui
 = 
__§c0_4
;

471 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

472 
__u
->
__usi
 = 
__§c4_2
;

473 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

474 
__u
->
__uc
 = '\0';

477 
__u
->
__ui
 = 
__§c0_4
;

478 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

479 
__u
->
__ui
 = 
__§c4_4
;

482  
__de°
;

483 
	}
}

485 #i‚de‡
_FORCE_INLINES


486 
	#__°r˝y_¨gs
(
§c
) \

487 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

488 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

489 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

490 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

492 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

493 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

494 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

495 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

496 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

497 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

499 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

500 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

501 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

502 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

503 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

504 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

505 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

506 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

508 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

509 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

510 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

511 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

512 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

514 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

515 
__STRING2_COPY_ARR3
,

516 
__STRING2_COPY_ARR4
,

517 
__STRING2_COPY_ARR5
,

518 
__STRING2_COPY_ARR6
,

519 
__STRING2_COPY_ARR7
,

520 
__STRING2_COPY_ARR8
, 
size_t
);

521 
__STRING_INLINE
 *

522 
	$__°r˝y_smÆl
 (*
__de°
,

523 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

524 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

525 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

526 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

529 
__c
;

530 
__STRING2_COPY_ARR2
 
__sˇ2
;

531 
__STRING2_COPY_ARR3
 
__sˇ3
;

532 
__STRING2_COPY_ARR4
 
__sˇ4
;

533 
__STRING2_COPY_ARR5
 
__sˇ5
;

534 
__STRING2_COPY_ARR6
 
__sˇ6
;

535 
__STRING2_COPY_ARR7
 
__sˇ7
;

536 
__STRING2_COPY_ARR8
 
__sˇ8
;

537 } *
__u
 = (*Ë
__de°
;

538 (Ë
__§˛í
)

541 
__u
->
__c
 = '\0';

544 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

547 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

550 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

553 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

556 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

559 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

562 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

565  
__de°
;

566 
	}
}

572 #ifde‡
__USE_GNU


573 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


574 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


575 #i‡
__GNUC_PREREQ
 (3, 4)

576 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

577 #ñi‡
__GNUC_PREREQ
 (3, 0)

578 
	#__°p˝y
(
de°
, 
§c
) \

579 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

580 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

581 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

582 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

584 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

586 
	#__°p˝y
(
de°
, 
§c
) \

587 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

588 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

589 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

590 
	`°æí
 (
§c
) + 1) \

591 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

593 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

597 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

600 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


601 #i‡
_STRING_INLINE_u«lig√d


602 #i‚de‡
_FORCE_INLINES


603 
	#__°p˝y_¨gs
(
§c
) \

604 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

609 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

610 
__uöt32_t
, __uöt32_t, 
size_t
);

611 
__STRING_INLINE
 *

612 
	$__°p˝y_smÆl
 (*
__de°
,

613 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

614 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

615 
size_t
 
__§˛í
)

618 
__ui
;

619 
__usi
;

620 
__uc
;

621 
__c
;

622 } *
__u
 = (*Ë
__de°
;

623 (Ë
__§˛í
)

626 
__u
->
__uc
 = '\0';

629 
__u
->
__usi
 = 
__§c0_2
;

630 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

633 
__u
->
__usi
 = 
__§c0_2
;

634 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

635 
__u
->
__uc
 = '\0';

638 
__u
->
__ui
 = 
__§c0_4
;

639 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

642 
__u
->
__ui
 = 
__§c0_4
;

643 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

644 
__u
->
__uc
 = '\0';

647 
__u
->
__ui
 = 
__§c0_4
;

648 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

649 
__u
->
__usi
 = 
__§c4_2
;

650 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

653 
__u
->
__ui
 = 
__§c0_4
;

654 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

655 
__u
->
__usi
 = 
__§c4_2
;

656 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

657 
__u
->
__uc
 = '\0';

660 
__u
->
__ui
 = 
__§c0_4
;

661 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

662 
__u
->
__ui
 = 
__§c4_4
;

663 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

666  &
__u
->
__c
;

667 
	}
}

669 #i‚de‡
_FORCE_INLINES


670 
	#__°p˝y_¨gs
(
§c
) \

671 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

672 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

673 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

674 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

676 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

677 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

678 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

679 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

680 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

681 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

683 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

684 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

685 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

686 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

687 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

688 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

689 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

690 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

692 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

693 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

694 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

695 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

696 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

698 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

699 
__STRING2_COPY_ARR3
,

700 
__STRING2_COPY_ARR4
,

701 
__STRING2_COPY_ARR5
,

702 
__STRING2_COPY_ARR6
,

703 
__STRING2_COPY_ARR7
,

704 
__STRING2_COPY_ARR8
, 
size_t
);

705 
__STRING_INLINE
 *

706 
	$__°p˝y_smÆl
 (*
__de°
,

707 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

708 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

709 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

710 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

713 
__c
;

714 
__STRING2_COPY_ARR2
 
__sˇ2
;

715 
__STRING2_COPY_ARR3
 
__sˇ3
;

716 
__STRING2_COPY_ARR4
 
__sˇ4
;

717 
__STRING2_COPY_ARR5
 
__sˇ5
;

718 
__STRING2_COPY_ARR6
 
__sˇ6
;

719 
__STRING2_COPY_ARR7
 
__sˇ7
;

720 
__STRING2_COPY_ARR8
 
__sˇ8
;

721 } *
__u
 = (*Ë
__de°
;

722 (Ë
__§˛í
)

725 
__u
->
__c
 = '\0';

728 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

731 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

734 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

737 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

740 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

743 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

746 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

749  
__de°
 + 
__§˛í
 - 1;

750 
	}
}

758 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


759 #i‡
__GNUC_PREREQ
 (3, 2)

760 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

762 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

763 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

764 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

765 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

766 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

773 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


774 #ifde‡
_USE_STRING_ARCH_°rchr


775 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

776 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

777 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

778 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

779 ? 
	`°rˇt
 (
__de°
, 
§c
) \

780 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

781 
§c
, 
n
)Ë'\0', 
__de°
)) \

782 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

783 #ñi‡
__GNUC_PREREQ
 (3, 2)

784 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

786 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

787 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

788 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

789 ? 
	`°rˇt
 (
de°
, 
§c
) \

790 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

797 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


798 #i‡
__GNUC_PREREQ
 (3, 2)

799 
	#°rcmp
(
s1
, 
s2
) \

800 
__exãnsi⁄__
 \

801 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

802 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

803 && (
__s1_Àn
 = 
	`__buûtö_°æí
 (
s1
), 
__s2_Àn
 = __buûtö_°æí (
s2
), \

804 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

805 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

806 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

807 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

808 && (
__s1_Àn
 = 
	`__buûtö_°æí
 (
s1
), __s1_len < 4) \

809 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

810 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

811 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

812 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

813 && (
__s2_Àn
 = 
	`__buûtö_°æí
 (
s2
), __s2_len < 4) \

814 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

815 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

816 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

817 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

819 
	#°rcmp
(
s1
, 
s2
) \

820 
__exãnsi⁄__
 \

821 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

822 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

823 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

824 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

825 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

826 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

827 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

828 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

829 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

830 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

831 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

832 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

833 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

834 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

835 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

836 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

837 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

838 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

841 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

842 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

843 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

844 - ((c⁄° *Ë(c⁄° *)(
s2
))[0]); \

845 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

847 
__ªsu…
 = (((const *) \

848 (c⁄° *Ë(
s1
))[1] \

850 (c⁄° *Ë(
s2
))[1]); \

851 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

853 
__ªsu…
 = \

855 (c⁄° *Ë(
s1
))[2] \

857 (c⁄° *Ë(
s2
))[2]); \

858 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

859 
__ªsu…
 = \

861 (c⁄° *Ë(
s1
))[3] \

863 (c⁄° *Ë(
s2
))[3]); \

866 
__ªsu…
; }))

	)

868 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

869 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = \

870 (c⁄° *Ë(c⁄° *Ë(
s2
); \

871 
__ªsu…
 = \

872 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

873 - 
__s2
[0]); \

874 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

876 
__ªsu…
 = (((const *) \

877 (c⁄° *Ë(
s1
))[1] - 
__s2
[1]); \

878 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

880 
__ªsu…
 = (((const *) \

881 (c⁄° *Ë(
s1
))[2] - 
__s2
[2]); \

882 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

883 
__ªsu…
 = (((const *) \

884 (c⁄° *Ë(
s1
))[3] \

885 - 
__s2
[3]); \

888 
__ªsu…
; }))

	)

890 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
Ë(- 
	`__°rcmp_cg
 (s2, s1,Ü2))

	)

895 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


896 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

897 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

898 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

899 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

900 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

901 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

902 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

908 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


909 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


910 #i‡
__GNUC_PREREQ
 (3, 2)

911 
	#°rc•n
(
s
, 
ªje˘
) \

912 
__exãnsi⁄__
 \

913 ({ 
__r0
, 
__r1
, 
__r2
; \

914 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

915 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

916 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

917 : ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

918 ? 
	`°æí
 (
s
) \

919 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

920 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

921 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

922 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

923 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

924 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

925 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

926 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

928 
	#°rc•n
(
s
, 
ªje˘
) \

929 
__exãnsi⁄__
 \

930 ({ 
__r0
, 
__r1
, 
__r2
; \

931 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

932 ? ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

933 ? 
	`°æí
 (
s
) \

934 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

935 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

936 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

937 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

938 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

939 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

940 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

941 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

945 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

946 
__STRING_INLINE
 
size_t


947 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

949 
size_t
 
__ªsu…
 = 0;

950 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

951 ++
__ªsu…
;

952  
__ªsu…
;

953 
	}
}

955 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
,

956 
__ªje˘2
);

957 
__STRING_INLINE
 
size_t


958 
	$__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
)

960 
size_t
 
__ªsu…
 = 0;

961 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


962 && 
__s
[
__ªsu…
] !
__ªje˘2
)

963 ++
__ªsu…
;

964  
__ªsu…
;

965 
	}
}

967 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
,

968 
__ªje˘2
, 
__ªje˘3
);

969 
__STRING_INLINE
 
size_t


970 
	$__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
,

971 
__ªje˘3
)

973 
size_t
 
__ªsu…
 = 0;

974 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


975 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

976 ++
__ªsu…
;

977  
__ªsu…
;

978 
	}
}

984 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


985 #i‚de‡
_HAVE_STRING_ARCH_°r•n


986 #i‡
__GNUC_PREREQ
 (3, 2)

987 
	#°r•n
(
s
, 
ac˚±
) \

988 
__exãnsi⁄__
 \

989 ({ 
__a0
, 
__a1
, 
__a2
; \

990 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

991 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

992 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

993 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

994 ? ((Ë(
s
), (
size_t
) 0) \

995 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

996 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

997 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

998 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

999 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1000 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1001 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1002 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1004 
	#°r•n
(
s
, 
ac˚±
) \

1005 
__exãnsi⁄__
 \

1006 ({ 
__a0
, 
__a1
, 
__a2
; \

1007 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1008 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1009 ? ((Ë(
s
), (
size_t
) 0) \

1010 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1011 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1012 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1013 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1014 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1015 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1016 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1017 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1021 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1022 
__STRING_INLINE
 
size_t


1023 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1025 
size_t
 
__ªsu…
 = 0;

1027 
__s
[
__ªsu…
] =
__ac˚±
)

1028 ++
__ªsu…
;

1029  
__ªsu…
;

1030 
	}
}

1032 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1033 
__ac˚±2
);

1034 
__STRING_INLINE
 
size_t


1035 
	$__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1037 
size_t
 
__ªsu…
 = 0;

1039 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1040 ++
__ªsu…
;

1041  
__ªsu…
;

1042 
	}
}

1044 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1045 
__ac˚±2
, 
__ac˚±3
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1049 
size_t
 
__ªsu…
 = 0;

1051 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1052 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1053 ++
__ªsu…
;

1054  
__ªsu…
;

1055 
	}
}

1060 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1061 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1062 #i‡
__GNUC_PREREQ
 (3, 2)

1063 
	#°Ωbrk
(
s
, 
ac˚±
) \

1064 
__exãnsi⁄__
 \

1065 ({ 
__a0
, 
__a1
, 
__a2
; \

1066 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1067 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1068 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1069 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1070 ? ((Ë(
s
), (*Ë
NULL
) \

1071 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1072 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1073 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1074 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1075 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1076 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1077 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1078 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1080 
	#°Ωbrk
(
s
, 
ac˚±
) \

1081 
__exãnsi⁄__
 \

1082 ({ 
__a0
, 
__a1
, 
__a2
; \

1083 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1084 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1085 ? ((Ë(
s
), (*Ë
NULL
) \

1086 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1087 ? 
	`°rchr
 (
s
, 
__a0
) \

1088 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1089 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1090 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1091 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1092 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1093 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1097 
__STRING_INLINE
 *
__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1098 
__ac˚±2
);

1099 
__STRING_INLINE
 *

1100 
	$__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1103 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1104 ++
__s
;

1105  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1106 
	}
}

1108 
__STRING_INLINE
 *
__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1109 
__ac˚±2
, 
__ac˚±3
);

1110 
__STRING_INLINE
 *

1111 
	$__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1114 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1115 && *
__s
 !
__ac˚±3
)

1116 ++
__s
;

1117  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1118 
	}
}

1124 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1125 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1126 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1127 ? (((c⁄° *Ë(
√edÀ
))[0] == '\0' \

1128 ? (*Ë(
size_t
Ë(
hay°ack
) \

1129 : (((c⁄° *Ë(
√edÀ
))[1] == '\0' \

1130 ? 
	`°rchr
 (
hay°ack
, \

1131 ((c⁄° *Ë(
√edÀ
))[0]) \

1132 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1133 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1137 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1138 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1139 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1140 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1141 && ((c⁄° *Ë(
£p
))[0] != '\0' \

1142 && ((c⁄° *Ë(
£p
))[1] == '\0' \

1143 ? 
	`__°πok_r_1c
 (
s
, ((c⁄° *Ë(
£p
))[0], 
√xç
) \

1144 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1147 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1148 
__STRING_INLINE
 *

1149 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1151 *
__ªsu…
;

1152 i‡(
__s
 =
NULL
)

1153 
__s
 = *
__√xç
;

1154 *
__s
 =
__£p
)

1155 ++
__s
;

1156 
__ªsu…
 = 
NULL
;

1157 i‡(*
__s
 != '\0')

1159 
__ªsu…
 = 
__s
++;

1160 *
__s
 != '\0')

1161 i‡(*
__s
++ =
__£p
)

1163 
__s
[-1] = '\0';

1167 *
__√xç
 = 
__s
;

1168  
__ªsu…
;

1169 
	}
}

1170 #ifde‡
__USE_POSIX


1171 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1176 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1177 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1179 *
__°r£p_g
 (**
__°rögp
, c⁄° *
__dñim
);

1180 
	#__°r£p
(
s
, 
ªje˘
) \

1181 
__exãnsi⁄__
 \

1182 ({ 
__r0
, 
__r1
, 
__r2
; \

1183 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1184 && (
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], \

1185 ((c⁄° *Ë(
ªje˘
))[0] != '\0') \

1186 ? ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], \

1187 ((c⁄° *Ë(
ªje˘
))[1] == '\0') \

1188 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1189 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

1190 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1191 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

1192 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1193 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1194 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1197 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1198 
__STRING_INLINE
 *

1199 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1201 *
__ªtvÆ
 = *
__s
;

1202 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1203 *(*
__s
)++ = '\0';

1204  
__ªtvÆ
;

1205 
	}
}

1207 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1208 
__STRING_INLINE
 *

1209 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1211 *
__ªtvÆ
 = *
__s
;

1212 i‡(
__ªtvÆ
 !
NULL
)

1214 *
__˝
 = 
__ªtvÆ
;

1217 i‡(*
__˝
 == '\0')

1219 
__˝
 = 
NULL
;

1222 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1224 *
__˝
++ = '\0';

1227 ++
__˝
;

1229 *
__s
 = 
__˝
;

1231  
__ªtvÆ
;

1232 
	}
}

1234 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1235 
__ªje˘3
);

1236 
__STRING_INLINE
 *

1237 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1239 *
__ªtvÆ
 = *
__s
;

1240 i‡(
__ªtvÆ
 !
NULL
)

1242 *
__˝
 = 
__ªtvÆ
;

1245 i‡(*
__˝
 == '\0')

1247 
__˝
 = 
NULL
;

1250 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1252 *
__˝
++ = '\0';

1255 ++
__˝
;

1257 *
__s
 = 
__˝
;

1259  
__ªtvÆ
;

1260 
	}
}

1261 #ifde‡
__USE_MISC


1262 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1269 #ifde‡
__USE_MISC


1271 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1272 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1273 
	~<°dlib.h
>

1276 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1278 *
	$__°rdup
 (c⁄° *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1279 
	#__°rdup
(
s
) \

1280 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1281 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1282 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1283 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1284 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1285 i‡(
__ªtvÆ
 !
NULL
) \

1286 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1287 
__ªtvÆ
; 
	}
})) \

1288 : 
	`__°rdup
 (
s
)))

	)

1290 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


1291 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1295 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1297 *
	$__°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

1298 
__THROW
 
__©åibuã_mÆloc__
;

1299 
	#__°∫dup
(
s
, 
n
) \

1300 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1301 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1302 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1303 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1304 
size_t
 
__n
 = (
n
); \

1305 *
__ªtvÆ
; \

1306 i‡(
__n
 < 
__Àn
) \

1307 
__Àn
 = 
__n
 + 1; \

1308 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1309 i‡(
__ªtvÆ
 !
NULL
) \

1311 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1312 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1313 
__Àn
 - 1); \

1315 
__ªtvÆ
; 
	}
})) \

1316 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1318 #ifde‡
__USE_XOPEN2K8


1319 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1325 #i‚de‡
_FORCE_INLINES


1326 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

18 #i‚de‡
_STRING_H


22 #i‡!
__GNUC_PREREQ
 (5,0)

23 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

27 #i‚de‡
__˝lu•lus


31 #unde‡
mem˝y


32 #unde‡
memmove


33 #unde‡
mem£t


34 #unde‡
°rˇt


35 #unde‡
°r˝y


36 #unde‡
°∫ˇt


37 #unde‡
°∫˝y


38 #ifde‡
__USE_GNU


39 #unde‡
memp˝y


40 #unde‡
°p˝y


42 #ifde‡
__USE_MISC


43 #unde‡
bc›y


44 #unde‡
bzîo


49 
__f‹tify_fun˘i⁄
 *

50 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

51 
size_t
 
__Àn
))

53  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

54 
	}
}

56 
__f‹tify_fun˘i⁄
 *

57 
__NTH
 (
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__Àn
))

59  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

60 
	}
}

62 #ifde‡
__USE_GNU


63 
__f‹tify_fun˘i⁄
 *

64 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

65 
size_t
 
__Àn
))

67  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

68 
	}
}

77 
__f‹tify_fun˘i⁄
 *

78 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

82 #i‡!
	`__GNUC_PREREQ
 (5,0)

83 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

84 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

86 
	`__w¨n_mem£t_zîo_Àn
 ();

87  
__de°
;

90  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

91 
	}
}

93 #ifde‡
__USE_MISC


94 
__f‹tify_fun˘i⁄
 

95 
__NTH
 (
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__Àn
))

97 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

98 
	}
}

100 
__f‹tify_fun˘i⁄
 

101 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

103 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

104 
	}
}

107 
__f‹tify_fun˘i⁄
 *

108 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

110  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

111 
	}
}

113 #ifde‡
__USE_GNU


114 
__f‹tify_fun˘i⁄
 *

115 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

117  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

118 
	}
}

122 
__f‹tify_fun˘i⁄
 *

123 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

124 
size_t
 
__Àn
))

126  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

127 
	}
}

130 *
	$__°≤˝y_chk
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

131 
size_t
 
__de°Àn
Ë
__THROW
;

132 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
, c⁄° *
__§c
,

133 
size_t
 
__n
), 
°≤˝y
);

135 
__f‹tify_fun˘i⁄
 *

136 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
))

138 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

139 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿> 
	`__bos
 (
__de°
)))

140  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

141  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

142 
	}
}

145 
__f‹tify_fun˘i⁄
 *

146 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

148  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

149 
	}
}

152 
__f‹tify_fun˘i⁄
 *

153 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

154 
size_t
 
__Àn
))

156  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

157 
	}
}

	@/usr/include/bits/sys_errlist.h

19 #i‚de‡
_STDIO_H


25 #ifde‡ 
__USE_MISC


26 
sys_√º
;

27 c⁄° *c⁄° 
sys_îæi°
[];

29 #ifde‡ 
__USE_GNU


30 
_sys_√º
;

31 c⁄° *c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/time.h

23 #i‡
deföed
 
__√ed_timevÆ
 || deföed 
__USE_GNU


24 #i‚de‡
_STRUCT_TIMEVAL


25 
	#_STRUCT_TIMEVAL
 1

	)

26 
	~<bôs/ty≥s.h
>

30 
	stimevÆ


32 
__time_t
 
	mtv_£c
;

33 
__su£c⁄ds_t
 
	mtv_u£c
;

38 #i‚de‡
__√ed_timevÆ


39 #i‚de‡
_BITS_TIME_H


40 
	#_BITS_TIME_H
 1

	)

48 
	#CLOCKS_PER_SEC
 ((
˛ock_t
Ë1000000)

	)

50 #i‡(!
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_POSIX
) \

51 && !
deföed
 
	g__USE_XOPEN2K


54 
	~<bôs/ty≥s.h
>

55 
__sysc⁄f
 ();

56 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

59 #ifde‡
__USE_POSIX199309


61 
	#CLOCK_REALTIME
 0

	)

63 
	#CLOCK_MONOTONIC
 1

	)

65 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

67 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

69 
	#CLOCK_MONOTONIC_RAW
 4

	)

71 
	#CLOCK_REALTIME_COARSE
 5

	)

73 
	#CLOCK_MONOTONIC_COARSE
 6

	)

75 
	#CLOCK_BOOTTIME
 7

	)

77 
	#CLOCK_REALTIME_ALARM
 8

	)

79 
	#CLOCK_BOOTTIME_ALARM
 9

	)

81 
	#CLOCK_TAI
 11

	)

84 
	#TIMER_ABSTIME
 1

	)

87 #ifde‡
__USE_GNU


88 
	~<bôs/timex.h
>

90 
__BEGIN_DECLS


93 
	$˛ock_adjtime
 (
__˛ockid_t
 
__˛ock_id
, 
timex
 *
__utx
Ë
__THROW
;

95 
__END_DECLS


101 #unde‡
__√ed_timevÆ


	@/usr/include/bits/types.h

23 #i‚def 
_BITS_TYPES_H


24 
	#_BITS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/w‹dsize.h
>

30 
	t__u_ch¨
;

31 
	t__u_sh‹t
;

32 
	t__u_öt
;

33 
	t__u_l⁄g
;

36 sig√d 
	t__öt8_t
;

37 
	t__uöt8_t
;

38 sig√d 
	t__öt16_t
;

39 
	t__uöt16_t
;

40 sig√d 
	t__öt32_t
;

41 
	t__uöt32_t
;

42 #i‡
__WORDSIZE
 == 64

43 sig√d 
	t__öt64_t
;

44 
	t__uöt64_t
;

46 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

47 
__exãnsi⁄__
 
	t__uöt64_t
;

51 #i‡
__WORDSIZE
 == 64

52 
	t__quad_t
;

53 
	t__u_quad_t
;

55 
__exãnsi⁄__
 
	t__quad_t
;

56 
__exãnsi⁄__
 
	t__u_quad_t
;

89 
	#__S16_TYPE
 

	)

90 
	#__U16_TYPE
 

	)

91 
	#__S32_TYPE
 

	)

92 
	#__U32_TYPE
 

	)

93 
	#__SLONGWORD_TYPE
 

	)

94 
	#__ULONGWORD_TYPE
 

	)

95 #i‡
__WORDSIZE
 == 32

96 
	#__SQUAD_TYPE
 
__quad_t


	)

97 
	#__UQUAD_TYPE
 
__u_quad_t


	)

98 
	#__SWORD_TYPE
 

	)

99 
	#__UWORD_TYPE
 

	)

100 
	#__SLONG32_TYPE
 

	)

101 
	#__ULONG32_TYPE
 

	)

102 
	#__S64_TYPE
 
__quad_t


	)

103 
	#__U64_TYPE
 
__u_quad_t


	)

106 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

107 #ñi‡
__WORDSIZE
 == 64

108 
	t__SQUAD_TYPE
 

	)

109 
	t__UQUAD_TYPE
 

	)

110 
	t__SWORD_TYPE
 

	)

111 
	t__UWORD_TYPE
 

	)

112 
	t__SLONG32_TYPE
 

	)

113 
	t__ULONG32_TYPE
 

	)

114 
	t__S64_TYPE
 

	)

115 
	t__U64_TYPE
 

	)

117 
	t__STD_TYPE
 

	)

121 
	~<bôs/ty≥sizes.h
>

124 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

125 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

126 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

127 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

128 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

129 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

130 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

131 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

132 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

133 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

134 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

135 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

136 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

137 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

138 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

139 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

140 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

141 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

143 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

144 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

147 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

150 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

153 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

158 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

159 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

162 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

163 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

166 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

167 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

170 
__STD_TYPE
 
__FSWORD_T_TYPE
 
	g__fsw‹d_t
;

172 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

175 
__STD_TYPE
 
__SYSCALL_SLONG_TYPE
 
	g__sysˇŒ_¶⁄g_t
;

177 
__STD_TYPE
 
__SYSCALL_ULONG_TYPE
 
	g__sysˇŒ_ul⁄g_t
;

181 
__off64_t
 
	t__loff_t
;

182 
__quad_t
 *
	t__qaddr_t
;

183 *
	t__ˇddr_t
;

186 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

189 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

192 #unde‡
__STD_TYPE


	@/usr/include/bits/unistd.h

19 #i‚de‡
_UNISTD_H


23 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

24 
size_t
 
__buÊí
Ë
__wur
;

25 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

26 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

27 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

28 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

29 
size_t
 
__buÊí
), 
__ªad_chk
)

30 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

33 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


34 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

36 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

38 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

39  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

41 i‡(
__nbyãs
 > 
	`__bos0
 (
__buf
))

42  
	`__ªad_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

44  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

45 
	}
}

47 #ifde‡
__USE_UNIX98


48 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

49 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

50 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

51 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

52 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

53 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

54 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

55 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

56 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

57 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

58 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

60 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

61 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

63 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

64 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

65 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

66 
__¥ód64_chk
)

67 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

70 #i‚de‡
__USE_FILE_OFFSET64


71 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


72 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

74 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

76 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

77  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

79 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

80  
	`__¥ód_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

81 
	`__bos0
 (
__buf
));

83  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

84 
	}
}

86 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


87 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

89 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

91 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

92  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

94 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

95  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

96 
	`__bos0
 (
__buf
));

99  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

100 
	}
}

103 #ifde‡
__USE_LARGEFILE64


104 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


105 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

107 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

109 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

110  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

112 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

113  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

114 
	`__bos0
 (
__buf
));

117  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

118 
	}
}

122 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


123 
ssize_t
 
	$__ªadlök_chk
 (c⁄° *
__ª°ri˘
 
__∑th
,

124 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

125 
size_t
 
__buÊí
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

127 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

128 (c⁄° *
__ª°ri˘
 
__∑th
,

129 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

130 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

131 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

132 (c⁄° *
__ª°ri˘
 
__∑th
,

133 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

134 
size_t
 
__buÊí
), 
__ªadlök_chk
)

135 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

138 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


139 
	`__NTH
 (
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

140 
size_t
 
__Àn
))

142 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

144 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

145  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

147 i‡–
__Àn
 > 
	`__bos
 (
__buf
))

148  
	`__ªadlök_chk_w¨n
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

150  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

151 
	}
}

154 #ifde‡
__USE_ATFILE


155 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

156 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

157 
size_t
 
__buÊí
)

158 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

159 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

160 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

161 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

162 
ªadlök©
)

163 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

164 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

165 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

166 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

167 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

168 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

172 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


173 
	`__NTH
 (
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

174 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

176 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

178 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

179  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

181 i‡(
__Àn
 > 
	`__bos
 (
__buf
))

182  
	`__ªadlök©_chk_w¨n
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
,

183 
	`__bos
 (
__buf
));

185  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

186 
	}
}

189 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

190 
__THROW
 
__wur
;

191 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

192 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

193 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

194 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

195 
__gëcwd_chk
)

196 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

199 
__f‹tify_fun˘i⁄
 
__wur
 *

200 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

202 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

204 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

205  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

207 i‡(
__size
 > 
	`__bos
 (
__buf
))

208  
	`__gëcwd_chk_w¨n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

210  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

211 
	}
}

213 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


214 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

215 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

216 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

217 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

220 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

221 
	`__NTH
 (
	$gëwd
 (*
__buf
))

223 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

224  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

225  
	`__gëwd_w¨n
 (
__buf
);

226 
	}
}

229 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

230 
size_t
 
__buÊí
Ë
__THROW
;

231 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

232 
size_t
 
__Àn
), 
c⁄f°r
);

233 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

234 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

235 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

236 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

239 
__f‹tify_fun˘i⁄
 
size_t


240 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

242 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

244 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

245  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

247 i‡(
	`__bos
 (
__buf
Ë< 
__Àn
)

248  
	`__c⁄f°r_chk_w¨n
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

250  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

251 
	}
}

254 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

255 
__THROW
 
__wur
;

256 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

257 
gëgroups
Ë
__wur
;

258 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

259 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

260 
__gëgroups_chk
)

261 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

264 
__f‹tify_fun˘i⁄
 

265 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

267 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1)

269 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
) || __size < 0)

270  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

272 i‡(
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
))

273  
	`__gëgroups_chk_w¨n
 (
__size
, 
__li°
, 
	`__bos
 (__list));

275  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

276 
	}
}

279 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

280 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

281 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

282 
size_t
 
__buÊí
), 
ây«me_r
)

283 
	`__n⁄nuŒ
 ((2));

284 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

285 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

286 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

287 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

290 
__f‹tify_fun˘i⁄
 

291 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

293 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

295 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

296  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

298 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

299  
	`__ây«me_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

301  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

302 
	}
}

305 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


306 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

307 
	`__n⁄nuŒ
 ((1));

308 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

309 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

310 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

311 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

312 
__gëlogö_r_chk
)

313 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

316 
__f‹tify_fun˘i⁄
 

317 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

319 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

321 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

322  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

324 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

325  
	`__gëlogö_r_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

327  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

328 
	}
}

332 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_UNIX98


333 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

335 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

336 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

337 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

338 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

339 
__gëho°«me_chk
)

340 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

343 
__f‹tify_fun˘i⁄
 

344 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

346 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

349  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

351 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

352  
	`__gëho°«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

354  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

355 
	}
}

359 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

360 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

361 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

362 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

363 
size_t
 
__buÊí
),

364 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

365 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

366 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

367 
__gëdomaö«me_chk
)

368 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

372 
__f‹tify_fun˘i⁄
 

373 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

375 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

377 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

378  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

380 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

381  
	`__gëdomaö«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

383  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

384 
	}
}

	@/usr/include/bits/waitflags.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


25 
	#WNOHANG
 1

	)

26 
	#WUNTRACED
 2

	)

29 
	#WSTOPPED
 2

	)

30 
	#WEXITED
 4

	)

31 
	#WCONTINUED
 8

	)

32 
	#WNOWAIT
 0x01000000

	)

34 
	#__WNOTHREAD
 0x20000000

	)

36 
	#__WALL
 0x40000000

	)

37 
	#__WCLONE
 0x80000000

	)

40 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


41 #i‚de‡
__ENUM_IDTYPE_T


42 
	#__ENUM_IDTYPE_T
 1

	)

46 #unde‡
P_ALL


47 #unde‡
P_PID


48 #unde‡
P_PGID


52 
	mP_ALL
,

53 
	mP_PID
,

54 
	mP_PGID


55 } 
	tidty≥_t
;

	@/usr/include/bits/waitstatus.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


28 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

31 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

34 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

37 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

40 
	#__WIFSIGNALED
(
°©us
) \

41 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

44 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

48 #ifde‡
WCONTINUED


49 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

53 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

56 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

57 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

58 
	#__W_CONTINUED
 0xffff

	)

59 
	#__WCOREFLAG
 0x80

	)

62 #ifdef 
__USE_MISC


64 
	~<ídün.h
>

66 
	uwaô


68 
	mw_°©us
;

71 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


72 
	m__w_ãrmsig
:7;

73 
	m__w_c‹edump
:1;

74 
	m__w_ªtcode
:8;

77 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


79 
	m__w_ªtcode
:8;

80 
	m__w_c‹edump
:1;

81 
	m__w_ãrmsig
:7;

83 } 
	m__waô_ãrmö©ed
;

86 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


87 
	m__w_°›vÆ
:8;

88 
	m__w_°›sig
:8;

91 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


93 
	m__w_°›sig
:8;

94 
	m__w_°›vÆ
:8;

96 } 
	m__waô_°›≥d
;

99 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

100 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

101 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

102 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

103 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/bits/wchar.h

19 #i‚de‡
_BITS_WCHAR_H


20 
	#_BITS_WCHAR_H
 1

	)

33 #ifde‡
__WCHAR_MAX__


34 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

35 #ñi‡
L
'\0' - 1 > 0

36 
	#__WCHAR_MAX
 (0xffffffffu + 
L
'\0')

	)

38 
	#__WCHAR_MAX
 (0x7ffffff‡+ 
L
'\0')

	)

41 #ifde‡
__WCHAR_MIN__


42 
	#__WCHAR_MIN
 
__WCHAR_MIN__


	)

43 #ñi‡
L
'\0' - 1 > 0

44 
	#__WCHAR_MIN
 (
L
'\0' + 0)

	)

46 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__
 && !deföed 
__ILP32__


4 
	#__WORDSIZE
 64

	)

6 
	#__WORDSIZE
 32

	)

9 #ifde‡
__x86_64__


10 
	#__WORDSIZE_TIME64_COMPAT32
 1

	)

12 
	#__SYSCALL_WORDSIZE
 64

	)

	@/usr/include/elf.h

19 #i‚de‡
_ELF_H


20 
	#_ELF_H
 1

	)

22 
	~<„©uªs.h
>

24 
	g__BEGIN_DECLS


28 
	~<°döt.h
>

31 
uöt16_t
 
	tElf32_HÆf
;

32 
uöt16_t
 
	tElf64_HÆf
;

35 
uöt32_t
 
	tElf32_W‹d
;

36 
öt32_t
 
	tElf32_Sw‹d
;

37 
uöt32_t
 
	tElf64_W‹d
;

38 
öt32_t
 
	tElf64_Sw‹d
;

41 
uöt64_t
 
	tElf32_Xw‹d
;

42 
öt64_t
 
	tElf32_Sxw‹d
;

43 
uöt64_t
 
	tElf64_Xw‹d
;

44 
öt64_t
 
	tElf64_Sxw‹d
;

47 
uöt32_t
 
	tElf32_Addr
;

48 
uöt64_t
 
	tElf64_Addr
;

51 
uöt32_t
 
	tElf32_Off
;

52 
uöt64_t
 
	tElf64_Off
;

55 
uöt16_t
 
	tElf32_Se˘i⁄
;

56 
uöt16_t
 
	tElf64_Se˘i⁄
;

59 
Elf32_HÆf
 
	tElf32_Vîsym
;

60 
Elf64_HÆf
 
	tElf64_Vîsym
;

65 
	#EI_NIDENT
 (16)

	)

69 
	me_idít
[
EI_NIDENT
];

70 
Elf32_HÆf
 
	me_ty≥
;

71 
Elf32_HÆf
 
	me_machöe
;

72 
Elf32_W‹d
 
	me_vîsi⁄
;

73 
Elf32_Addr
 
	me_íåy
;

74 
Elf32_Off
 
	me_phoff
;

75 
Elf32_Off
 
	me_shoff
;

76 
Elf32_W‹d
 
	me_Êags
;

77 
Elf32_HÆf
 
	me_ehsize
;

78 
Elf32_HÆf
 
	me_phítsize
;

79 
Elf32_HÆf
 
	me_phnum
;

80 
Elf32_HÆf
 
	me_shítsize
;

81 
Elf32_HÆf
 
	me_shnum
;

82 
Elf32_HÆf
 
	me_sh°∫dx
;

83 } 
	tElf32_Ehdr
;

87 
	me_idít
[
EI_NIDENT
];

88 
Elf64_HÆf
 
	me_ty≥
;

89 
Elf64_HÆf
 
	me_machöe
;

90 
Elf64_W‹d
 
	me_vîsi⁄
;

91 
Elf64_Addr
 
	me_íåy
;

92 
Elf64_Off
 
	me_phoff
;

93 
Elf64_Off
 
	me_shoff
;

94 
Elf64_W‹d
 
	me_Êags
;

95 
Elf64_HÆf
 
	me_ehsize
;

96 
Elf64_HÆf
 
	me_phítsize
;

97 
Elf64_HÆf
 
	me_phnum
;

98 
Elf64_HÆf
 
	me_shítsize
;

99 
Elf64_HÆf
 
	me_shnum
;

100 
Elf64_HÆf
 
	me_sh°∫dx
;

101 } 
	tElf64_Ehdr
;

107 
	#EI_MAG0
 0

	)

108 
	#ELFMAG0
 0x7‡

	)

110 
	#EI_MAG1
 1

	)

111 
	#ELFMAG1
 'E'

	)

113 
	#EI_MAG2
 2

	)

114 
	#ELFMAG2
 'L'

	)

116 
	#EI_MAG3
 3

	)

117 
	#ELFMAG3
 'F'

	)

120 
	#ELFMAG
 "\177ELF"

	)

121 
	#SELFMAG
 4

	)

123 
	#EI_CLASS
 4

	)

124 
	#ELFCLASSNONE
 0

	)

125 
	#ELFCLASS32
 1

	)

126 
	#ELFCLASS64
 2

	)

127 
	#ELFCLASSNUM
 3

	)

129 
	#EI_DATA
 5

	)

130 
	#ELFDATANONE
 0

	)

131 
	#ELFDATA2LSB
 1

	)

132 
	#ELFDATA2MSB
 2

	)

133 
	#ELFDATANUM
 3

	)

135 
	#EI_VERSION
 6

	)

138 
	#EI_OSABI
 7

	)

139 
	#ELFOSABI_NONE
 0

	)

140 
	#ELFOSABI_SYSV
 0

	)

141 
	#ELFOSABI_HPUX
 1

	)

142 
	#ELFOSABI_NETBSD
 2

	)

143 
	#ELFOSABI_GNU
 3

	)

144 
	#ELFOSABI_LINUX
 
ELFOSABI_GNU


	)

145 
	#ELFOSABI_SOLARIS
 6

	)

146 
	#ELFOSABI_AIX
 7

	)

147 
	#ELFOSABI_IRIX
 8

	)

148 
	#ELFOSABI_FREEBSD
 9

	)

149 
	#ELFOSABI_TRU64
 10

	)

150 
	#ELFOSABI_MODESTO
 11

	)

151 
	#ELFOSABI_OPENBSD
 12

	)

152 
	#ELFOSABI_ARM_AEABI
 64

	)

153 
	#ELFOSABI_ARM
 97

	)

154 
	#ELFOSABI_STANDALONE
 255

	)

156 
	#EI_ABIVERSION
 8

	)

158 
	#EI_PAD
 9

	)

162 
	#ET_NONE
 0

	)

163 
	#ET_REL
 1

	)

164 
	#ET_EXEC
 2

	)

165 
	#ET_DYN
 3

	)

166 
	#ET_CORE
 4

	)

167 
	#ET_NUM
 5

	)

168 
	#ET_LOOS
 0x„00

	)

169 
	#ET_HIOS
 0x„f‡

	)

170 
	#ET_LOPROC
 0xff00

	)

171 
	#ET_HIPROC
 0xfff‡

	)

175 
	#EM_NONE
 0

	)

176 
	#EM_M32
 1

	)

177 
	#EM_SPARC
 2

	)

178 
	#EM_386
 3

	)

179 
	#EM_68K
 4

	)

180 
	#EM_88K
 5

	)

181 
	#EM_860
 7

	)

182 
	#EM_MIPS
 8

	)

183 
	#EM_S370
 9

	)

184 
	#EM_MIPS_RS3_LE
 10

	)

186 
	#EM_PARISC
 15

	)

187 
	#EM_VPP500
 17

	)

188 
	#EM_SPARC32PLUS
 18

	)

189 
	#EM_960
 19

	)

190 
	#EM_PPC
 20

	)

191 
	#EM_PPC64
 21

	)

192 
	#EM_S390
 22

	)

194 
	#EM_V800
 36

	)

195 
	#EM_FR20
 37

	)

196 
	#EM_RH32
 38

	)

197 
	#EM_RCE
 39

	)

198 
	#EM_ARM
 40

	)

199 
	#EM_FAKE_ALPHA
 41

	)

200 
	#EM_SH
 42

	)

201 
	#EM_SPARCV9
 43

	)

202 
	#EM_TRICORE
 44

	)

203 
	#EM_ARC
 45

	)

204 
	#EM_H8_300
 46

	)

205 
	#EM_H8_300H
 47

	)

206 
	#EM_H8S
 48

	)

207 
	#EM_H8_500
 49

	)

208 
	#EM_IA_64
 50

	)

209 
	#EM_MIPS_X
 51

	)

210 
	#EM_COLDFIRE
 52

	)

211 
	#EM_68HC12
 53

	)

212 
	#EM_MMA
 54

	)

213 
	#EM_PCP
 55

	)

214 
	#EM_NCPU
 56

	)

215 
	#EM_NDR1
 57

	)

216 
	#EM_STARCORE
 58

	)

217 
	#EM_ME16
 59

	)

218 
	#EM_ST100
 60

	)

219 
	#EM_TINYJ
 61

	)

220 
	#EM_X86_64
 62

	)

221 
	#EM_PDSP
 63

	)

223 
	#EM_FX66
 66

	)

224 
	#EM_ST9PLUS
 67

	)

225 
	#EM_ST7
 68

	)

226 
	#EM_68HC16
 69

	)

227 
	#EM_68HC11
 70

	)

228 
	#EM_68HC08
 71

	)

229 
	#EM_68HC05
 72

	)

230 
	#EM_SVX
 73

	)

231 
	#EM_ST19
 74

	)

232 
	#EM_VAX
 75

	)

233 
	#EM_CRIS
 76

	)

234 
	#EM_JAVELIN
 77

	)

235 
	#EM_FIREPATH
 78

	)

236 
	#EM_ZSP
 79

	)

237 
	#EM_MMIX
 80

	)

238 
	#EM_HUANY
 81

	)

239 
	#EM_PRISM
 82

	)

240 
	#EM_AVR
 83

	)

241 
	#EM_FR30
 84

	)

242 
	#EM_D10V
 85

	)

243 
	#EM_D30V
 86

	)

244 
	#EM_V850
 87

	)

245 
	#EM_M32R
 88

	)

246 
	#EM_MN10300
 89

	)

247 
	#EM_MN10200
 90

	)

248 
	#EM_PJ
 91

	)

249 
	#EM_OPENRISC
 92

	)

250 
	#EM_ARC_A5
 93

	)

251 
	#EM_XTENSA
 94

	)

252 
	#EM_ALTERA_NIOS2
 113

	)

253 
	#EM_AARCH64
 183

	)

254 
	#EM_TILEPRO
 188

	)

255 
	#EM_MICROBLAZE
 189

	)

256 
	#EM_TILEGX
 191

	)

257 
	#EM_NUM
 192

	)

263 
	#EM_ALPHA
 0x9026

	)

267 
	#EV_NONE
 0

	)

268 
	#EV_CURRENT
 1

	)

269 
	#EV_NUM
 2

	)

275 
Elf32_W‹d
 
	msh_«me
;

276 
Elf32_W‹d
 
	msh_ty≥
;

277 
Elf32_W‹d
 
	msh_Êags
;

278 
Elf32_Addr
 
	msh_addr
;

279 
Elf32_Off
 
	msh_off£t
;

280 
Elf32_W‹d
 
	msh_size
;

281 
Elf32_W‹d
 
	msh_lök
;

282 
Elf32_W‹d
 
	msh_öfo
;

283 
Elf32_W‹d
 
	msh_addølign
;

284 
Elf32_W‹d
 
	msh_ítsize
;

285 } 
	tElf32_Shdr
;

289 
Elf64_W‹d
 
	msh_«me
;

290 
Elf64_W‹d
 
	msh_ty≥
;

291 
Elf64_Xw‹d
 
	msh_Êags
;

292 
Elf64_Addr
 
	msh_addr
;

293 
Elf64_Off
 
	msh_off£t
;

294 
Elf64_Xw‹d
 
	msh_size
;

295 
Elf64_W‹d
 
	msh_lök
;

296 
Elf64_W‹d
 
	msh_öfo
;

297 
Elf64_Xw‹d
 
	msh_addølign
;

298 
Elf64_Xw‹d
 
	msh_ítsize
;

299 } 
	tElf64_Shdr
;

303 
	#SHN_UNDEF
 0

	)

304 
	#SHN_LORESERVE
 0xff00

	)

305 
	#SHN_LOPROC
 0xff00

	)

306 
	#SHN_BEFORE
 0xff00

	)

308 
	#SHN_AFTER
 0xff01

	)

310 
	#SHN_HIPROC
 0xff1‡

	)

311 
	#SHN_LOOS
 0xff20

	)

312 
	#SHN_HIOS
 0xff3‡

	)

313 
	#SHN_ABS
 0xfff1

	)

314 
	#SHN_COMMON
 0xfff2

	)

315 
	#SHN_XINDEX
 0xfff‡

	)

316 
	#SHN_HIRESERVE
 0xfff‡

	)

320 
	#SHT_NULL
 0

	)

321 
	#SHT_PROGBITS
 1

	)

322 
	#SHT_SYMTAB
 2

	)

323 
	#SHT_STRTAB
 3

	)

324 
	#SHT_RELA
 4

	)

325 
	#SHT_HASH
 5

	)

326 
	#SHT_DYNAMIC
 6

	)

327 
	#SHT_NOTE
 7

	)

328 
	#SHT_NOBITS
 8

	)

329 
	#SHT_REL
 9

	)

330 
	#SHT_SHLIB
 10

	)

331 
	#SHT_DYNSYM
 11

	)

332 
	#SHT_INIT_ARRAY
 14

	)

333 
	#SHT_FINI_ARRAY
 15

	)

334 
	#SHT_PREINIT_ARRAY
 16

	)

335 
	#SHT_GROUP
 17

	)

336 
	#SHT_SYMTAB_SHNDX
 18

	)

337 
	#SHT_NUM
 19

	)

338 
	#SHT_LOOS
 0x60000000

	)

339 
	#SHT_GNU_ATTRIBUTES
 0x6ffffff5

	)

340 
	#SHT_GNU_HASH
 0x6ffffff6

	)

341 
	#SHT_GNU_LIBLIST
 0x6ffffff7

	)

342 
	#SHT_CHECKSUM
 0x6ffffff8

	)

343 
	#SHT_LOSUNW
 0x6fffffÁ

	)

344 
	#SHT_SUNW_move
 0x6fffffÁ

	)

345 
	#SHT_SUNW_COMDAT
 0x6ffffffb

	)

346 
	#SHT_SUNW_symöfo
 0x6ffffffc

	)

347 
	#SHT_GNU_vîdef
 0x6ffffffd

	)

348 
	#SHT_GNU_vî√ed
 0x6fffff„

	)

349 
	#SHT_GNU_vîsym
 0x6ffffff‡

	)

350 
	#SHT_HISUNW
 0x6ffffff‡

	)

351 
	#SHT_HIOS
 0x6ffffff‡

	)

352 
	#SHT_LOPROC
 0x70000000

	)

353 
	#SHT_HIPROC
 0x7ffffff‡

	)

354 
	#SHT_LOUSER
 0x80000000

	)

355 
	#SHT_HIUSER
 0x8ffffff‡

	)

359 
	#SHF_WRITE
 (1 << 0Ë

	)

360 
	#SHF_ALLOC
 (1 << 1Ë

	)

361 
	#SHF_EXECINSTR
 (1 << 2Ë

	)

362 
	#SHF_MERGE
 (1 << 4Ë

	)

363 
	#SHF_STRINGS
 (1 << 5Ë

	)

364 
	#SHF_INFO_LINK
 (1 << 6Ë

	)

365 
	#SHF_LINK_ORDER
 (1 << 7Ë

	)

366 
	#SHF_OS_NONCONFORMING
 (1 << 8Ë

	)

368 
	#SHF_GROUP
 (1 << 9Ë

	)

369 
	#SHF_TLS
 (1 << 10Ë

	)

370 
	#SHF_COMPRESSED
 (1 << 11Ë

	)

371 
	#SHF_MASKOS
 0x0ff00000

	)

372 
	#SHF_MASKPROC
 0xf0000000

	)

373 
	#SHF_ORDERED
 (1 << 30Ë

	)

375 
	#SHF_EXCLUDE
 (1U << 31Ë

	)

382 
Elf32_W‹d
 
	mch_ty≥
;

383 
Elf32_W‹d
 
	mch_size
;

384 
Elf32_W‹d
 
	mch_addølign
;

385 } 
	tElf32_Chdr
;

389 
Elf64_W‹d
 
	mch_ty≥
;

390 
Elf64_W‹d
 
	mch_ª£rved
;

391 
Elf64_Xw‹d
 
	mch_size
;

392 
Elf64_Xw‹d
 
	mch_addølign
;

393 } 
	tElf64_Chdr
;

396 
	#ELFCOMPRESS_ZLIB
 1

	)

397 
	#ELFCOMPRESS_LOOS
 0x60000000

	)

398 
	#ELFCOMPRESS_HIOS
 0x6ffffff‡

	)

399 
	#ELFCOMPRESS_LOPROC
 0x70000000

	)

400 
	#ELFCOMPRESS_HIPROC
 0x7ffffff‡

	)

403 
	#GRP_COMDAT
 0x1

	)

409 
Elf32_W‹d
 
	m°_«me
;

410 
Elf32_Addr
 
	m°_vÆue
;

411 
Elf32_W‹d
 
	m°_size
;

412 
	m°_öfo
;

413 
	m°_Ÿhî
;

414 
Elf32_Se˘i⁄
 
	m°_shndx
;

415 } 
	tElf32_Sym
;

419 
Elf64_W‹d
 
	m°_«me
;

420 
	m°_öfo
;

421 
	m°_Ÿhî
;

422 
Elf64_Se˘i⁄
 
	m°_shndx
;

423 
Elf64_Addr
 
	m°_vÆue
;

424 
Elf64_Xw‹d
 
	m°_size
;

425 } 
	tElf64_Sym
;

432 
Elf32_HÆf
 
	msi_boundto
;

433 
Elf32_HÆf
 
	msi_Êags
;

434 } 
	tElf32_Symöfo
;

438 
Elf64_HÆf
 
	msi_boundto
;

439 
Elf64_HÆf
 
	msi_Êags
;

440 } 
	tElf64_Symöfo
;

443 
	#SYMINFO_BT_SELF
 0xfff‡

	)

444 
	#SYMINFO_BT_PARENT
 0xff„

	)

445 
	#SYMINFO_BT_LOWRESERVE
 0xff00

	)

448 
	#SYMINFO_FLG_DIRECT
 0x0001

	)

449 
	#SYMINFO_FLG_PASSTHRU
 0x0002

	)

450 
	#SYMINFO_FLG_COPY
 0x0004

	)

451 
	#SYMINFO_FLG_LAZYLOAD
 0x0008

	)

454 
	#SYMINFO_NONE
 0

	)

455 
	#SYMINFO_CURRENT
 1

	)

456 
	#SYMINFO_NUM
 2

	)

461 
	#ELF32_ST_BIND
(
vÆ
Ë(((Ë(vÆ)Ë>> 4)

	)

462 
	#ELF32_ST_TYPE
(
vÆ
Ë((vÆË& 0xf)

	)

463 
	#ELF32_ST_INFO
(
böd
, 
ty≥
Ë(((bödË<< 4Ë+ (—y≥Ë& 0xf))

	)

466 
	#ELF64_ST_BIND
(
vÆ
Ë
	`ELF32_ST_BIND
 (vÆ)

	)

467 
	#ELF64_ST_TYPE
(
vÆ
Ë
	`ELF32_ST_TYPE
 (vÆ)

	)

468 
	#ELF64_ST_INFO
(
böd
, 
ty≥
Ë
	`ELF32_ST_INFO
 ((böd), (ty≥))

	)

472 
	#STB_LOCAL
 0

	)

473 
	#STB_GLOBAL
 1

	)

474 
	#STB_WEAK
 2

	)

475 
	#STB_NUM
 3

	)

476 
	#STB_LOOS
 10

	)

477 
	#STB_GNU_UNIQUE
 10

	)

478 
	#STB_HIOS
 12

	)

479 
	#STB_LOPROC
 13

	)

480 
	#STB_HIPROC
 15

	)

484 
	#STT_NOTYPE
 0

	)

485 
	#STT_OBJECT
 1

	)

486 
	#STT_FUNC
 2

	)

487 
	#STT_SECTION
 3

	)

488 
	#STT_FILE
 4

	)

489 
	#STT_COMMON
 5

	)

490 
	#STT_TLS
 6

	)

491 
	#STT_NUM
 7

	)

492 
	#STT_LOOS
 10

	)

493 
	#STT_GNU_IFUNC
 10

	)

494 
	#STT_HIOS
 12

	)

495 
	#STT_LOPROC
 13

	)

496 
	#STT_HIPROC
 15

	)

503 
	#STN_UNDEF
 0

	)

508 
	#ELF32_ST_VISIBILITY
(
o
Ë((oË& 0x03)

	)

511 
	#ELF64_ST_VISIBILITY
(
o
Ë
	`ELF32_ST_VISIBILITY
 (o)

	)

514 
	#STV_DEFAULT
 0

	)

515 
	#STV_INTERNAL
 1

	)

516 
	#STV_HIDDEN
 2

	)

517 
	#STV_PROTECTED
 3

	)

524 
Elf32_Addr
 
	mr_off£t
;

525 
Elf32_W‹d
 
	mr_öfo
;

526 } 
	tElf32_Rñ
;

535 
Elf64_Addr
 
	mr_off£t
;

536 
Elf64_Xw‹d
 
	mr_öfo
;

537 } 
	tElf64_Rñ
;

543 
Elf32_Addr
 
	mr_off£t
;

544 
Elf32_W‹d
 
	mr_öfo
;

545 
Elf32_Sw‹d
 
	mr_addíd
;

546 } 
	tElf32_Rña
;

550 
Elf64_Addr
 
	mr_off£t
;

551 
Elf64_Xw‹d
 
	mr_öfo
;

552 
Elf64_Sxw‹d
 
	mr_addíd
;

553 } 
	tElf64_Rña
;

557 
	#ELF32_R_SYM
(
vÆ
Ë((vÆË>> 8)

	)

558 
	#ELF32_R_TYPE
(
vÆ
Ë((vÆË& 0xff)

	)

559 
	#ELF32_R_INFO
(
sym
, 
ty≥
Ë(((symË<< 8Ë+ (—y≥Ë& 0xff))

	)

561 
	#ELF64_R_SYM
(
i
Ë((iË>> 32)

	)

562 
	#ELF64_R_TYPE
(
i
Ë((iË& 0xffffffff)

	)

563 
	#ELF64_R_INFO
(
sym
,
ty≥
Ë((((
Elf64_Xw‹d
Ë(sym)Ë<< 32Ë+ (ty≥))

	)

569 
Elf32_W‹d
 
	mp_ty≥
;

570 
Elf32_Off
 
	mp_off£t
;

571 
Elf32_Addr
 
	mp_vaddr
;

572 
Elf32_Addr
 
	mp_∑ddr
;

573 
Elf32_W‹d
 
	mp_fûesz
;

574 
Elf32_W‹d
 
	mp_memsz
;

575 
Elf32_W‹d
 
	mp_Êags
;

576 
Elf32_W‹d
 
	mp_Æign
;

577 } 
	tElf32_Phdr
;

581 
Elf64_W‹d
 
	mp_ty≥
;

582 
Elf64_W‹d
 
	mp_Êags
;

583 
Elf64_Off
 
	mp_off£t
;

584 
Elf64_Addr
 
	mp_vaddr
;

585 
Elf64_Addr
 
	mp_∑ddr
;

586 
Elf64_Xw‹d
 
	mp_fûesz
;

587 
Elf64_Xw‹d
 
	mp_memsz
;

588 
Elf64_Xw‹d
 
	mp_Æign
;

589 } 
	tElf64_Phdr
;

595 
	#PN_XNUM
 0xffff

	)

599 
	#PT_NULL
 0

	)

600 
	#PT_LOAD
 1

	)

601 
	#PT_DYNAMIC
 2

	)

602 
	#PT_INTERP
 3

	)

603 
	#PT_NOTE
 4

	)

604 
	#PT_SHLIB
 5

	)

605 
	#PT_PHDR
 6

	)

606 
	#PT_TLS
 7

	)

607 
	#PT_NUM
 8

	)

608 
	#PT_LOOS
 0x60000000

	)

609 
	#PT_GNU_EH_FRAME
 0x6474e550

	)

610 
	#PT_GNU_STACK
 0x6474e551

	)

611 
	#PT_GNU_RELRO
 0x6474e552

	)

612 
	#PT_LOSUNW
 0x6fffffÁ

	)

613 
	#PT_SUNWBSS
 0x6fffffÁ

	)

614 
	#PT_SUNWSTACK
 0x6ffffffb

	)

615 
	#PT_HISUNW
 0x6fffffff

	)

616 
	#PT_HIOS
 0x6ffffff‡

	)

617 
	#PT_LOPROC
 0x70000000

	)

618 
	#PT_HIPROC
 0x7ffffff‡

	)

622 
	#PF_X
 (1 << 0Ë

	)

623 
	#PF_W
 (1 << 1Ë

	)

624 
	#PF_R
 (1 << 2Ë

	)

625 
	#PF_MASKOS
 0x0ff00000

	)

626 
	#PF_MASKPROC
 0xf0000000

	)

630 
	#NT_PRSTATUS
 1

	)

631 
	#NT_FPREGSET
 2

	)

632 
	#NT_PRPSINFO
 3

	)

633 
	#NT_PRXREG
 4

	)

634 
	#NT_TASKSTRUCT
 4

	)

635 
	#NT_PLATFORM
 5

	)

636 
	#NT_AUXV
 6

	)

637 
	#NT_GWINDOWS
 7

	)

638 
	#NT_ASRS
 8

	)

639 
	#NT_PSTATUS
 10

	)

640 
	#NT_PSINFO
 13

	)

641 
	#NT_PRCRED
 14

	)

642 
	#NT_UTSNAME
 15

	)

643 
	#NT_LWPSTATUS
 16

	)

644 
	#NT_LWPSINFO
 17

	)

645 
	#NT_PRFPXREG
 20

	)

646 
	#NT_SIGINFO
 0x53494749

	)

648 
	#NT_FILE
 0x46494c45

	)

650 
	#NT_PRXFPREG
 0x46e62b7‡

	)

651 
	#NT_PPC_VMX
 0x100

	)

652 
	#NT_PPC_SPE
 0x101

	)

653 
	#NT_PPC_VSX
 0x102

	)

654 
	#NT_386_TLS
 0x200

	)

655 
	#NT_386_IOPERM
 0x201

	)

656 
	#NT_X86_XSTATE
 0x202

	)

657 
	#NT_S390_HIGH_GPRS
 0x300

	)

658 
	#NT_S390_TIMER
 0x301

	)

659 
	#NT_S390_TODCMP
 0x302

	)

660 
	#NT_S390_TODPREG
 0x303

	)

661 
	#NT_S390_CTRS
 0x304

	)

662 
	#NT_S390_PREFIX
 0x305

	)

663 
	#NT_S390_LAST_BREAK
 0x306

	)

664 
	#NT_S390_SYSTEM_CALL
 0x307

	)

665 
	#NT_S390_TDB
 0x308

	)

666 
	#NT_ARM_VFP
 0x400

	)

667 
	#NT_ARM_TLS
 0x401

	)

668 
	#NT_ARM_HW_BREAK
 0x402

	)

669 
	#NT_ARM_HW_WATCH
 0x403

	)

673 
	#NT_VERSION
 1

	)

680 
Elf32_Sw‹d
 
	md_èg
;

683 
Elf32_W‹d
 
	md_vÆ
;

684 
Elf32_Addr
 
	md_±r
;

685 } 
	md_un
;

686 } 
	tElf32_Dyn
;

690 
Elf64_Sxw‹d
 
	md_èg
;

693 
Elf64_Xw‹d
 
	md_vÆ
;

694 
Elf64_Addr
 
	md_±r
;

695 } 
	md_un
;

696 } 
	tElf64_Dyn
;

700 
	#DT_NULL
 0

	)

701 
	#DT_NEEDED
 1

	)

702 
	#DT_PLTRELSZ
 2

	)

703 
	#DT_PLTGOT
 3

	)

704 
	#DT_HASH
 4

	)

705 
	#DT_STRTAB
 5

	)

706 
	#DT_SYMTAB
 6

	)

707 
	#DT_RELA
 7

	)

708 
	#DT_RELASZ
 8

	)

709 
	#DT_RELAENT
 9

	)

710 
	#DT_STRSZ
 10

	)

711 
	#DT_SYMENT
 11

	)

712 
	#DT_INIT
 12

	)

713 
	#DT_FINI
 13

	)

714 
	#DT_SONAME
 14

	)

715 
	#DT_RPATH
 15

	)

716 
	#DT_SYMBOLIC
 16

	)

717 
	#DT_REL
 17

	)

718 
	#DT_RELSZ
 18

	)

719 
	#DT_RELENT
 19

	)

720 
	#DT_PLTREL
 20

	)

721 
	#DT_DEBUG
 21

	)

722 
	#DT_TEXTREL
 22

	)

723 
	#DT_JMPREL
 23

	)

724 
	#DT_BIND_NOW
 24

	)

725 
	#DT_INIT_ARRAY
 25

	)

726 
	#DT_FINI_ARRAY
 26

	)

727 
	#DT_INIT_ARRAYSZ
 27

	)

728 
	#DT_FINI_ARRAYSZ
 28

	)

729 
	#DT_RUNPATH
 29

	)

730 
	#DT_FLAGS
 30

	)

731 
	#DT_ENCODING
 32

	)

732 
	#DT_PREINIT_ARRAY
 32

	)

733 
	#DT_PREINIT_ARRAYSZ
 33

	)

734 
	#DT_NUM
 34

	)

735 
	#DT_LOOS
 0x6000000d

	)

736 
	#DT_HIOS
 0x6ffff000

	)

737 
	#DT_LOPROC
 0x70000000

	)

738 
	#DT_HIPROC
 0x7ffffff‡

	)

739 
	#DT_PROCNUM
 
DT_MIPS_NUM


	)

744 
	#DT_VALRNGLO
 0x6ffffd00

	)

745 
	#DT_GNU_PRELINKED
 0x6ffffdf5

	)

746 
	#DT_GNU_CONFLICTSZ
 0x6ffffdf6

	)

747 
	#DT_GNU_LIBLISTSZ
 0x6ffffdf7

	)

748 
	#DT_CHECKSUM
 0x6ffffdf8

	)

749 
	#DT_PLTPADSZ
 0x6ffffdf9

	)

750 
	#DT_MOVEENT
 0x6ffffdÁ

	)

751 
	#DT_MOVESZ
 0x6ffffdfb

	)

752 
	#DT_FEATURE_1
 0x6ffffdf¯

	)

753 
	#DT_POSFLAG_1
 0x6ffffdfd

	)

755 
	#DT_SYMINSZ
 0x6ffffd„

	)

756 
	#DT_SYMINENT
 0x6ffffdf‡

	)

757 
	#DT_VALRNGHI
 0x6ffffdff

	)

758 
	#DT_VALTAGIDX
(
èg
Ë(
DT_VALRNGHI
 - (èg)Ë

	)

759 
	#DT_VALNUM
 12

	)

766 
	#DT_ADDRRNGLO
 0x6fff„00

	)

767 
	#DT_GNU_HASH
 0x6fff„f5

	)

768 
	#DT_TLSDESC_PLT
 0x6fff„f6

	)

769 
	#DT_TLSDESC_GOT
 0x6fff„f7

	)

770 
	#DT_GNU_CONFLICT
 0x6fff„f8

	)

771 
	#DT_GNU_LIBLIST
 0x6fff„f9

	)

772 
	#DT_CONFIG
 0x6fff„Á

	)

773 
	#DT_DEPAUDIT
 0x6fff„fb

	)

774 
	#DT_AUDIT
 0x6fff„f¯

	)

775 
	#DT_PLTPAD
 0x6fff„fd

	)

776 
	#DT_MOVETAB
 0x6fff„„

	)

777 
	#DT_SYMINFO
 0x6fff„f‡

	)

778 
	#DT_ADDRRNGHI
 0x6fff„ff

	)

779 
	#DT_ADDRTAGIDX
(
èg
Ë(
DT_ADDRRNGHI
 - (èg)Ë

	)

780 
	#DT_ADDRNUM
 11

	)

784 
	#DT_VERSYM
 0x6ffffff0

	)

786 
	#DT_RELACOUNT
 0x6ffffff9

	)

787 
	#DT_RELCOUNT
 0x6fffffÁ

	)

790 
	#DT_FLAGS_1
 0x6ffffffb

	)

791 
	#DT_VERDEF
 0x6ffffff¯

	)

793 
	#DT_VERDEFNUM
 0x6ffffffd

	)

794 
	#DT_VERNEED
 0x6fffff„

	)

796 
	#DT_VERNEEDNUM
 0x6ffffff‡

	)

797 
	#DT_VERSIONTAGIDX
(
èg
Ë(
DT_VERNEEDNUM
 - (èg)Ë

	)

798 
	#DT_VERSIONTAGNUM
 16

	)

802 
	#DT_AUXILIARY
 0x7ffffffd

	)

803 
	#DT_FILTER
 0x7ffffff‡

	)

804 
	#DT_EXTRATAGIDX
(
èg
Ë((
Elf32_W‹d
)-((
Elf32_Sw‹d
Ë—agË<<1>>1)-1)

	)

805 
	#DT_EXTRANUM
 3

	)

808 
	#DF_ORIGIN
 0x00000001

	)

809 
	#DF_SYMBOLIC
 0x00000002

	)

810 
	#DF_TEXTREL
 0x00000004

	)

811 
	#DF_BIND_NOW
 0x00000008

	)

812 
	#DF_STATIC_TLS
 0x00000010

	)

816 
	#DF_1_NOW
 0x00000001

	)

817 
	#DF_1_GLOBAL
 0x00000002

	)

818 
	#DF_1_GROUP
 0x00000004

	)

819 
	#DF_1_NODELETE
 0x00000008

	)

820 
	#DF_1_LOADFLTR
 0x00000010

	)

821 
	#DF_1_INITFIRST
 0x00000020

	)

822 
	#DF_1_NOOPEN
 0x00000040

	)

823 
	#DF_1_ORIGIN
 0x00000080

	)

824 
	#DF_1_DIRECT
 0x00000100

	)

825 
	#DF_1_TRANS
 0x00000200

	)

826 
	#DF_1_INTERPOSE
 0x00000400

	)

827 
	#DF_1_NODEFLIB
 0x00000800

	)

828 
	#DF_1_NODUMP
 0x00001000

	)

829 
	#DF_1_CONFALT
 0x00002000

	)

830 
	#DF_1_ENDFILTEE
 0x00004000

	)

831 
	#DF_1_DISPRELDNE
 0x00008000

	)

832 
	#DF_1_DISPRELPND
 0x00010000

	)

833 
	#DF_1_NODIRECT
 0x00020000

	)

834 
	#DF_1_IGNMULDEF
 0x00040000

	)

835 
	#DF_1_NOKSYMS
 0x00080000

	)

836 
	#DF_1_NOHDR
 0x00100000

	)

837 
	#DF_1_EDITED
 0x00200000

	)

838 
	#DF_1_NORELOC
 0x00400000

	)

839 
	#DF_1_SYMINTPOSE
 0x00800000

	)

840 
	#DF_1_GLOBAUDIT
 0x01000000

	)

841 
	#DF_1_SINGLETON
 0x02000000

	)

844 
	#DTF_1_PARINIT
 0x00000001

	)

845 
	#DTF_1_CONFEXP
 0x00000002

	)

848 
	#DF_P1_LAZYLOAD
 0x00000001

	)

849 
	#DF_P1_GROUPPERM
 0x00000002

	)

856 
Elf32_HÆf
 
	mvd_vîsi⁄
;

857 
Elf32_HÆf
 
	mvd_Êags
;

858 
Elf32_HÆf
 
	mvd_ndx
;

859 
Elf32_HÆf
 
	mvd_˙t
;

860 
Elf32_W‹d
 
	mvd_hash
;

861 
Elf32_W‹d
 
	mvd_aux
;

862 
Elf32_W‹d
 
	mvd_√xt
;

864 } 
	tElf32_Vîdef
;

868 
Elf64_HÆf
 
	mvd_vîsi⁄
;

869 
Elf64_HÆf
 
	mvd_Êags
;

870 
Elf64_HÆf
 
	mvd_ndx
;

871 
Elf64_HÆf
 
	mvd_˙t
;

872 
Elf64_W‹d
 
	mvd_hash
;

873 
Elf64_W‹d
 
	mvd_aux
;

874 
Elf64_W‹d
 
	mvd_√xt
;

876 } 
	tElf64_Vîdef
;

880 
	#VER_DEF_NONE
 0

	)

881 
	#VER_DEF_CURRENT
 1

	)

882 
	#VER_DEF_NUM
 2

	)

885 
	#VER_FLG_BASE
 0x1

	)

886 
	#VER_FLG_WEAK
 0x2

	)

889 
	#VER_NDX_LOCAL
 0

	)

890 
	#VER_NDX_GLOBAL
 1

	)

891 
	#VER_NDX_LORESERVE
 0xff00

	)

892 
	#VER_NDX_ELIMINATE
 0xff01

	)

898 
Elf32_W‹d
 
	mvda_«me
;

899 
Elf32_W‹d
 
	mvda_√xt
;

901 } 
	tElf32_Vîdaux
;

905 
Elf64_W‹d
 
	mvda_«me
;

906 
Elf64_W‹d
 
	mvda_√xt
;

908 } 
	tElf64_Vîdaux
;

915 
Elf32_HÆf
 
	mvn_vîsi⁄
;

916 
Elf32_HÆf
 
	mvn_˙t
;

917 
Elf32_W‹d
 
	mvn_fûe
;

919 
Elf32_W‹d
 
	mvn_aux
;

920 
Elf32_W‹d
 
	mvn_√xt
;

922 } 
	tElf32_Vî√ed
;

926 
Elf64_HÆf
 
	mvn_vîsi⁄
;

927 
Elf64_HÆf
 
	mvn_˙t
;

928 
Elf64_W‹d
 
	mvn_fûe
;

930 
Elf64_W‹d
 
	mvn_aux
;

931 
Elf64_W‹d
 
	mvn_√xt
;

933 } 
	tElf64_Vî√ed
;

937 
	#VER_NEED_NONE
 0

	)

938 
	#VER_NEED_CURRENT
 1

	)

939 
	#VER_NEED_NUM
 2

	)

945 
Elf32_W‹d
 
	mv«_hash
;

946 
Elf32_HÆf
 
	mv«_Êags
;

947 
Elf32_HÆf
 
	mv«_Ÿhî
;

948 
Elf32_W‹d
 
	mv«_«me
;

949 
Elf32_W‹d
 
	mv«_√xt
;

951 } 
	tElf32_Vî«ux
;

955 
Elf64_W‹d
 
	mv«_hash
;

956 
Elf64_HÆf
 
	mv«_Êags
;

957 
Elf64_HÆf
 
	mv«_Ÿhî
;

958 
Elf64_W‹d
 
	mv«_«me
;

959 
Elf64_W‹d
 
	mv«_√xt
;

961 } 
	tElf64_Vî«ux
;

965 
	#VER_FLG_WEAK
 0x2

	)

979 
uöt32_t
 
	ma_ty≥
;

982 
uöt32_t
 
	ma_vÆ
;

986 } 
	ma_un
;

987 } 
	tElf32_auxv_t
;

991 
uöt64_t
 
	ma_ty≥
;

994 
uöt64_t
 
	ma_vÆ
;

998 } 
	ma_un
;

999 } 
	tElf64_auxv_t
;

1001 
	~<bôs/auxv.h
>

1007 
Elf32_W‹d
 
	mn_«mesz
;

1008 
Elf32_W‹d
 
	mn_descsz
;

1009 
Elf32_W‹d
 
	mn_ty≥
;

1010 } 
	tElf32_Nhdr
;

1014 
Elf64_W‹d
 
	mn_«mesz
;

1015 
Elf64_W‹d
 
	mn_descsz
;

1016 
Elf64_W‹d
 
	mn_ty≥
;

1017 } 
	tElf64_Nhdr
;

1022 
	#ELF_NOTE_SOLARIS
 "SUNW Sﬁ¨is"

	)

1025 
	#ELF_NOTE_GNU
 "GNU"

	)

1031 
	#ELF_NOTE_PAGESIZE_HINT
 1

	)

1042 
	#NT_GNU_ABI_TAG
 1

	)

1043 
	#ELF_NOTE_ABI
 
NT_GNU_ABI_TAG


	)

1047 
	#ELF_NOTE_OS_LINUX
 0

	)

1048 
	#ELF_NOTE_OS_GNU
 1

	)

1049 
	#ELF_NOTE_OS_SOLARIS2
 2

	)

1050 
	#ELF_NOTE_OS_FREEBSD
 3

	)

1058 
	#NT_GNU_HWCAP
 2

	)

1062 
	#NT_GNU_BUILD_ID
 3

	)

1065 
	#NT_GNU_GOLD_VERSION
 4

	)

1071 
Elf32_Xw‹d
 
	mm_vÆue
;

1072 
Elf32_W‹d
 
	mm_öfo
;

1073 
Elf32_W‹d
 
	mm_poff£t
;

1074 
Elf32_HÆf
 
	mm_ª≥©
;

1075 
Elf32_HÆf
 
	mm_°ride
;

1076 } 
	tElf32_Move
;

1080 
Elf64_Xw‹d
 
	mm_vÆue
;

1081 
Elf64_Xw‹d
 
	mm_öfo
;

1082 
Elf64_Xw‹d
 
	mm_poff£t
;

1083 
Elf64_HÆf
 
	mm_ª≥©
;

1084 
Elf64_HÆf
 
	mm_°ride
;

1085 } 
	tElf64_Move
;

1088 
	#ELF32_M_SYM
(
öfo
Ë((öfoË>> 8)

	)

1089 
	#ELF32_M_SIZE
(
öfo
Ë((Ë(öfo))

	)

1090 
	#ELF32_M_INFO
(
sym
, 
size
Ë(((symË<< 8Ë+ (Ë(size))

	)

1092 
	#ELF64_M_SYM
(
öfo
Ë
	`ELF32_M_SYM
 (öfo)

	)

1093 
	#ELF64_M_SIZE
(
öfo
Ë
	`ELF32_M_SIZE
 (öfo)

	)

1094 
	#ELF64_M_INFO
(
sym
, 
size
Ë
	`ELF32_M_INFO
 (sym, size)

	)

1100 
	#EF_CPU32
 0x00810000

	)

1104 
	#R_68K_NONE
 0

	)

1105 
	#R_68K_32
 1

	)

1106 
	#R_68K_16
 2

	)

1107 
	#R_68K_8
 3

	)

1108 
	#R_68K_PC32
 4

	)

1109 
	#R_68K_PC16
 5

	)

1110 
	#R_68K_PC8
 6

	)

1111 
	#R_68K_GOT32
 7

	)

1112 
	#R_68K_GOT16
 8

	)

1113 
	#R_68K_GOT8
 9

	)

1114 
	#R_68K_GOT32O
 10

	)

1115 
	#R_68K_GOT16O
 11

	)

1116 
	#R_68K_GOT8O
 12

	)

1117 
	#R_68K_PLT32
 13

	)

1118 
	#R_68K_PLT16
 14

	)

1119 
	#R_68K_PLT8
 15

	)

1120 
	#R_68K_PLT32O
 16

	)

1121 
	#R_68K_PLT16O
 17

	)

1122 
	#R_68K_PLT8O
 18

	)

1123 
	#R_68K_COPY
 19

	)

1124 
	#R_68K_GLOB_DAT
 20

	)

1125 
	#R_68K_JMP_SLOT
 21

	)

1126 
	#R_68K_RELATIVE
 22

	)

1127 
	#R_68K_TLS_GD32
 25

	)

1128 
	#R_68K_TLS_GD16
 26

	)

1129 
	#R_68K_TLS_GD8
 27

	)

1130 
	#R_68K_TLS_LDM32
 28

	)

1131 
	#R_68K_TLS_LDM16
 29

	)

1132 
	#R_68K_TLS_LDM8
 30

	)

1133 
	#R_68K_TLS_LDO32
 31

	)

1134 
	#R_68K_TLS_LDO16
 32

	)

1135 
	#R_68K_TLS_LDO8
 33

	)

1136 
	#R_68K_TLS_IE32
 34

	)

1137 
	#R_68K_TLS_IE16
 35

	)

1138 
	#R_68K_TLS_IE8
 36

	)

1139 
	#R_68K_TLS_LE32
 37

	)

1141 
	#R_68K_TLS_LE16
 38

	)

1143 
	#R_68K_TLS_LE8
 39

	)

1145 
	#R_68K_TLS_DTPMOD32
 40

	)

1146 
	#R_68K_TLS_DTPREL32
 41

	)

1147 
	#R_68K_TLS_TPREL32
 42

	)

1149 
	#R_68K_NUM
 43

	)

1155 
	#R_386_NONE
 0

	)

1156 
	#R_386_32
 1

	)

1157 
	#R_386_PC32
 2

	)

1158 
	#R_386_GOT32
 3

	)

1159 
	#R_386_PLT32
 4

	)

1160 
	#R_386_COPY
 5

	)

1161 
	#R_386_GLOB_DAT
 6

	)

1162 
	#R_386_JMP_SLOT
 7

	)

1163 
	#R_386_RELATIVE
 8

	)

1164 
	#R_386_GOTOFF
 9

	)

1165 
	#R_386_GOTPC
 10

	)

1166 
	#R_386_32PLT
 11

	)

1167 
	#R_386_TLS_TPOFF
 14

	)

1168 
	#R_386_TLS_IE
 15

	)

1170 
	#R_386_TLS_GOTIE
 16

	)

1172 
	#R_386_TLS_LE
 17

	)

1174 
	#R_386_TLS_GD
 18

	)

1176 
	#R_386_TLS_LDM
 19

	)

1179 
	#R_386_16
 20

	)

1180 
	#R_386_PC16
 21

	)

1181 
	#R_386_8
 22

	)

1182 
	#R_386_PC8
 23

	)

1183 
	#R_386_TLS_GD_32
 24

	)

1185 
	#R_386_TLS_GD_PUSH
 25

	)

1186 
	#R_386_TLS_GD_CALL
 26

	)

1188 
	#R_386_TLS_GD_POP
 27

	)

1189 
	#R_386_TLS_LDM_32
 28

	)

1191 
	#R_386_TLS_LDM_PUSH
 29

	)

1192 
	#R_386_TLS_LDM_CALL
 30

	)

1194 
	#R_386_TLS_LDM_POP
 31

	)

1195 
	#R_386_TLS_LDO_32
 32

	)

1196 
	#R_386_TLS_IE_32
 33

	)

1198 
	#R_386_TLS_LE_32
 34

	)

1200 
	#R_386_TLS_DTPMOD32
 35

	)

1201 
	#R_386_TLS_DTPOFF32
 36

	)

1202 
	#R_386_TLS_TPOFF32
 37

	)

1203 
	#R_386_SIZE32
 38

	)

1204 
	#R_386_TLS_GOTDESC
 39

	)

1205 
	#R_386_TLS_DESC_CALL
 40

	)

1208 
	#R_386_TLS_DESC
 41

	)

1212 
	#R_386_IRELATIVE
 42

	)

1214 
	#R_386_NUM
 43

	)

1220 
	#STT_SPARC_REGISTER
 13

	)

1224 
	#EF_SPARCV9_MM
 3

	)

1225 
	#EF_SPARCV9_TSO
 0

	)

1226 
	#EF_SPARCV9_PSO
 1

	)

1227 
	#EF_SPARCV9_RMO
 2

	)

1228 
	#EF_SPARC_LEDATA
 0x800000

	)

1229 
	#EF_SPARC_EXT_MASK
 0xFFFF00

	)

1230 
	#EF_SPARC_32PLUS
 0x000100

	)

1231 
	#EF_SPARC_SUN_US1
 0x000200

	)

1232 
	#EF_SPARC_HAL_R1
 0x000400

	)

1233 
	#EF_SPARC_SUN_US3
 0x000800

	)

1237 
	#R_SPARC_NONE
 0

	)

1238 
	#R_SPARC_8
 1

	)

1239 
	#R_SPARC_16
 2

	)

1240 
	#R_SPARC_32
 3

	)

1241 
	#R_SPARC_DISP8
 4

	)

1242 
	#R_SPARC_DISP16
 5

	)

1243 
	#R_SPARC_DISP32
 6

	)

1244 
	#R_SPARC_WDISP30
 7

	)

1245 
	#R_SPARC_WDISP22
 8

	)

1246 
	#R_SPARC_HI22
 9

	)

1247 
	#R_SPARC_22
 10

	)

1248 
	#R_SPARC_13
 11

	)

1249 
	#R_SPARC_LO10
 12

	)

1250 
	#R_SPARC_GOT10
 13

	)

1251 
	#R_SPARC_GOT13
 14

	)

1252 
	#R_SPARC_GOT22
 15

	)

1253 
	#R_SPARC_PC10
 16

	)

1254 
	#R_SPARC_PC22
 17

	)

1255 
	#R_SPARC_WPLT30
 18

	)

1256 
	#R_SPARC_COPY
 19

	)

1257 
	#R_SPARC_GLOB_DAT
 20

	)

1258 
	#R_SPARC_JMP_SLOT
 21

	)

1259 
	#R_SPARC_RELATIVE
 22

	)

1260 
	#R_SPARC_UA32
 23

	)

1264 
	#R_SPARC_PLT32
 24

	)

1265 
	#R_SPARC_HIPLT22
 25

	)

1266 
	#R_SPARC_LOPLT10
 26

	)

1267 
	#R_SPARC_PCPLT32
 27

	)

1268 
	#R_SPARC_PCPLT22
 28

	)

1269 
	#R_SPARC_PCPLT10
 29

	)

1270 
	#R_SPARC_10
 30

	)

1271 
	#R_SPARC_11
 31

	)

1272 
	#R_SPARC_64
 32

	)

1273 
	#R_SPARC_OLO10
 33

	)

1274 
	#R_SPARC_HH22
 34

	)

1275 
	#R_SPARC_HM10
 35

	)

1276 
	#R_SPARC_LM22
 36

	)

1277 
	#R_SPARC_PC_HH22
 37

	)

1278 
	#R_SPARC_PC_HM10
 38

	)

1279 
	#R_SPARC_PC_LM22
 39

	)

1280 
	#R_SPARC_WDISP16
 40

	)

1281 
	#R_SPARC_WDISP19
 41

	)

1282 
	#R_SPARC_GLOB_JMP
 42

	)

1283 
	#R_SPARC_7
 43

	)

1284 
	#R_SPARC_5
 44

	)

1285 
	#R_SPARC_6
 45

	)

1286 
	#R_SPARC_DISP64
 46

	)

1287 
	#R_SPARC_PLT64
 47

	)

1288 
	#R_SPARC_HIX22
 48

	)

1289 
	#R_SPARC_LOX10
 49

	)

1290 
	#R_SPARC_H44
 50

	)

1291 
	#R_SPARC_M44
 51

	)

1292 
	#R_SPARC_L44
 52

	)

1293 
	#R_SPARC_REGISTER
 53

	)

1294 
	#R_SPARC_UA64
 54

	)

1295 
	#R_SPARC_UA16
 55

	)

1296 
	#R_SPARC_TLS_GD_HI22
 56

	)

1297 
	#R_SPARC_TLS_GD_LO10
 57

	)

1298 
	#R_SPARC_TLS_GD_ADD
 58

	)

1299 
	#R_SPARC_TLS_GD_CALL
 59

	)

1300 
	#R_SPARC_TLS_LDM_HI22
 60

	)

1301 
	#R_SPARC_TLS_LDM_LO10
 61

	)

1302 
	#R_SPARC_TLS_LDM_ADD
 62

	)

1303 
	#R_SPARC_TLS_LDM_CALL
 63

	)

1304 
	#R_SPARC_TLS_LDO_HIX22
 64

	)

1305 
	#R_SPARC_TLS_LDO_LOX10
 65

	)

1306 
	#R_SPARC_TLS_LDO_ADD
 66

	)

1307 
	#R_SPARC_TLS_IE_HI22
 67

	)

1308 
	#R_SPARC_TLS_IE_LO10
 68

	)

1309 
	#R_SPARC_TLS_IE_LD
 69

	)

1310 
	#R_SPARC_TLS_IE_LDX
 70

	)

1311 
	#R_SPARC_TLS_IE_ADD
 71

	)

1312 
	#R_SPARC_TLS_LE_HIX22
 72

	)

1313 
	#R_SPARC_TLS_LE_LOX10
 73

	)

1314 
	#R_SPARC_TLS_DTPMOD32
 74

	)

1315 
	#R_SPARC_TLS_DTPMOD64
 75

	)

1316 
	#R_SPARC_TLS_DTPOFF32
 76

	)

1317 
	#R_SPARC_TLS_DTPOFF64
 77

	)

1318 
	#R_SPARC_TLS_TPOFF32
 78

	)

1319 
	#R_SPARC_TLS_TPOFF64
 79

	)

1320 
	#R_SPARC_GOTDATA_HIX22
 80

	)

1321 
	#R_SPARC_GOTDATA_LOX10
 81

	)

1322 
	#R_SPARC_GOTDATA_OP_HIX22
 82

	)

1323 
	#R_SPARC_GOTDATA_OP_LOX10
 83

	)

1324 
	#R_SPARC_GOTDATA_OP
 84

	)

1325 
	#R_SPARC_H34
 85

	)

1326 
	#R_SPARC_SIZE32
 86

	)

1327 
	#R_SPARC_SIZE64
 87

	)

1328 
	#R_SPARC_WDISP10
 88

	)

1329 
	#R_SPARC_JMP_IREL
 248

	)

1330 
	#R_SPARC_IRELATIVE
 249

	)

1331 
	#R_SPARC_GNU_VTINHERIT
 250

	)

1332 
	#R_SPARC_GNU_VTENTRY
 251

	)

1333 
	#R_SPARC_REV32
 252

	)

1335 
	#R_SPARC_NUM
 253

	)

1339 
	#DT_SPARC_REGISTER
 0x70000001

	)

1340 
	#DT_SPARC_NUM
 2

	)

1346 
	#EF_MIPS_NOREORDER
 1

	)

1347 
	#EF_MIPS_PIC
 2

	)

1348 
	#EF_MIPS_CPIC
 4

	)

1349 
	#EF_MIPS_XGOT
 8

	)

1350 
	#EF_MIPS_64BIT_WHIRL
 16

	)

1351 
	#EF_MIPS_ABI2
 32

	)

1352 
	#EF_MIPS_ABI_ON32
 64

	)

1353 
	#EF_MIPS_FP64
 512

	)

1354 
	#EF_MIPS_NAN2008
 1024

	)

1355 
	#EF_MIPS_ARCH
 0xf0000000

	)

1359 
	#EF_MIPS_ARCH_1
 0x00000000

	)

1360 
	#EF_MIPS_ARCH_2
 0x10000000

	)

1361 
	#EF_MIPS_ARCH_3
 0x20000000

	)

1362 
	#EF_MIPS_ARCH_4
 0x30000000

	)

1363 
	#EF_MIPS_ARCH_5
 0x40000000

	)

1364 
	#EF_MIPS_ARCH_32
 0x50000000

	)

1365 
	#EF_MIPS_ARCH_64
 0x60000000

	)

1366 
	#EF_MIPS_ARCH_32R2
 0x70000000

	)

1367 
	#EF_MIPS_ARCH_64R2
 0x80000000

	)

1371 
	#E_MIPS_ARCH_1
 
EF_MIPS_ARCH_1


	)

1372 
	#E_MIPS_ARCH_2
 
EF_MIPS_ARCH_2


	)

1373 
	#E_MIPS_ARCH_3
 
EF_MIPS_ARCH_3


	)

1374 
	#E_MIPS_ARCH_4
 
EF_MIPS_ARCH_4


	)

1375 
	#E_MIPS_ARCH_5
 
EF_MIPS_ARCH_5


	)

1376 
	#E_MIPS_ARCH_32
 
EF_MIPS_ARCH_32


	)

1377 
	#E_MIPS_ARCH_64
 
EF_MIPS_ARCH_64


	)

1381 
	#SHN_MIPS_ACOMMON
 0xff00

	)

1382 
	#SHN_MIPS_TEXT
 0xff01

	)

1383 
	#SHN_MIPS_DATA
 0xff02

	)

1384 
	#SHN_MIPS_SCOMMON
 0xff03

	)

1385 
	#SHN_MIPS_SUNDEFINED
 0xff04

	)

1389 
	#SHT_MIPS_LIBLIST
 0x70000000

	)

1390 
	#SHT_MIPS_MSYM
 0x70000001

	)

1391 
	#SHT_MIPS_CONFLICT
 0x70000002

	)

1392 
	#SHT_MIPS_GPTAB
 0x70000003

	)

1393 
	#SHT_MIPS_UCODE
 0x70000004

	)

1394 
	#SHT_MIPS_DEBUG
 0x70000005

	)

1395 
	#SHT_MIPS_REGINFO
 0x70000006

	)

1396 
	#SHT_MIPS_PACKAGE
 0x70000007

	)

1397 
	#SHT_MIPS_PACKSYM
 0x70000008

	)

1398 
	#SHT_MIPS_RELD
 0x70000009

	)

1399 
	#SHT_MIPS_IFACE
 0x7000000b

	)

1400 
	#SHT_MIPS_CONTENT
 0x7000000c

	)

1401 
	#SHT_MIPS_OPTIONS
 0x7000000d

	)

1402 
	#SHT_MIPS_SHDR
 0x70000010

	)

1403 
	#SHT_MIPS_FDESC
 0x70000011

	)

1404 
	#SHT_MIPS_EXTSYM
 0x70000012

	)

1405 
	#SHT_MIPS_DENSE
 0x70000013

	)

1406 
	#SHT_MIPS_PDESC
 0x70000014

	)

1407 
	#SHT_MIPS_LOCSYM
 0x70000015

	)

1408 
	#SHT_MIPS_AUXSYM
 0x70000016

	)

1409 
	#SHT_MIPS_OPTSYM
 0x70000017

	)

1410 
	#SHT_MIPS_LOCSTR
 0x70000018

	)

1411 
	#SHT_MIPS_LINE
 0x70000019

	)

1412 
	#SHT_MIPS_RFDESC
 0x7000001a

	)

1413 
	#SHT_MIPS_DELTASYM
 0x7000001b

	)

1414 
	#SHT_MIPS_DELTAINST
 0x7000001c

	)

1415 
	#SHT_MIPS_DELTACLASS
 0x7000001d

	)

1416 
	#SHT_MIPS_DWARF
 0x7000001ê

	)

1417 
	#SHT_MIPS_DELTADECL
 0x7000001f

	)

1418 
	#SHT_MIPS_SYMBOL_LIB
 0x70000020

	)

1419 
	#SHT_MIPS_EVENTS
 0x70000021

	)

1420 
	#SHT_MIPS_TRANSLATE
 0x70000022

	)

1421 
	#SHT_MIPS_PIXIE
 0x70000023

	)

1422 
	#SHT_MIPS_XLATE
 0x70000024

	)

1423 
	#SHT_MIPS_XLATE_DEBUG
 0x70000025

	)

1424 
	#SHT_MIPS_WHIRL
 0x70000026

	)

1425 
	#SHT_MIPS_EH_REGION
 0x70000027

	)

1426 
	#SHT_MIPS_XLATE_OLD
 0x70000028

	)

1427 
	#SHT_MIPS_PDR_EXCEPTION
 0x70000029

	)

1431 
	#SHF_MIPS_GPREL
 0x10000000

	)

1432 
	#SHF_MIPS_MERGE
 0x20000000

	)

1433 
	#SHF_MIPS_ADDR
 0x40000000

	)

1434 
	#SHF_MIPS_STRINGS
 0x80000000

	)

1435 
	#SHF_MIPS_NOSTRIP
 0x08000000

	)

1436 
	#SHF_MIPS_LOCAL
 0x04000000

	)

1437 
	#SHF_MIPS_NAMES
 0x02000000

	)

1438 
	#SHF_MIPS_NODUPE
 0x01000000

	)

1444 
	#STO_MIPS_DEFAULT
 0x0

	)

1445 
	#STO_MIPS_INTERNAL
 0x1

	)

1446 
	#STO_MIPS_HIDDEN
 0x2

	)

1447 
	#STO_MIPS_PROTECTED
 0x3

	)

1448 
	#STO_MIPS_PLT
 0x8

	)

1449 
	#STO_MIPS_SC_ALIGN_UNUSED
 0xff

	)

1452 
	#STB_MIPS_SPLIT_COMMON
 13

	)

1460 
Elf32_W‹d
 
	mgt_cuºít_g_vÆue
;

1461 
Elf32_W‹d
 
	mgt_unu£d
;

1462 } 
	mgt_hódî
;

1465 
Elf32_W‹d
 
	mgt_g_vÆue
;

1466 
Elf32_W‹d
 
	mgt_byãs
;

1467 } 
	mgt_íåy
;

1468 } 
	tElf32_g±ab
;

1474 
Elf32_W‹d
 
	mri_g¥mask
;

1475 
Elf32_W‹d
 
	mri_˝rmask
[4];

1476 
Elf32_Sw‹d
 
	mri_gp_vÆue
;

1477 } 
	tElf32_RegInfo
;

1483 
	mköd
;

1485 
	msize
;

1486 
Elf32_Se˘i⁄
 
	m£˘i⁄
;

1488 
Elf32_W‹d
 
	möfo
;

1489 } 
	tElf_O±i⁄s
;

1493 
	#ODK_NULL
 0

	)

1494 
	#ODK_REGINFO
 1

	)

1495 
	#ODK_EXCEPTIONS
 2

	)

1496 
	#ODK_PAD
 3

	)

1497 
	#ODK_HWPATCH
 4

	)

1498 
	#ODK_FILL
 5

	)

1499 
	#ODK_TAGS
 6

	)

1500 
	#ODK_HWAND
 7

	)

1501 
	#ODK_HWOR
 8

	)

1505 
	#OEX_FPU_MIN
 0x1‡

	)

1506 
	#OEX_FPU_MAX
 0x1f00

	)

1507 
	#OEX_PAGE0
 0x10000

	)

1508 
	#OEX_SMM
 0x20000

	)

1509 
	#OEX_FPDBUG
 0x40000

	)

1510 
	#OEX_PRECISEFP
 
OEX_FPDBUG


	)

1511 
	#OEX_DISMISS
 0x80000

	)

1513 
	#OEX_FPU_INVAL
 0x10

	)

1514 
	#OEX_FPU_DIV0
 0x08

	)

1515 
	#OEX_FPU_OFLO
 0x04

	)

1516 
	#OEX_FPU_UFLO
 0x02

	)

1517 
	#OEX_FPU_INEX
 0x01

	)

1521 
	#OHW_R4KEOP
 0x1

	)

1522 
	#OHW_R8KPFETCH
 0x2

	)

1523 
	#OHW_R5KEOP
 0x4

	)

1524 
	#OHW_R5KCVTL
 0x8

	)

1526 
	#OPAD_PREFIX
 0x1

	)

1527 
	#OPAD_POSTFIX
 0x2

	)

1528 
	#OPAD_SYMBOL
 0x4

	)

1534 
Elf32_W‹d
 
	mhwp_Êags1
;

1535 
Elf32_W‹d
 
	mhwp_Êags2
;

1536 } 
	tElf_O±i⁄s_Hw
;

1540 
	#OHWA0_R4KEOP_CHECKED
 0x00000001

	)

1541 
	#OHWA1_R4KEOP_CLEAN
 0x00000002

	)

1545 
	#R_MIPS_NONE
 0

	)

1546 
	#R_MIPS_16
 1

	)

1547 
	#R_MIPS_32
 2

	)

1548 
	#R_MIPS_REL32
 3

	)

1549 
	#R_MIPS_26
 4

	)

1550 
	#R_MIPS_HI16
 5

	)

1551 
	#R_MIPS_LO16
 6

	)

1552 
	#R_MIPS_GPREL16
 7

	)

1553 
	#R_MIPS_LITERAL
 8

	)

1554 
	#R_MIPS_GOT16
 9

	)

1555 
	#R_MIPS_PC16
 10

	)

1556 
	#R_MIPS_CALL16
 11

	)

1557 
	#R_MIPS_GPREL32
 12

	)

1559 
	#R_MIPS_SHIFT5
 16

	)

1560 
	#R_MIPS_SHIFT6
 17

	)

1561 
	#R_MIPS_64
 18

	)

1562 
	#R_MIPS_GOT_DISP
 19

	)

1563 
	#R_MIPS_GOT_PAGE
 20

	)

1564 
	#R_MIPS_GOT_OFST
 21

	)

1565 
	#R_MIPS_GOT_HI16
 22

	)

1566 
	#R_MIPS_GOT_LO16
 23

	)

1567 
	#R_MIPS_SUB
 24

	)

1568 
	#R_MIPS_INSERT_A
 25

	)

1569 
	#R_MIPS_INSERT_B
 26

	)

1570 
	#R_MIPS_DELETE
 27

	)

1571 
	#R_MIPS_HIGHER
 28

	)

1572 
	#R_MIPS_HIGHEST
 29

	)

1573 
	#R_MIPS_CALL_HI16
 30

	)

1574 
	#R_MIPS_CALL_LO16
 31

	)

1575 
	#R_MIPS_SCN_DISP
 32

	)

1576 
	#R_MIPS_REL16
 33

	)

1577 
	#R_MIPS_ADD_IMMEDIATE
 34

	)

1578 
	#R_MIPS_PJUMP
 35

	)

1579 
	#R_MIPS_RELGOT
 36

	)

1580 
	#R_MIPS_JALR
 37

	)

1581 
	#R_MIPS_TLS_DTPMOD32
 38

	)

1582 
	#R_MIPS_TLS_DTPREL32
 39

	)

1583 
	#R_MIPS_TLS_DTPMOD64
 40

	)

1584 
	#R_MIPS_TLS_DTPREL64
 41

	)

1585 
	#R_MIPS_TLS_GD
 42

	)

1586 
	#R_MIPS_TLS_LDM
 43

	)

1587 
	#R_MIPS_TLS_DTPREL_HI16
 44

	)

1588 
	#R_MIPS_TLS_DTPREL_LO16
 45

	)

1589 
	#R_MIPS_TLS_GOTTPREL
 46

	)

1590 
	#R_MIPS_TLS_TPREL32
 47

	)

1591 
	#R_MIPS_TLS_TPREL64
 48

	)

1592 
	#R_MIPS_TLS_TPREL_HI16
 49

	)

1593 
	#R_MIPS_TLS_TPREL_LO16
 50

	)

1594 
	#R_MIPS_GLOB_DAT
 51

	)

1595 
	#R_MIPS_COPY
 126

	)

1596 
	#R_MIPS_JUMP_SLOT
 127

	)

1598 
	#R_MIPS_NUM
 128

	)

1602 
	#PT_MIPS_REGINFO
 0x70000000

	)

1603 
	#PT_MIPS_RTPROC
 0x70000001

	)

1604 
	#PT_MIPS_OPTIONS
 0x70000002

	)

1605 
	#PT_MIPS_ABIFLAGS
 0x70000003

	)

1609 
	#PF_MIPS_LOCAL
 0x10000000

	)

1613 
	#DT_MIPS_RLD_VERSION
 0x70000001

	)

1614 
	#DT_MIPS_TIME_STAMP
 0x70000002

	)

1615 
	#DT_MIPS_ICHECKSUM
 0x70000003

	)

1616 
	#DT_MIPS_IVERSION
 0x70000004

	)

1617 
	#DT_MIPS_FLAGS
 0x70000005

	)

1618 
	#DT_MIPS_BASE_ADDRESS
 0x70000006

	)

1619 
	#DT_MIPS_MSYM
 0x70000007

	)

1620 
	#DT_MIPS_CONFLICT
 0x70000008

	)

1621 
	#DT_MIPS_LIBLIST
 0x70000009

	)

1622 
	#DT_MIPS_LOCAL_GOTNO
 0x7000000®

	)

1623 
	#DT_MIPS_CONFLICTNO
 0x7000000b

	)

1624 
	#DT_MIPS_LIBLISTNO
 0x70000010

	)

1625 
	#DT_MIPS_SYMTABNO
 0x70000011

	)

1626 
	#DT_MIPS_UNREFEXTNO
 0x70000012

	)

1627 
	#DT_MIPS_GOTSYM
 0x70000013

	)

1628 
	#DT_MIPS_HIPAGENO
 0x70000014

	)

1629 
	#DT_MIPS_RLD_MAP
 0x70000016

	)

1630 
	#DT_MIPS_DELTA_CLASS
 0x70000017

	)

1631 
	#DT_MIPS_DELTA_CLASS_NO
 0x70000018

	)

1633 
	#DT_MIPS_DELTA_INSTANCE
 0x70000019

	)

1634 
	#DT_MIPS_DELTA_INSTANCE_NO
 0x7000001®

	)

1636 
	#DT_MIPS_DELTA_RELOC
 0x7000001b

	)

1637 
	#DT_MIPS_DELTA_RELOC_NO
 0x7000001¯

	)

1639 
	#DT_MIPS_DELTA_SYM
 0x7000001d

	)

1641 
	#DT_MIPS_DELTA_SYM_NO
 0x7000001ê

	)

1643 
	#DT_MIPS_DELTA_CLASSSYM
 0x70000020

	)

1645 
	#DT_MIPS_DELTA_CLASSSYM_NO
 0x70000021

	)

1647 
	#DT_MIPS_CXX_FLAGS
 0x70000022

	)

1648 
	#DT_MIPS_PIXIE_INIT
 0x70000023

	)

1649 
	#DT_MIPS_SYMBOL_LIB
 0x70000024

	)

1650 
	#DT_MIPS_LOCALPAGE_GOTIDX
 0x70000025

	)

1651 
	#DT_MIPS_LOCAL_GOTIDX
 0x70000026

	)

1652 
	#DT_MIPS_HIDDEN_GOTIDX
 0x70000027

	)

1653 
	#DT_MIPS_PROTECTED_GOTIDX
 0x70000028

	)

1654 
	#DT_MIPS_OPTIONS
 0x70000029

	)

1655 
	#DT_MIPS_INTERFACE
 0x7000002®

	)

1656 
	#DT_MIPS_DYNSTR_ALIGN
 0x7000002b

	)

1657 
	#DT_MIPS_INTERFACE_SIZE
 0x7000002¯

	)

1658 
	#DT_MIPS_RLD_TEXT_RESOLVE_ADDR
 0x7000002d

	)

1660 
	#DT_MIPS_PERF_SUFFIX
 0x7000002ê

	)

1662 
	#DT_MIPS_COMPACT_SIZE
 0x7000002‡

	)

1663 
	#DT_MIPS_GP_VALUE
 0x70000030

	)

1664 
	#DT_MIPS_AUX_DYNAMIC
 0x70000031

	)

1666 
	#DT_MIPS_PLTGOT
 0x70000032

	)

1670 
	#DT_MIPS_RWPLT
 0x70000034

	)

1674 
	#DT_MIPS_RLD_MAP_REL
 0x70000035

	)

1675 
	#DT_MIPS_NUM
 0x36

	)

1679 
	#RHF_NONE
 0

	)

1680 
	#RHF_QUICKSTART
 (1 << 0Ë

	)

1681 
	#RHF_NOTPOT
 (1 << 1Ë

	)

1682 
	#RHF_NO_LIBRARY_REPLACEMENT
 (1 << 2Ë

	)

1683 
	#RHF_NO_MOVE
 (1 << 3)

	)

1684 
	#RHF_SGI_ONLY
 (1 << 4)

	)

1685 
	#RHF_GUARANTEE_INIT
 (1 << 5)

	)

1686 
	#RHF_DELTA_C_PLUS_PLUS
 (1 << 6)

	)

1687 
	#RHF_GUARANTEE_START_INIT
 (1 << 7)

	)

1688 
	#RHF_PIXIE
 (1 << 8)

	)

1689 
	#RHF_DEFAULT_DELAY_LOAD
 (1 << 9)

	)

1690 
	#RHF_REQUICKSTART
 (1 << 10)

	)

1691 
	#RHF_REQUICKSTARTED
 (1 << 11)

	)

1692 
	#RHF_CORD
 (1 << 12)

	)

1693 
	#RHF_NO_UNRES_UNDEF
 (1 << 13)

	)

1694 
	#RHF_RLD_ORDER_SAFE
 (1 << 14)

	)

1700 
Elf32_W‹d
 
	ml_«me
;

1701 
Elf32_W‹d
 
	ml_time_°amp
;

1702 
Elf32_W‹d
 
	ml_checksum
;

1703 
Elf32_W‹d
 
	ml_vîsi⁄
;

1704 
Elf32_W‹d
 
	ml_Êags
;

1705 } 
	tElf32_Lib
;

1709 
Elf64_W‹d
 
	ml_«me
;

1710 
Elf64_W‹d
 
	ml_time_°amp
;

1711 
Elf64_W‹d
 
	ml_checksum
;

1712 
Elf64_W‹d
 
	ml_vîsi⁄
;

1713 
Elf64_W‹d
 
	ml_Êags
;

1714 } 
	tElf64_Lib
;

1719 
	#LL_NONE
 0

	)

1720 
	#LL_EXACT_MATCH
 (1 << 0Ë

	)

1721 
	#LL_IGNORE_INT_VER
 (1 << 1Ë

	)

1722 
	#LL_REQUIRE_MINOR
 (1 << 2)

	)

1723 
	#LL_EXPORTS
 (1 << 3)

	)

1724 
	#LL_DELAY_LOAD
 (1 << 4)

	)

1725 
	#LL_DELTA
 (1 << 5)

	)

1729 
Elf32_Addr
 
	tElf32_C⁄Êi˘
;

1734 
Elf32_HÆf
 
	mvîsi⁄
;

1736 
	miß_Àvñ
;

1738 
	miß_ªv
;

1740 
	mg¥_size
;

1742 
	m˝r1_size
;

1744 
	m˝r2_size
;

1746 
	mÂ_abi
;

1748 
Elf32_W‹d
 
	miß_ext
;

1750 
Elf32_W‹d
 
	ma£s
;

1752 
Elf32_W‹d
 
	mÊags1
;

1753 
Elf32_W‹d
 
	mÊags2
;

1754 } 
	tElf_MIPS_ABIFœgs_v0
;

1758 
	#MIPS_AFL_REG_NONE
 0x00

	)

1759 
	#MIPS_AFL_REG_32
 0x01

	)

1760 
	#MIPS_AFL_REG_64
 0x02

	)

1761 
	#MIPS_AFL_REG_128
 0x03

	)

1765 
	#MIPS_AFL_ASE_DSP
 0x00000001

	)

1766 
	#MIPS_AFL_ASE_DSPR2
 0x00000002

	)

1767 
	#MIPS_AFL_ASE_EVA
 0x00000004

	)

1768 
	#MIPS_AFL_ASE_MCU
 0x00000008

	)

1769 
	#MIPS_AFL_ASE_MDMX
 0x00000010

	)

1770 
	#MIPS_AFL_ASE_MIPS3D
 0x00000020

	)

1771 
	#MIPS_AFL_ASE_MT
 0x00000040

	)

1772 
	#MIPS_AFL_ASE_SMARTMIPS
 0x00000080

	)

1773 
	#MIPS_AFL_ASE_VIRT
 0x00000100

	)

1774 
	#MIPS_AFL_ASE_MSA
 0x00000200

	)

1775 
	#MIPS_AFL_ASE_MIPS16
 0x00000400

	)

1776 
	#MIPS_AFL_ASE_MICROMIPS
 0x00000800

	)

1777 
	#MIPS_AFL_ASE_XPA
 0x00001000

	)

1778 
	#MIPS_AFL_ASE_MASK
 0x00001ff‡

	)

1782 
	#MIPS_AFL_EXT_XLR
 1

	)

1783 
	#MIPS_AFL_EXT_OCTEON2
 2

	)

1784 
	#MIPS_AFL_EXT_OCTEONP
 3

	)

1785 
	#MIPS_AFL_EXT_LOONGSON_3A
 4

	)

1786 
	#MIPS_AFL_EXT_OCTEON
 5

	)

1787 
	#MIPS_AFL_EXT_5900
 6

	)

1788 
	#MIPS_AFL_EXT_4650
 7

	)

1789 
	#MIPS_AFL_EXT_4010
 8

	)

1790 
	#MIPS_AFL_EXT_4100
 9

	)

1791 
	#MIPS_AFL_EXT_3900
 10

	)

1792 
	#MIPS_AFL_EXT_10000
 11

	)

1793 
	#MIPS_AFL_EXT_SB1
 12

	)

1794 
	#MIPS_AFL_EXT_4111
 13

	)

1795 
	#MIPS_AFL_EXT_4120
 14

	)

1796 
	#MIPS_AFL_EXT_5400
 15

	)

1797 
	#MIPS_AFL_EXT_5500
 16

	)

1798 
	#MIPS_AFL_EXT_LOONGSON_2E
 17

	)

1799 
	#MIPS_AFL_EXT_LOONGSON_2F
 18

	)

1802 
	#MIPS_AFL_FLAGS1_ODDSPREG
 1

	)

1808 
	mVÆ_GNU_MIPS_ABI_FP_ANY
 = 0,

1810 
	mVÆ_GNU_MIPS_ABI_FP_DOUBLE
 = 1,

1812 
	mVÆ_GNU_MIPS_ABI_FP_SINGLE
 = 2,

1814 
	mVÆ_GNU_MIPS_ABI_FP_SOFT
 = 3,

1816 
	mVÆ_GNU_MIPS_ABI_FP_OLD_64
 = 4,

1818 
	mVÆ_GNU_MIPS_ABI_FP_XX
 = 5,

1820 
	mVÆ_GNU_MIPS_ABI_FP_64
 = 6,

1822 
	mVÆ_GNU_MIPS_ABI_FP_64A
 = 7,

1824 
	mVÆ_GNU_MIPS_ABI_FP_MAX
 = 7

1831 
	#EF_PARISC_TRAPNIL
 0x00010000

	)

1832 
	#EF_PARISC_EXT
 0x00020000

	)

1833 
	#EF_PARISC_LSB
 0x00040000

	)

1834 
	#EF_PARISC_WIDE
 0x00080000

	)

1835 
	#EF_PARISC_NO_KABP
 0x00100000

	)

1837 
	#EF_PARISC_LAZYSWAP
 0x00400000

	)

1838 
	#EF_PARISC_ARCH
 0x0000fff‡

	)

1842 
	#EFA_PARISC_1_0
 0x020b

	)

1843 
	#EFA_PARISC_1_1
 0x0210

	)

1844 
	#EFA_PARISC_2_0
 0x0214

	)

1848 
	#SHN_PARISC_ANSI_COMMON
 0xff00

	)

1850 
	#SHN_PARISC_HUGE_COMMON
 0xff01

	)

1854 
	#SHT_PARISC_EXT
 0x70000000

	)

1855 
	#SHT_PARISC_UNWIND
 0x70000001

	)

1856 
	#SHT_PARISC_DOC
 0x70000002

	)

1860 
	#SHF_PARISC_SHORT
 0x20000000

	)

1861 
	#SHF_PARISC_HUGE
 0x40000000

	)

1862 
	#SHF_PARISC_SBP
 0x80000000

	)

1866 
	#STT_PARISC_MILLICODE
 13

	)

1868 
	#STT_HP_OPAQUE
 (
STT_LOOS
 + 0x1)

	)

1869 
	#STT_HP_STUB
 (
STT_LOOS
 + 0x2)

	)

1873 
	#R_PARISC_NONE
 0

	)

1874 
	#R_PARISC_DIR32
 1

	)

1875 
	#R_PARISC_DIR21L
 2

	)

1876 
	#R_PARISC_DIR17R
 3

	)

1877 
	#R_PARISC_DIR17F
 4

	)

1878 
	#R_PARISC_DIR14R
 6

	)

1879 
	#R_PARISC_PCREL32
 9

	)

1880 
	#R_PARISC_PCREL21L
 10

	)

1881 
	#R_PARISC_PCREL17R
 11

	)

1882 
	#R_PARISC_PCREL17F
 12

	)

1883 
	#R_PARISC_PCREL14R
 14

	)

1884 
	#R_PARISC_DPREL21L
 18

	)

1885 
	#R_PARISC_DPREL14R
 22

	)

1886 
	#R_PARISC_GPREL21L
 26

	)

1887 
	#R_PARISC_GPREL14R
 30

	)

1888 
	#R_PARISC_LTOFF21L
 34

	)

1889 
	#R_PARISC_LTOFF14R
 38

	)

1890 
	#R_PARISC_SECREL32
 41

	)

1891 
	#R_PARISC_SEGBASE
 48

	)

1892 
	#R_PARISC_SEGREL32
 49

	)

1893 
	#R_PARISC_PLTOFF21L
 50

	)

1894 
	#R_PARISC_PLTOFF14R
 54

	)

1895 
	#R_PARISC_LTOFF_FPTR32
 57

	)

1896 
	#R_PARISC_LTOFF_FPTR21L
 58

	)

1897 
	#R_PARISC_LTOFF_FPTR14R
 62

	)

1898 
	#R_PARISC_FPTR64
 64

	)

1899 
	#R_PARISC_PLABEL32
 65

	)

1900 
	#R_PARISC_PLABEL21L
 66

	)

1901 
	#R_PARISC_PLABEL14R
 70

	)

1902 
	#R_PARISC_PCREL64
 72

	)

1903 
	#R_PARISC_PCREL22F
 74

	)

1904 
	#R_PARISC_PCREL14WR
 75

	)

1905 
	#R_PARISC_PCREL14DR
 76

	)

1906 
	#R_PARISC_PCREL16F
 77

	)

1907 
	#R_PARISC_PCREL16WF
 78

	)

1908 
	#R_PARISC_PCREL16DF
 79

	)

1909 
	#R_PARISC_DIR64
 80

	)

1910 
	#R_PARISC_DIR14WR
 83

	)

1911 
	#R_PARISC_DIR14DR
 84

	)

1912 
	#R_PARISC_DIR16F
 85

	)

1913 
	#R_PARISC_DIR16WF
 86

	)

1914 
	#R_PARISC_DIR16DF
 87

	)

1915 
	#R_PARISC_GPREL64
 88

	)

1916 
	#R_PARISC_GPREL14WR
 91

	)

1917 
	#R_PARISC_GPREL14DR
 92

	)

1918 
	#R_PARISC_GPREL16F
 93

	)

1919 
	#R_PARISC_GPREL16WF
 94

	)

1920 
	#R_PARISC_GPREL16DF
 95

	)

1921 
	#R_PARISC_LTOFF64
 96

	)

1922 
	#R_PARISC_LTOFF14WR
 99

	)

1923 
	#R_PARISC_LTOFF14DR
 100

	)

1924 
	#R_PARISC_LTOFF16F
 101

	)

1925 
	#R_PARISC_LTOFF16WF
 102

	)

1926 
	#R_PARISC_LTOFF16DF
 103

	)

1927 
	#R_PARISC_SECREL64
 104

	)

1928 
	#R_PARISC_SEGREL64
 112

	)

1929 
	#R_PARISC_PLTOFF14WR
 115

	)

1930 
	#R_PARISC_PLTOFF14DR
 116

	)

1931 
	#R_PARISC_PLTOFF16F
 117

	)

1932 
	#R_PARISC_PLTOFF16WF
 118

	)

1933 
	#R_PARISC_PLTOFF16DF
 119

	)

1934 
	#R_PARISC_LTOFF_FPTR64
 120

	)

1935 
	#R_PARISC_LTOFF_FPTR14WR
 123

	)

1936 
	#R_PARISC_LTOFF_FPTR14DR
 124

	)

1937 
	#R_PARISC_LTOFF_FPTR16F
 125

	)

1938 
	#R_PARISC_LTOFF_FPTR16WF
 126

	)

1939 
	#R_PARISC_LTOFF_FPTR16DF
 127

	)

1940 
	#R_PARISC_LORESERVE
 128

	)

1941 
	#R_PARISC_COPY
 128

	)

1942 
	#R_PARISC_IPLT
 129

	)

1943 
	#R_PARISC_EPLT
 130

	)

1944 
	#R_PARISC_TPREL32
 153

	)

1945 
	#R_PARISC_TPREL21L
 154

	)

1946 
	#R_PARISC_TPREL14R
 158

	)

1947 
	#R_PARISC_LTOFF_TP21L
 162

	)

1948 
	#R_PARISC_LTOFF_TP14R
 166

	)

1949 
	#R_PARISC_LTOFF_TP14F
 167

	)

1950 
	#R_PARISC_TPREL64
 216

	)

1951 
	#R_PARISC_TPREL14WR
 219

	)

1952 
	#R_PARISC_TPREL14DR
 220

	)

1953 
	#R_PARISC_TPREL16F
 221

	)

1954 
	#R_PARISC_TPREL16WF
 222

	)

1955 
	#R_PARISC_TPREL16DF
 223

	)

1956 
	#R_PARISC_LTOFF_TP64
 224

	)

1957 
	#R_PARISC_LTOFF_TP14WR
 227

	)

1958 
	#R_PARISC_LTOFF_TP14DR
 228

	)

1959 
	#R_PARISC_LTOFF_TP16F
 229

	)

1960 
	#R_PARISC_LTOFF_TP16WF
 230

	)

1961 
	#R_PARISC_LTOFF_TP16DF
 231

	)

1962 
	#R_PARISC_GNU_VTENTRY
 232

	)

1963 
	#R_PARISC_GNU_VTINHERIT
 233

	)

1964 
	#R_PARISC_TLS_GD21L
 234

	)

1965 
	#R_PARISC_TLS_GD14R
 235

	)

1966 
	#R_PARISC_TLS_GDCALL
 236

	)

1967 
	#R_PARISC_TLS_LDM21L
 237

	)

1968 
	#R_PARISC_TLS_LDM14R
 238

	)

1969 
	#R_PARISC_TLS_LDMCALL
 239

	)

1970 
	#R_PARISC_TLS_LDO21L
 240

	)

1971 
	#R_PARISC_TLS_LDO14R
 241

	)

1972 
	#R_PARISC_TLS_DTPMOD32
 242

	)

1973 
	#R_PARISC_TLS_DTPMOD64
 243

	)

1974 
	#R_PARISC_TLS_DTPOFF32
 244

	)

1975 
	#R_PARISC_TLS_DTPOFF64
 245

	)

1976 
	#R_PARISC_TLS_LE21L
 
R_PARISC_TPREL21L


	)

1977 
	#R_PARISC_TLS_LE14R
 
R_PARISC_TPREL14R


	)

1978 
	#R_PARISC_TLS_IE21L
 
R_PARISC_LTOFF_TP21L


	)

1979 
	#R_PARISC_TLS_IE14R
 
R_PARISC_LTOFF_TP14R


	)

1980 
	#R_PARISC_TLS_TPREL32
 
R_PARISC_TPREL32


	)

1981 
	#R_PARISC_TLS_TPREL64
 
R_PARISC_TPREL64


	)

1982 
	#R_PARISC_HIRESERVE
 255

	)

1986 
	#PT_HP_TLS
 (
PT_LOOS
 + 0x0)

	)

1987 
	#PT_HP_CORE_NONE
 (
PT_LOOS
 + 0x1)

	)

1988 
	#PT_HP_CORE_VERSION
 (
PT_LOOS
 + 0x2)

	)

1989 
	#PT_HP_CORE_KERNEL
 (
PT_LOOS
 + 0x3)

	)

1990 
	#PT_HP_CORE_COMM
 (
PT_LOOS
 + 0x4)

	)

1991 
	#PT_HP_CORE_PROC
 (
PT_LOOS
 + 0x5)

	)

1992 
	#PT_HP_CORE_LOADABLE
 (
PT_LOOS
 + 0x6)

	)

1993 
	#PT_HP_CORE_STACK
 (
PT_LOOS
 + 0x7)

	)

1994 
	#PT_HP_CORE_SHM
 (
PT_LOOS
 + 0x8)

	)

1995 
	#PT_HP_CORE_MMF
 (
PT_LOOS
 + 0x9)

	)

1996 
	#PT_HP_PARALLEL
 (
PT_LOOS
 + 0x10)

	)

1997 
	#PT_HP_FASTBIND
 (
PT_LOOS
 + 0x11)

	)

1998 
	#PT_HP_OPT_ANNOT
 (
PT_LOOS
 + 0x12)

	)

1999 
	#PT_HP_HSL_ANNOT
 (
PT_LOOS
 + 0x13)

	)

2000 
	#PT_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

2002 
	#PT_PARISC_ARCHEXT
 0x70000000

	)

2003 
	#PT_PARISC_UNWIND
 0x70000001

	)

2007 
	#PF_PARISC_SBP
 0x08000000

	)

2009 
	#PF_HP_PAGE_SIZE
 0x00100000

	)

2010 
	#PF_HP_FAR_SHARED
 0x00200000

	)

2011 
	#PF_HP_NEAR_SHARED
 0x00400000

	)

2012 
	#PF_HP_CODE
 0x01000000

	)

2013 
	#PF_HP_MODIFY
 0x02000000

	)

2014 
	#PF_HP_LAZYSWAP
 0x04000000

	)

2015 
	#PF_HP_SBP
 0x08000000

	)

2022 
	#EF_ALPHA_32BIT
 1

	)

2023 
	#EF_ALPHA_CANRELAX
 2

	)

2028 
	#SHT_ALPHA_DEBUG
 0x70000001

	)

2029 
	#SHT_ALPHA_REGINFO
 0x70000002

	)

2033 
	#SHF_ALPHA_GPREL
 0x10000000

	)

2036 
	#STO_ALPHA_NOPV
 0x80

	)

2037 
	#STO_ALPHA_STD_GPLOAD
 0x88

	)

2041 
	#R_ALPHA_NONE
 0

	)

2042 
	#R_ALPHA_REFLONG
 1

	)

2043 
	#R_ALPHA_REFQUAD
 2

	)

2044 
	#R_ALPHA_GPREL32
 3

	)

2045 
	#R_ALPHA_LITERAL
 4

	)

2046 
	#R_ALPHA_LITUSE
 5

	)

2047 
	#R_ALPHA_GPDISP
 6

	)

2048 
	#R_ALPHA_BRADDR
 7

	)

2049 
	#R_ALPHA_HINT
 8

	)

2050 
	#R_ALPHA_SREL16
 9

	)

2051 
	#R_ALPHA_SREL32
 10

	)

2052 
	#R_ALPHA_SREL64
 11

	)

2053 
	#R_ALPHA_GPRELHIGH
 17

	)

2054 
	#R_ALPHA_GPRELLOW
 18

	)

2055 
	#R_ALPHA_GPREL16
 19

	)

2056 
	#R_ALPHA_COPY
 24

	)

2057 
	#R_ALPHA_GLOB_DAT
 25

	)

2058 
	#R_ALPHA_JMP_SLOT
 26

	)

2059 
	#R_ALPHA_RELATIVE
 27

	)

2060 
	#R_ALPHA_TLS_GD_HI
 28

	)

2061 
	#R_ALPHA_TLSGD
 29

	)

2062 
	#R_ALPHA_TLS_LDM
 30

	)

2063 
	#R_ALPHA_DTPMOD64
 31

	)

2064 
	#R_ALPHA_GOTDTPREL
 32

	)

2065 
	#R_ALPHA_DTPREL64
 33

	)

2066 
	#R_ALPHA_DTPRELHI
 34

	)

2067 
	#R_ALPHA_DTPRELLO
 35

	)

2068 
	#R_ALPHA_DTPREL16
 36

	)

2069 
	#R_ALPHA_GOTTPREL
 37

	)

2070 
	#R_ALPHA_TPREL64
 38

	)

2071 
	#R_ALPHA_TPRELHI
 39

	)

2072 
	#R_ALPHA_TPRELLO
 40

	)

2073 
	#R_ALPHA_TPREL16
 41

	)

2075 
	#R_ALPHA_NUM
 46

	)

2078 
	#LITUSE_ALPHA_ADDR
 0

	)

2079 
	#LITUSE_ALPHA_BASE
 1

	)

2080 
	#LITUSE_ALPHA_BYTOFF
 2

	)

2081 
	#LITUSE_ALPHA_JSR
 3

	)

2082 
	#LITUSE_ALPHA_TLS_GD
 4

	)

2083 
	#LITUSE_ALPHA_TLS_LDM
 5

	)

2086 
	#DT_ALPHA_PLTRO
 (
DT_LOPROC
 + 0)

	)

2087 
	#DT_ALPHA_NUM
 1

	)

2092 
	#EF_PPC_EMB
 0x80000000

	)

2095 
	#EF_PPC_RELOCATABLE
 0x00010000

	)

2096 
	#EF_PPC_RELOCATABLE_LIB
 0x00008000

	)

2100 
	#R_PPC_NONE
 0

	)

2101 
	#R_PPC_ADDR32
 1

	)

2102 
	#R_PPC_ADDR24
 2

	)

2103 
	#R_PPC_ADDR16
 3

	)

2104 
	#R_PPC_ADDR16_LO
 4

	)

2105 
	#R_PPC_ADDR16_HI
 5

	)

2106 
	#R_PPC_ADDR16_HA
 6

	)

2107 
	#R_PPC_ADDR14
 7

	)

2108 
	#R_PPC_ADDR14_BRTAKEN
 8

	)

2109 
	#R_PPC_ADDR14_BRNTAKEN
 9

	)

2110 
	#R_PPC_REL24
 10

	)

2111 
	#R_PPC_REL14
 11

	)

2112 
	#R_PPC_REL14_BRTAKEN
 12

	)

2113 
	#R_PPC_REL14_BRNTAKEN
 13

	)

2114 
	#R_PPC_GOT16
 14

	)

2115 
	#R_PPC_GOT16_LO
 15

	)

2116 
	#R_PPC_GOT16_HI
 16

	)

2117 
	#R_PPC_GOT16_HA
 17

	)

2118 
	#R_PPC_PLTREL24
 18

	)

2119 
	#R_PPC_COPY
 19

	)

2120 
	#R_PPC_GLOB_DAT
 20

	)

2121 
	#R_PPC_JMP_SLOT
 21

	)

2122 
	#R_PPC_RELATIVE
 22

	)

2123 
	#R_PPC_LOCAL24PC
 23

	)

2124 
	#R_PPC_UADDR32
 24

	)

2125 
	#R_PPC_UADDR16
 25

	)

2126 
	#R_PPC_REL32
 26

	)

2127 
	#R_PPC_PLT32
 27

	)

2128 
	#R_PPC_PLTREL32
 28

	)

2129 
	#R_PPC_PLT16_LO
 29

	)

2130 
	#R_PPC_PLT16_HI
 30

	)

2131 
	#R_PPC_PLT16_HA
 31

	)

2132 
	#R_PPC_SDAREL16
 32

	)

2133 
	#R_PPC_SECTOFF
 33

	)

2134 
	#R_PPC_SECTOFF_LO
 34

	)

2135 
	#R_PPC_SECTOFF_HI
 35

	)

2136 
	#R_PPC_SECTOFF_HA
 36

	)

2139 
	#R_PPC_TLS
 67

	)

2140 
	#R_PPC_DTPMOD32
 68

	)

2141 
	#R_PPC_TPREL16
 69

	)

2142 
	#R_PPC_TPREL16_LO
 70

	)

2143 
	#R_PPC_TPREL16_HI
 71

	)

2144 
	#R_PPC_TPREL16_HA
 72

	)

2145 
	#R_PPC_TPREL32
 73

	)

2146 
	#R_PPC_DTPREL16
 74

	)

2147 
	#R_PPC_DTPREL16_LO
 75

	)

2148 
	#R_PPC_DTPREL16_HI
 76

	)

2149 
	#R_PPC_DTPREL16_HA
 77

	)

2150 
	#R_PPC_DTPREL32
 78

	)

2151 
	#R_PPC_GOT_TLSGD16
 79

	)

2152 
	#R_PPC_GOT_TLSGD16_LO
 80

	)

2153 
	#R_PPC_GOT_TLSGD16_HI
 81

	)

2154 
	#R_PPC_GOT_TLSGD16_HA
 82

	)

2155 
	#R_PPC_GOT_TLSLD16
 83

	)

2156 
	#R_PPC_GOT_TLSLD16_LO
 84

	)

2157 
	#R_PPC_GOT_TLSLD16_HI
 85

	)

2158 
	#R_PPC_GOT_TLSLD16_HA
 86

	)

2159 
	#R_PPC_GOT_TPREL16
 87

	)

2160 
	#R_PPC_GOT_TPREL16_LO
 88

	)

2161 
	#R_PPC_GOT_TPREL16_HI
 89

	)

2162 
	#R_PPC_GOT_TPREL16_HA
 90

	)

2163 
	#R_PPC_GOT_DTPREL16
 91

	)

2164 
	#R_PPC_GOT_DTPREL16_LO
 92

	)

2165 
	#R_PPC_GOT_DTPREL16_HI
 93

	)

2166 
	#R_PPC_GOT_DTPREL16_HA
 94

	)

2167 
	#R_PPC_TLSGD
 95

	)

2168 
	#R_PPC_TLSLD
 96

	)

2172 
	#R_PPC_EMB_NADDR32
 101

	)

2173 
	#R_PPC_EMB_NADDR16
 102

	)

2174 
	#R_PPC_EMB_NADDR16_LO
 103

	)

2175 
	#R_PPC_EMB_NADDR16_HI
 104

	)

2176 
	#R_PPC_EMB_NADDR16_HA
 105

	)

2177 
	#R_PPC_EMB_SDAI16
 106

	)

2178 
	#R_PPC_EMB_SDA2I16
 107

	)

2179 
	#R_PPC_EMB_SDA2REL
 108

	)

2180 
	#R_PPC_EMB_SDA21
 109

	)

2181 
	#R_PPC_EMB_MRKREF
 110

	)

2182 
	#R_PPC_EMB_RELSEC16
 111

	)

2183 
	#R_PPC_EMB_RELST_LO
 112

	)

2184 
	#R_PPC_EMB_RELST_HI
 113

	)

2185 
	#R_PPC_EMB_RELST_HA
 114

	)

2186 
	#R_PPC_EMB_BIT_FLD
 115

	)

2187 
	#R_PPC_EMB_RELSDA
 116

	)

2190 
	#R_PPC_DIAB_SDA21_LO
 180

	)

2191 
	#R_PPC_DIAB_SDA21_HI
 181

	)

2192 
	#R_PPC_DIAB_SDA21_HA
 182

	)

2193 
	#R_PPC_DIAB_RELSDA_LO
 183

	)

2194 
	#R_PPC_DIAB_RELSDA_HI
 184

	)

2195 
	#R_PPC_DIAB_RELSDA_HA
 185

	)

2198 
	#R_PPC_IRELATIVE
 248

	)

2201 
	#R_PPC_REL16
 249

	)

2202 
	#R_PPC_REL16_LO
 250

	)

2203 
	#R_PPC_REL16_HI
 251

	)

2204 
	#R_PPC_REL16_HA
 252

	)

2208 
	#R_PPC_TOC16
 255

	)

2211 
	#DT_PPC_GOT
 (
DT_LOPROC
 + 0)

	)

2212 
	#DT_PPC_OPT
 (
DT_LOPROC
 + 1)

	)

2213 
	#DT_PPC_NUM
 2

	)

2216 
	#PPC_OPT_TLS
 1

	)

2219 
	#R_PPC64_NONE
 
R_PPC_NONE


	)

2220 
	#R_PPC64_ADDR32
 
R_PPC_ADDR32


	)

2221 
	#R_PPC64_ADDR24
 
R_PPC_ADDR24


	)

2222 
	#R_PPC64_ADDR16
 
R_PPC_ADDR16


	)

2223 
	#R_PPC64_ADDR16_LO
 
R_PPC_ADDR16_LO


	)

2224 
	#R_PPC64_ADDR16_HI
 
R_PPC_ADDR16_HI


	)

2225 
	#R_PPC64_ADDR16_HA
 
R_PPC_ADDR16_HA


	)

2226 
	#R_PPC64_ADDR14
 
R_PPC_ADDR14


	)

2227 
	#R_PPC64_ADDR14_BRTAKEN
 
R_PPC_ADDR14_BRTAKEN


	)

2228 
	#R_PPC64_ADDR14_BRNTAKEN
 
R_PPC_ADDR14_BRNTAKEN


	)

2229 
	#R_PPC64_REL24
 
R_PPC_REL24


	)

2230 
	#R_PPC64_REL14
 
R_PPC_REL14


	)

2231 
	#R_PPC64_REL14_BRTAKEN
 
R_PPC_REL14_BRTAKEN


	)

2232 
	#R_PPC64_REL14_BRNTAKEN
 
R_PPC_REL14_BRNTAKEN


	)

2233 
	#R_PPC64_GOT16
 
R_PPC_GOT16


	)

2234 
	#R_PPC64_GOT16_LO
 
R_PPC_GOT16_LO


	)

2235 
	#R_PPC64_GOT16_HI
 
R_PPC_GOT16_HI


	)

2236 
	#R_PPC64_GOT16_HA
 
R_PPC_GOT16_HA


	)

2238 
	#R_PPC64_COPY
 
R_PPC_COPY


	)

2239 
	#R_PPC64_GLOB_DAT
 
R_PPC_GLOB_DAT


	)

2240 
	#R_PPC64_JMP_SLOT
 
R_PPC_JMP_SLOT


	)

2241 
	#R_PPC64_RELATIVE
 
R_PPC_RELATIVE


	)

2243 
	#R_PPC64_UADDR32
 
R_PPC_UADDR32


	)

2244 
	#R_PPC64_UADDR16
 
R_PPC_UADDR16


	)

2245 
	#R_PPC64_REL32
 
R_PPC_REL32


	)

2246 
	#R_PPC64_PLT32
 
R_PPC_PLT32


	)

2247 
	#R_PPC64_PLTREL32
 
R_PPC_PLTREL32


	)

2248 
	#R_PPC64_PLT16_LO
 
R_PPC_PLT16_LO


	)

2249 
	#R_PPC64_PLT16_HI
 
R_PPC_PLT16_HI


	)

2250 
	#R_PPC64_PLT16_HA
 
R_PPC_PLT16_HA


	)

2252 
	#R_PPC64_SECTOFF
 
R_PPC_SECTOFF


	)

2253 
	#R_PPC64_SECTOFF_LO
 
R_PPC_SECTOFF_LO


	)

2254 
	#R_PPC64_SECTOFF_HI
 
R_PPC_SECTOFF_HI


	)

2255 
	#R_PPC64_SECTOFF_HA
 
R_PPC_SECTOFF_HA


	)

2256 
	#R_PPC64_ADDR30
 37

	)

2257 
	#R_PPC64_ADDR64
 38

	)

2258 
	#R_PPC64_ADDR16_HIGHER
 39

	)

2259 
	#R_PPC64_ADDR16_HIGHERA
 40

	)

2260 
	#R_PPC64_ADDR16_HIGHEST
 41

	)

2261 
	#R_PPC64_ADDR16_HIGHESTA
 42

	)

2262 
	#R_PPC64_UADDR64
 43

	)

2263 
	#R_PPC64_REL64
 44

	)

2264 
	#R_PPC64_PLT64
 45

	)

2265 
	#R_PPC64_PLTREL64
 46

	)

2266 
	#R_PPC64_TOC16
 47

	)

2267 
	#R_PPC64_TOC16_LO
 48

	)

2268 
	#R_PPC64_TOC16_HI
 49

	)

2269 
	#R_PPC64_TOC16_HA
 50

	)

2270 
	#R_PPC64_TOC
 51

	)

2271 
	#R_PPC64_PLTGOT16
 52

	)

2272 
	#R_PPC64_PLTGOT16_LO
 53

	)

2273 
	#R_PPC64_PLTGOT16_HI
 54

	)

2274 
	#R_PPC64_PLTGOT16_HA
 55

	)

2276 
	#R_PPC64_ADDR16_DS
 56

	)

2277 
	#R_PPC64_ADDR16_LO_DS
 57

	)

2278 
	#R_PPC64_GOT16_DS
 58

	)

2279 
	#R_PPC64_GOT16_LO_DS
 59

	)

2280 
	#R_PPC64_PLT16_LO_DS
 60

	)

2281 
	#R_PPC64_SECTOFF_DS
 61

	)

2282 
	#R_PPC64_SECTOFF_LO_DS
 62

	)

2283 
	#R_PPC64_TOC16_DS
 63

	)

2284 
	#R_PPC64_TOC16_LO_DS
 64

	)

2285 
	#R_PPC64_PLTGOT16_DS
 65

	)

2286 
	#R_PPC64_PLTGOT16_LO_DS
 66

	)

2289 
	#R_PPC64_TLS
 67

	)

2290 
	#R_PPC64_DTPMOD64
 68

	)

2291 
	#R_PPC64_TPREL16
 69

	)

2292 
	#R_PPC64_TPREL16_LO
 70

	)

2293 
	#R_PPC64_TPREL16_HI
 71

	)

2294 
	#R_PPC64_TPREL16_HA
 72

	)

2295 
	#R_PPC64_TPREL64
 73

	)

2296 
	#R_PPC64_DTPREL16
 74

	)

2297 
	#R_PPC64_DTPREL16_LO
 75

	)

2298 
	#R_PPC64_DTPREL16_HI
 76

	)

2299 
	#R_PPC64_DTPREL16_HA
 77

	)

2300 
	#R_PPC64_DTPREL64
 78

	)

2301 
	#R_PPC64_GOT_TLSGD16
 79

	)

2302 
	#R_PPC64_GOT_TLSGD16_LO
 80

	)

2303 
	#R_PPC64_GOT_TLSGD16_HI
 81

	)

2304 
	#R_PPC64_GOT_TLSGD16_HA
 82

	)

2305 
	#R_PPC64_GOT_TLSLD16
 83

	)

2306 
	#R_PPC64_GOT_TLSLD16_LO
 84

	)

2307 
	#R_PPC64_GOT_TLSLD16_HI
 85

	)

2308 
	#R_PPC64_GOT_TLSLD16_HA
 86

	)

2309 
	#R_PPC64_GOT_TPREL16_DS
 87

	)

2310 
	#R_PPC64_GOT_TPREL16_LO_DS
 88

	)

2311 
	#R_PPC64_GOT_TPREL16_HI
 89

	)

2312 
	#R_PPC64_GOT_TPREL16_HA
 90

	)

2313 
	#R_PPC64_GOT_DTPREL16_DS
 91

	)

2314 
	#R_PPC64_GOT_DTPREL16_LO_DS
 92

	)

2315 
	#R_PPC64_GOT_DTPREL16_HI
 93

	)

2316 
	#R_PPC64_GOT_DTPREL16_HA
 94

	)

2317 
	#R_PPC64_TPREL16_DS
 95

	)

2318 
	#R_PPC64_TPREL16_LO_DS
 96

	)

2319 
	#R_PPC64_TPREL16_HIGHER
 97

	)

2320 
	#R_PPC64_TPREL16_HIGHERA
 98

	)

2321 
	#R_PPC64_TPREL16_HIGHEST
 99

	)

2322 
	#R_PPC64_TPREL16_HIGHESTA
 100

	)

2323 
	#R_PPC64_DTPREL16_DS
 101

	)

2324 
	#R_PPC64_DTPREL16_LO_DS
 102

	)

2325 
	#R_PPC64_DTPREL16_HIGHER
 103

	)

2326 
	#R_PPC64_DTPREL16_HIGHERA
 104

	)

2327 
	#R_PPC64_DTPREL16_HIGHEST
 105

	)

2328 
	#R_PPC64_DTPREL16_HIGHESTA
 106

	)

2329 
	#R_PPC64_TLSGD
 107

	)

2330 
	#R_PPC64_TLSLD
 108

	)

2331 
	#R_PPC64_TOCSAVE
 109

	)

2334 
	#R_PPC64_ADDR16_HIGH
 110

	)

2335 
	#R_PPC64_ADDR16_HIGHA
 111

	)

2336 
	#R_PPC64_TPREL16_HIGH
 112

	)

2337 
	#R_PPC64_TPREL16_HIGHA
 113

	)

2338 
	#R_PPC64_DTPREL16_HIGH
 114

	)

2339 
	#R_PPC64_DTPREL16_HIGHA
 115

	)

2342 
	#R_PPC64_JMP_IREL
 247

	)

2343 
	#R_PPC64_IRELATIVE
 248

	)

2344 
	#R_PPC64_REL16
 249

	)

2345 
	#R_PPC64_REL16_LO
 250

	)

2346 
	#R_PPC64_REL16_HI
 251

	)

2347 
	#R_PPC64_REL16_HA
 252

	)

2353 
	#EF_PPC64_ABI
 3

	)

2356 
	#DT_PPC64_GLINK
 (
DT_LOPROC
 + 0)

	)

2357 
	#DT_PPC64_OPD
 (
DT_LOPROC
 + 1)

	)

2358 
	#DT_PPC64_OPDSZ
 (
DT_LOPROC
 + 2)

	)

2359 
	#DT_PPC64_OPT
 (
DT_LOPROC
 + 3)

	)

2360 
	#DT_PPC64_NUM
 4

	)

2363 
	#PPC64_OPT_TLS
 1

	)

2364 
	#PPC64_OPT_MULTI_TOC
 2

	)

2367 
	#STO_PPC64_LOCAL_BIT
 5

	)

2368 
	#STO_PPC64_LOCAL_MASK
 (7 << 
STO_PPC64_LOCAL_BIT
)

	)

2369 
	#PPC64_LOCAL_ENTRY_OFFSET
(
Ÿhî
) \

2370 (((1 << (((
Ÿhî
Ë& 
STO_PPC64_LOCAL_MASK
Ë>> 
STO_PPC64_LOCAL_BIT
)Ë>> 2Ë<< 2)

	)

2376 
	#EF_ARM_RELEXEC
 0x01

	)

2377 
	#EF_ARM_HASENTRY
 0x02

	)

2378 
	#EF_ARM_INTERWORK
 0x04

	)

2379 
	#EF_ARM_APCS_26
 0x08

	)

2380 
	#EF_ARM_APCS_FLOAT
 0x10

	)

2381 
	#EF_ARM_PIC
 0x20

	)

2382 
	#EF_ARM_ALIGN8
 0x40

	)

2383 
	#EF_ARM_NEW_ABI
 0x80

	)

2384 
	#EF_ARM_OLD_ABI
 0x100

	)

2385 
	#EF_ARM_SOFT_FLOAT
 0x200

	)

2386 
	#EF_ARM_VFP_FLOAT
 0x400

	)

2387 
	#EF_ARM_MAVERICK_FLOAT
 0x800

	)

2389 
	#EF_ARM_ABI_FLOAT_SOFT
 0x200

	)

2390 
	#EF_ARM_ABI_FLOAT_HARD
 0x400

	)

2395 
	#EF_ARM_SYMSARESORTED
 0x04

	)

2396 
	#EF_ARM_DYNSYMSUSESEGIDX
 0x08

	)

2397 
	#EF_ARM_MAPSYMSFIRST
 0x10

	)

2398 
	#EF_ARM_EABIMASK
 0XFF000000

	)

2401 
	#EF_ARM_BE8
 0x00800000

	)

2402 
	#EF_ARM_LE8
 0x00400000

	)

2404 
	#EF_ARM_EABI_VERSION
(
Êags
Ë((ÊagsË& 
EF_ARM_EABIMASK
)

	)

2405 
	#EF_ARM_EABI_UNKNOWN
 0x00000000

	)

2406 
	#EF_ARM_EABI_VER1
 0x01000000

	)

2407 
	#EF_ARM_EABI_VER2
 0x02000000

	)

2408 
	#EF_ARM_EABI_VER3
 0x03000000

	)

2409 
	#EF_ARM_EABI_VER4
 0x04000000

	)

2410 
	#EF_ARM_EABI_VER5
 0x05000000

	)

2413 
	#STT_ARM_TFUNC
 
STT_LOPROC


	)

2414 
	#STT_ARM_16BIT
 
STT_HIPROC


	)

2417 
	#SHF_ARM_ENTRYSECT
 0x10000000

	)

2418 
	#SHF_ARM_COMDEF
 0x80000000

	)

2422 
	#PF_ARM_SB
 0x10000000

	)

2424 
	#PF_ARM_PI
 0x20000000

	)

2425 
	#PF_ARM_ABS
 0x40000000

	)

2428 
	#PT_ARM_EXIDX
 (
PT_LOPROC
 + 1Ë

	)

2431 
	#SHT_ARM_EXIDX
 (
SHT_LOPROC
 + 1Ë

	)

2432 
	#SHT_ARM_PREEMPTMAP
 (
SHT_LOPROC
 + 2Ë

	)

2433 
	#SHT_ARM_ATTRIBUTES
 (
SHT_LOPROC
 + 3Ë

	)

2438 
	#R_AARCH64_NONE
 0

	)

2441 
	#R_AARCH64_P32_ABS32
 1

	)

2442 
	#R_AARCH64_P32_COPY
 180

	)

2443 
	#R_AARCH64_P32_GLOB_DAT
 181

	)

2444 
	#R_AARCH64_P32_JUMP_SLOT
 182

	)

2445 
	#R_AARCH64_P32_RELATIVE
 183

	)

2446 
	#R_AARCH64_P32_TLS_DTPMOD
 184

	)

2447 
	#R_AARCH64_P32_TLS_DTPREL
 185

	)

2448 
	#R_AARCH64_P32_TLS_TPREL
 186

	)

2449 
	#R_AARCH64_P32_TLSDESC
 187

	)

2450 
	#R_AARCH64_P32_IRELATIVE
 188

	)

2453 
	#R_AARCH64_ABS64
 257

	)

2454 
	#R_AARCH64_ABS32
 258

	)

2455 
	#R_AARCH64_ABS16
 259

	)

2456 
	#R_AARCH64_PREL64
 260

	)

2457 
	#R_AARCH64_PREL32
 261

	)

2458 
	#R_AARCH64_PREL16
 262

	)

2459 
	#R_AARCH64_MOVW_UABS_G0
 263

	)

2460 
	#R_AARCH64_MOVW_UABS_G0_NC
 264

	)

2461 
	#R_AARCH64_MOVW_UABS_G1
 265

	)

2462 
	#R_AARCH64_MOVW_UABS_G1_NC
 266

	)

2463 
	#R_AARCH64_MOVW_UABS_G2
 267

	)

2464 
	#R_AARCH64_MOVW_UABS_G2_NC
 268

	)

2465 
	#R_AARCH64_MOVW_UABS_G3
 269

	)

2466 
	#R_AARCH64_MOVW_SABS_G0
 270

	)

2467 
	#R_AARCH64_MOVW_SABS_G1
 271

	)

2468 
	#R_AARCH64_MOVW_SABS_G2
 272

	)

2469 
	#R_AARCH64_LD_PREL_LO19
 273

	)

2470 
	#R_AARCH64_ADR_PREL_LO21
 274

	)

2471 
	#R_AARCH64_ADR_PREL_PG_HI21
 275

	)

2472 
	#R_AARCH64_ADR_PREL_PG_HI21_NC
 276

	)

2473 
	#R_AARCH64_ADD_ABS_LO12_NC
 277

	)

2474 
	#R_AARCH64_LDST8_ABS_LO12_NC
 278

	)

2475 
	#R_AARCH64_TSTBR14
 279

	)

2476 
	#R_AARCH64_CONDBR19
 280

	)

2477 
	#R_AARCH64_JUMP26
 282

	)

2478 
	#R_AARCH64_CALL26
 283

	)

2479 
	#R_AARCH64_LDST16_ABS_LO12_NC
 284

	)

2480 
	#R_AARCH64_LDST32_ABS_LO12_NC
 285

	)

2481 
	#R_AARCH64_LDST64_ABS_LO12_NC
 286

	)

2482 
	#R_AARCH64_MOVW_PREL_G0
 287

	)

2483 
	#R_AARCH64_MOVW_PREL_G0_NC
 288

	)

2484 
	#R_AARCH64_MOVW_PREL_G1
 289

	)

2485 
	#R_AARCH64_MOVW_PREL_G1_NC
 290

	)

2486 
	#R_AARCH64_MOVW_PREL_G2
 291

	)

2487 
	#R_AARCH64_MOVW_PREL_G2_NC
 292

	)

2488 
	#R_AARCH64_MOVW_PREL_G3
 293

	)

2489 
	#R_AARCH64_LDST128_ABS_LO12_NC
 299

	)

2490 
	#R_AARCH64_MOVW_GOTOFF_G0
 300

	)

2491 
	#R_AARCH64_MOVW_GOTOFF_G0_NC
 301

	)

2492 
	#R_AARCH64_MOVW_GOTOFF_G1
 302

	)

2493 
	#R_AARCH64_MOVW_GOTOFF_G1_NC
 303

	)

2494 
	#R_AARCH64_MOVW_GOTOFF_G2
 304

	)

2495 
	#R_AARCH64_MOVW_GOTOFF_G2_NC
 305

	)

2496 
	#R_AARCH64_MOVW_GOTOFF_G3
 306

	)

2497 
	#R_AARCH64_GOTREL64
 307

	)

2498 
	#R_AARCH64_GOTREL32
 308

	)

2499 
	#R_AARCH64_GOT_LD_PREL19
 309

	)

2500 
	#R_AARCH64_LD64_GOTOFF_LO15
 310

	)

2501 
	#R_AARCH64_ADR_GOT_PAGE
 311

	)

2502 
	#R_AARCH64_LD64_GOT_LO12_NC
 312

	)

2503 
	#R_AARCH64_LD64_GOTPAGE_LO15
 313

	)

2504 
	#R_AARCH64_TLSGD_ADR_PREL21
 512

	)

2505 
	#R_AARCH64_TLSGD_ADR_PAGE21
 513

	)

2506 
	#R_AARCH64_TLSGD_ADD_LO12_NC
 514

	)

2507 
	#R_AARCH64_TLSGD_MOVW_G1
 515

	)

2508 
	#R_AARCH64_TLSGD_MOVW_G0_NC
 516

	)

2509 
	#R_AARCH64_TLSLD_ADR_PREL21
 517

	)

2510 
	#R_AARCH64_TLSLD_ADR_PAGE21
 518

	)

2511 
	#R_AARCH64_TLSLD_ADD_LO12_NC
 519

	)

2512 
	#R_AARCH64_TLSLD_MOVW_G1
 520

	)

2513 
	#R_AARCH64_TLSLD_MOVW_G0_NC
 521

	)

2514 
	#R_AARCH64_TLSLD_LD_PREL19
 522

	)

2515 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G2
 523

	)

2516 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G1
 524

	)

2517 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G1_NC
 525

	)

2518 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G0
 526

	)

2519 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G0_NC
 527

	)

2520 
	#R_AARCH64_TLSLD_ADD_DTPREL_HI12
 528

	)

2521 
	#R_AARCH64_TLSLD_ADD_DTPREL_LO12
 529

	)

2522 
	#R_AARCH64_TLSLD_ADD_DTPREL_LO12_NC
 530

	)

2523 
	#R_AARCH64_TLSLD_LDST8_DTPREL_LO12
 531

	)

2524 
	#R_AARCH64_TLSLD_LDST8_DTPREL_LO12_NC
 532

	)

2525 
	#R_AARCH64_TLSLD_LDST16_DTPREL_LO12
 533

	)

2526 
	#R_AARCH64_TLSLD_LDST16_DTPREL_LO12_NC
 534

	)

2527 
	#R_AARCH64_TLSLD_LDST32_DTPREL_LO12
 535

	)

2528 
	#R_AARCH64_TLSLD_LDST32_DTPREL_LO12_NC
 536

	)

2529 
	#R_AARCH64_TLSLD_LDST64_DTPREL_LO12
 537

	)

2530 
	#R_AARCH64_TLSLD_LDST64_DTPREL_LO12_NC
 538

	)

2531 
	#R_AARCH64_TLSIE_MOVW_GOTTPREL_G1
 539

	)

2532 
	#R_AARCH64_TLSIE_MOVW_GOTTPREL_G0_NC
 540

	)

2533 
	#R_AARCH64_TLSIE_ADR_GOTTPREL_PAGE21
 541

	)

2534 
	#R_AARCH64_TLSIE_LD64_GOTTPREL_LO12_NC
 542

	)

2535 
	#R_AARCH64_TLSIE_LD_GOTTPREL_PREL19
 543

	)

2536 
	#R_AARCH64_TLSLE_MOVW_TPREL_G2
 544

	)

2537 
	#R_AARCH64_TLSLE_MOVW_TPREL_G1
 545

	)

2538 
	#R_AARCH64_TLSLE_MOVW_TPREL_G1_NC
 546

	)

2539 
	#R_AARCH64_TLSLE_MOVW_TPREL_G0
 547

	)

2540 
	#R_AARCH64_TLSLE_MOVW_TPREL_G0_NC
 548

	)

2541 
	#R_AARCH64_TLSLE_ADD_TPREL_HI12
 549

	)

2542 
	#R_AARCH64_TLSLE_ADD_TPREL_LO12
 550

	)

2543 
	#R_AARCH64_TLSLE_ADD_TPREL_LO12_NC
 551

	)

2544 
	#R_AARCH64_TLSLE_LDST8_TPREL_LO12
 552

	)

2545 
	#R_AARCH64_TLSLE_LDST8_TPREL_LO12_NC
 553

	)

2546 
	#R_AARCH64_TLSLE_LDST16_TPREL_LO12
 554

	)

2547 
	#R_AARCH64_TLSLE_LDST16_TPREL_LO12_NC
 555

	)

2548 
	#R_AARCH64_TLSLE_LDST32_TPREL_LO12
 556

	)

2549 
	#R_AARCH64_TLSLE_LDST32_TPREL_LO12_NC
 557

	)

2550 
	#R_AARCH64_TLSLE_LDST64_TPREL_LO12
 558

	)

2551 
	#R_AARCH64_TLSLE_LDST64_TPREL_LO12_NC
 559

	)

2552 
	#R_AARCH64_TLSDESC_LD_PREL19
 560

	)

2553 
	#R_AARCH64_TLSDESC_ADR_PREL21
 561

	)

2554 
	#R_AARCH64_TLSDESC_ADR_PAGE21
 562

	)

2555 
	#R_AARCH64_TLSDESC_LD64_LO12
 563

	)

2556 
	#R_AARCH64_TLSDESC_ADD_LO12
 564

	)

2557 
	#R_AARCH64_TLSDESC_OFF_G1
 565

	)

2558 
	#R_AARCH64_TLSDESC_OFF_G0_NC
 566

	)

2559 
	#R_AARCH64_TLSDESC_LDR
 567

	)

2560 
	#R_AARCH64_TLSDESC_ADD
 568

	)

2561 
	#R_AARCH64_TLSDESC_CALL
 569

	)

2562 
	#R_AARCH64_TLSLE_LDST128_TPREL_LO12
 570

	)

2563 
	#R_AARCH64_TLSLE_LDST128_TPREL_LO12_NC
 571

	)

2564 
	#R_AARCH64_TLSLD_LDST128_DTPREL_LO12
 572

	)

2565 
	#R_AARCH64_TLSLD_LDST128_DTPREL_LO12_NC
 573

	)

2566 
	#R_AARCH64_COPY
 1024

	)

2567 
	#R_AARCH64_GLOB_DAT
 1025

	)

2568 
	#R_AARCH64_JUMP_SLOT
 1026

	)

2569 
	#R_AARCH64_RELATIVE
 1027

	)

2570 
	#R_AARCH64_TLS_DTPMOD
 1028

	)

2571 
	#R_AARCH64_TLS_DTPREL
 1029

	)

2572 
	#R_AARCH64_TLS_TPREL
 1030

	)

2573 
	#R_AARCH64_TLSDESC
 1031

	)

2574 
	#R_AARCH64_IRELATIVE
 1032

	)

2578 
	#R_ARM_NONE
 0

	)

2579 
	#R_ARM_PC24
 1

	)

2581 
	#R_ARM_ABS32
 2

	)

2582 
	#R_ARM_REL32
 3

	)

2583 
	#R_ARM_PC13
 4

	)

2584 
	#R_ARM_ABS16
 5

	)

2585 
	#R_ARM_ABS12
 6

	)

2586 
	#R_ARM_THM_ABS5
 7

	)

2587 
	#R_ARM_ABS8
 8

	)

2588 
	#R_ARM_SBREL32
 9

	)

2589 
	#R_ARM_THM_PC22
 10

	)

2590 
	#R_ARM_THM_PC8
 11

	)

2592 
	#R_ARM_AMP_VCALL9
 12

	)

2593 
	#R_ARM_SWI24
 13

	)

2594 
	#R_ARM_TLS_DESC
 13

	)

2595 
	#R_ARM_THM_SWI8
 14

	)

2596 
	#R_ARM_XPC25
 15

	)

2597 
	#R_ARM_THM_XPC22
 16

	)

2598 
	#R_ARM_TLS_DTPMOD32
 17

	)

2599 
	#R_ARM_TLS_DTPOFF32
 18

	)

2600 
	#R_ARM_TLS_TPOFF32
 19

	)

2601 
	#R_ARM_COPY
 20

	)

2602 
	#R_ARM_GLOB_DAT
 21

	)

2603 
	#R_ARM_JUMP_SLOT
 22

	)

2604 
	#R_ARM_RELATIVE
 23

	)

2605 
	#R_ARM_GOTOFF
 24

	)

2606 
	#R_ARM_GOTPC
 25

	)

2607 
	#R_ARM_GOT32
 26

	)

2608 
	#R_ARM_PLT32
 27

	)

2609 
	#R_ARM_CALL
 28

	)

2610 
	#R_ARM_JUMP24
 29

	)

2612 
	#R_ARM_THM_JUMP24
 30

	)

2613 
	#R_ARM_BASE_ABS
 31

	)

2614 
	#R_ARM_ALU_PCREL_7_0
 32

	)

2615 
	#R_ARM_ALU_PCREL_15_8
 33

	)

2616 
	#R_ARM_ALU_PCREL_23_15
 34

	)

2617 
	#R_ARM_LDR_SBREL_11_0
 35

	)

2618 
	#R_ARM_ALU_SBREL_19_12
 36

	)

2619 
	#R_ARM_ALU_SBREL_27_20
 37

	)

2620 
	#R_ARM_TARGET1
 38

	)

2621 
	#R_ARM_SBREL31
 39

	)

2622 
	#R_ARM_V4BX
 40

	)

2623 
	#R_ARM_TARGET2
 41

	)

2624 
	#R_ARM_PREL31
 42

	)

2625 
	#R_ARM_MOVW_ABS_NC
 43

	)

2626 
	#R_ARM_MOVT_ABS
 44

	)

2627 
	#R_ARM_MOVW_PREL_NC
 45

	)

2628 
	#R_ARM_MOVT_PREL
 46

	)

2629 
	#R_ARM_THM_MOVW_ABS_NC
 47

	)

2630 
	#R_ARM_THM_MOVT_ABS
 48

	)

2632 
	#R_ARM_THM_MOVW_PREL_NC
 49

	)

2634 
	#R_ARM_THM_MOVT_PREL
 50

	)

2636 
	#R_ARM_THM_JUMP19
 51

	)

2638 
	#R_ARM_THM_JUMP6
 52

	)

2640 
	#R_ARM_THM_ALU_PREL_11_0
 53

	)

2642 
	#R_ARM_THM_PC12
 54

	)

2644 
	#R_ARM_ABS32_NOI
 55

	)

2645 
	#R_ARM_REL32_NOI
 56

	)

2646 
	#R_ARM_ALU_PC_G0_NC
 57

	)

2647 
	#R_ARM_ALU_PC_G0
 58

	)

2648 
	#R_ARM_ALU_PC_G1_NC
 59

	)

2649 
	#R_ARM_ALU_PC_G1
 60

	)

2650 
	#R_ARM_ALU_PC_G2
 61

	)

2651 
	#R_ARM_LDR_PC_G1
 62

	)

2652 
	#R_ARM_LDR_PC_G2
 63

	)

2653 
	#R_ARM_LDRS_PC_G0
 64

	)

2655 
	#R_ARM_LDRS_PC_G1
 65

	)

2657 
	#R_ARM_LDRS_PC_G2
 66

	)

2659 
	#R_ARM_LDC_PC_G0
 67

	)

2660 
	#R_ARM_LDC_PC_G1
 68

	)

2661 
	#R_ARM_LDC_PC_G2
 69

	)

2662 
	#R_ARM_ALU_SB_G0_NC
 70

	)

2663 
	#R_ARM_ALU_SB_G0
 71

	)

2664 
	#R_ARM_ALU_SB_G1_NC
 72

	)

2665 
	#R_ARM_ALU_SB_G1
 73

	)

2666 
	#R_ARM_ALU_SB_G2
 74

	)

2667 
	#R_ARM_LDR_SB_G0
 75

	)

2669 
	#R_ARM_LDR_SB_G1
 76

	)

2671 
	#R_ARM_LDR_SB_G2
 77

	)

2673 
	#R_ARM_LDRS_SB_G0
 78

	)

2675 
	#R_ARM_LDRS_SB_G1
 79

	)

2677 
	#R_ARM_LDRS_SB_G2
 80

	)

2679 
	#R_ARM_LDC_SB_G0
 81

	)

2680 
	#R_ARM_LDC_SB_G1
 82

	)

2681 
	#R_ARM_LDC_SB_G2
 83

	)

2682 
	#R_ARM_MOVW_BREL_NC
 84

	)

2684 
	#R_ARM_MOVT_BREL
 85

	)

2686 
	#R_ARM_MOVW_BREL
 86

	)

2688 
	#R_ARM_THM_MOVW_BREL_NC
 87

	)

2690 
	#R_ARM_THM_MOVT_BREL
 88

	)

2692 
	#R_ARM_THM_MOVW_BREL
 89

	)

2694 
	#R_ARM_TLS_GOTDESC
 90

	)

2695 
	#R_ARM_TLS_CALL
 91

	)

2696 
	#R_ARM_TLS_DESCSEQ
 92

	)

2697 
	#R_ARM_THM_TLS_CALL
 93

	)

2698 
	#R_ARM_PLT32_ABS
 94

	)

2699 
	#R_ARM_GOT_ABS
 95

	)

2700 
	#R_ARM_GOT_PREL
 96

	)

2701 
	#R_ARM_GOT_BREL12
 97

	)

2703 
	#R_ARM_GOTOFF12
 98

	)

2705 
	#R_ARM_GOTRELAX
 99

	)

2706 
	#R_ARM_GNU_VTENTRY
 100

	)

2707 
	#R_ARM_GNU_VTINHERIT
 101

	)

2708 
	#R_ARM_THM_PC11
 102

	)

2709 
	#R_ARM_THM_PC9
 103

	)

2711 
	#R_ARM_TLS_GD32
 104

	)

2713 
	#R_ARM_TLS_LDM32
 105

	)

2715 
	#R_ARM_TLS_LDO32
 106

	)

2717 
	#R_ARM_TLS_IE32
 107

	)

2719 
	#R_ARM_TLS_LE32
 108

	)

2721 
	#R_ARM_TLS_LDO12
 109

	)

2723 
	#R_ARM_TLS_LE12
 110

	)

2725 
	#R_ARM_TLS_IE12GP
 111

	)

2727 
	#R_ARM_ME_TOO
 128

	)

2728 
	#R_ARM_THM_TLS_DESCSEQ
 129

	)

2729 
	#R_ARM_THM_TLS_DESCSEQ16
 129

	)

2730 
	#R_ARM_THM_TLS_DESCSEQ32
 130

	)

2731 
	#R_ARM_THM_GOT_BREL12
 131

	)

2733 
	#R_ARM_IRELATIVE
 160

	)

2734 
	#R_ARM_RXPC25
 249

	)

2735 
	#R_ARM_RSBREL32
 250

	)

2736 
	#R_ARM_THM_RPC22
 251

	)

2737 
	#R_ARM_RREL32
 252

	)

2738 
	#R_ARM_RABS22
 253

	)

2739 
	#R_ARM_RPC24
 254

	)

2740 
	#R_ARM_RBASE
 255

	)

2742 
	#R_ARM_NUM
 256

	)

2747 
	#EF_IA_64_MASKOS
 0x0000000‡

	)

2748 
	#EF_IA_64_ABI64
 0x00000010

	)

2749 
	#EF_IA_64_ARCH
 0xff000000

	)

2752 
	#PT_IA_64_ARCHEXT
 (
PT_LOPROC
 + 0Ë

	)

2753 
	#PT_IA_64_UNWIND
 (
PT_LOPROC
 + 1Ë

	)

2754 
	#PT_IA_64_HP_OPT_ANOT
 (
PT_LOOS
 + 0x12)

	)

2755 
	#PT_IA_64_HP_HSL_ANOT
 (
PT_LOOS
 + 0x13)

	)

2756 
	#PT_IA_64_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

2759 
	#PF_IA_64_NORECOV
 0x80000000

	)

2762 
	#SHT_IA_64_EXT
 (
SHT_LOPROC
 + 0Ë

	)

2763 
	#SHT_IA_64_UNWIND
 (
SHT_LOPROC
 + 1Ë

	)

2766 
	#SHF_IA_64_SHORT
 0x10000000

	)

2767 
	#SHF_IA_64_NORECOV
 0x20000000

	)

2770 
	#DT_IA_64_PLT_RESERVE
 (
DT_LOPROC
 + 0)

	)

2771 
	#DT_IA_64_NUM
 1

	)

2774 
	#R_IA64_NONE
 0x00

	)

2775 
	#R_IA64_IMM14
 0x21

	)

2776 
	#R_IA64_IMM22
 0x22

	)

2777 
	#R_IA64_IMM64
 0x23

	)

2778 
	#R_IA64_DIR32MSB
 0x24

	)

2779 
	#R_IA64_DIR32LSB
 0x25

	)

2780 
	#R_IA64_DIR64MSB
 0x26

	)

2781 
	#R_IA64_DIR64LSB
 0x27

	)

2782 
	#R_IA64_GPREL22
 0x2®

	)

2783 
	#R_IA64_GPREL64I
 0x2b

	)

2784 
	#R_IA64_GPREL32MSB
 0x2¯

	)

2785 
	#R_IA64_GPREL32LSB
 0x2d

	)

2786 
	#R_IA64_GPREL64MSB
 0x2ê

	)

2787 
	#R_IA64_GPREL64LSB
 0x2‡

	)

2788 
	#R_IA64_LTOFF22
 0x32

	)

2789 
	#R_IA64_LTOFF64I
 0x33

	)

2790 
	#R_IA64_PLTOFF22
 0x3®

	)

2791 
	#R_IA64_PLTOFF64I
 0x3b

	)

2792 
	#R_IA64_PLTOFF64MSB
 0x3ê

	)

2793 
	#R_IA64_PLTOFF64LSB
 0x3‡

	)

2794 
	#R_IA64_FPTR64I
 0x43

	)

2795 
	#R_IA64_FPTR32MSB
 0x44

	)

2796 
	#R_IA64_FPTR32LSB
 0x45

	)

2797 
	#R_IA64_FPTR64MSB
 0x46

	)

2798 
	#R_IA64_FPTR64LSB
 0x47

	)

2799 
	#R_IA64_PCREL60B
 0x48

	)

2800 
	#R_IA64_PCREL21B
 0x49

	)

2801 
	#R_IA64_PCREL21M
 0x4®

	)

2802 
	#R_IA64_PCREL21F
 0x4b

	)

2803 
	#R_IA64_PCREL32MSB
 0x4¯

	)

2804 
	#R_IA64_PCREL32LSB
 0x4d

	)

2805 
	#R_IA64_PCREL64MSB
 0x4ê

	)

2806 
	#R_IA64_PCREL64LSB
 0x4‡

	)

2807 
	#R_IA64_LTOFF_FPTR22
 0x52

	)

2808 
	#R_IA64_LTOFF_FPTR64I
 0x53

	)

2809 
	#R_IA64_LTOFF_FPTR32MSB
 0x54

	)

2810 
	#R_IA64_LTOFF_FPTR32LSB
 0x55

	)

2811 
	#R_IA64_LTOFF_FPTR64MSB
 0x56

	)

2812 
	#R_IA64_LTOFF_FPTR64LSB
 0x57

	)

2813 
	#R_IA64_SEGREL32MSB
 0x5¯

	)

2814 
	#R_IA64_SEGREL32LSB
 0x5d

	)

2815 
	#R_IA64_SEGREL64MSB
 0x5ê

	)

2816 
	#R_IA64_SEGREL64LSB
 0x5‡

	)

2817 
	#R_IA64_SECREL32MSB
 0x64

	)

2818 
	#R_IA64_SECREL32LSB
 0x65

	)

2819 
	#R_IA64_SECREL64MSB
 0x66

	)

2820 
	#R_IA64_SECREL64LSB
 0x67

	)

2821 
	#R_IA64_REL32MSB
 0x6¯

	)

2822 
	#R_IA64_REL32LSB
 0x6d

	)

2823 
	#R_IA64_REL64MSB
 0x6ê

	)

2824 
	#R_IA64_REL64LSB
 0x6‡

	)

2825 
	#R_IA64_LTV32MSB
 0x74

	)

2826 
	#R_IA64_LTV32LSB
 0x75

	)

2827 
	#R_IA64_LTV64MSB
 0x76

	)

2828 
	#R_IA64_LTV64LSB
 0x77

	)

2829 
	#R_IA64_PCREL21BI
 0x79

	)

2830 
	#R_IA64_PCREL22
 0x7®

	)

2831 
	#R_IA64_PCREL64I
 0x7b

	)

2832 
	#R_IA64_IPLTMSB
 0x80

	)

2833 
	#R_IA64_IPLTLSB
 0x81

	)

2834 
	#R_IA64_COPY
 0x84

	)

2835 
	#R_IA64_SUB
 0x85

	)

2836 
	#R_IA64_LTOFF22X
 0x86

	)

2837 
	#R_IA64_LDXMOV
 0x87

	)

2838 
	#R_IA64_TPREL14
 0x91

	)

2839 
	#R_IA64_TPREL22
 0x92

	)

2840 
	#R_IA64_TPREL64I
 0x93

	)

2841 
	#R_IA64_TPREL64MSB
 0x96

	)

2842 
	#R_IA64_TPREL64LSB
 0x97

	)

2843 
	#R_IA64_LTOFF_TPREL22
 0x9®

	)

2844 
	#R_IA64_DTPMOD64MSB
 0xa6

	)

2845 
	#R_IA64_DTPMOD64LSB
 0xa7

	)

2846 
	#R_IA64_LTOFF_DTPMOD22
 0xØ

	)

2847 
	#R_IA64_DTPREL14
 0xb1

	)

2848 
	#R_IA64_DTPREL22
 0xb2

	)

2849 
	#R_IA64_DTPREL64I
 0xb3

	)

2850 
	#R_IA64_DTPREL32MSB
 0xb4

	)

2851 
	#R_IA64_DTPREL32LSB
 0xb5

	)

2852 
	#R_IA64_DTPREL64MSB
 0xb6

	)

2853 
	#R_IA64_DTPREL64LSB
 0xb7

	)

2854 
	#R_IA64_LTOFF_DTPREL22
 0xb®

	)

2859 
	#EF_SH_MACH_MASK
 0x1f

	)

2860 
	#EF_SH_UNKNOWN
 0x0

	)

2861 
	#EF_SH1
 0x1

	)

2862 
	#EF_SH2
 0x2

	)

2863 
	#EF_SH3
 0x3

	)

2864 
	#EF_SH_DSP
 0x4

	)

2865 
	#EF_SH3_DSP
 0x5

	)

2866 
	#EF_SH4AL_DSP
 0x6

	)

2867 
	#EF_SH3E
 0x8

	)

2868 
	#EF_SH4
 0x9

	)

2869 
	#EF_SH2E
 0xb

	)

2870 
	#EF_SH4A
 0xc

	)

2871 
	#EF_SH2A
 0xd

	)

2872 
	#EF_SH4_NOFPU
 0x10

	)

2873 
	#EF_SH4A_NOFPU
 0x11

	)

2874 
	#EF_SH4_NOMMU_NOFPU
 0x12

	)

2875 
	#EF_SH2A_NOFPU
 0x13

	)

2876 
	#EF_SH3_NOMMU
 0x14

	)

2877 
	#EF_SH2A_SH4_NOFPU
 0x15

	)

2878 
	#EF_SH2A_SH3_NOFPU
 0x16

	)

2879 
	#EF_SH2A_SH4
 0x17

	)

2880 
	#EF_SH2A_SH3E
 0x18

	)

2883 
	#R_SH_NONE
 0

	)

2884 
	#R_SH_DIR32
 1

	)

2885 
	#R_SH_REL32
 2

	)

2886 
	#R_SH_DIR8WPN
 3

	)

2887 
	#R_SH_IND12W
 4

	)

2888 
	#R_SH_DIR8WPL
 5

	)

2889 
	#R_SH_DIR8WPZ
 6

	)

2890 
	#R_SH_DIR8BP
 7

	)

2891 
	#R_SH_DIR8W
 8

	)

2892 
	#R_SH_DIR8L
 9

	)

2893 
	#R_SH_SWITCH16
 25

	)

2894 
	#R_SH_SWITCH32
 26

	)

2895 
	#R_SH_USES
 27

	)

2896 
	#R_SH_COUNT
 28

	)

2897 
	#R_SH_ALIGN
 29

	)

2898 
	#R_SH_CODE
 30

	)

2899 
	#R_SH_DATA
 31

	)

2900 
	#R_SH_LABEL
 32

	)

2901 
	#R_SH_SWITCH8
 33

	)

2902 
	#R_SH_GNU_VTINHERIT
 34

	)

2903 
	#R_SH_GNU_VTENTRY
 35

	)

2904 
	#R_SH_TLS_GD_32
 144

	)

2905 
	#R_SH_TLS_LD_32
 145

	)

2906 
	#R_SH_TLS_LDO_32
 146

	)

2907 
	#R_SH_TLS_IE_32
 147

	)

2908 
	#R_SH_TLS_LE_32
 148

	)

2909 
	#R_SH_TLS_DTPMOD32
 149

	)

2910 
	#R_SH_TLS_DTPOFF32
 150

	)

2911 
	#R_SH_TLS_TPOFF32
 151

	)

2912 
	#R_SH_GOT32
 160

	)

2913 
	#R_SH_PLT32
 161

	)

2914 
	#R_SH_COPY
 162

	)

2915 
	#R_SH_GLOB_DAT
 163

	)

2916 
	#R_SH_JMP_SLOT
 164

	)

2917 
	#R_SH_RELATIVE
 165

	)

2918 
	#R_SH_GOTOFF
 166

	)

2919 
	#R_SH_GOTPC
 167

	)

2921 
	#R_SH_NUM
 256

	)

2927 
	#EF_S390_HIGH_GPRS
 0x00000001

	)

2931 
	#R_390_NONE
 0

	)

2932 
	#R_390_8
 1

	)

2933 
	#R_390_12
 2

	)

2934 
	#R_390_16
 3

	)

2935 
	#R_390_32
 4

	)

2936 
	#R_390_PC32
 5

	)

2937 
	#R_390_GOT12
 6

	)

2938 
	#R_390_GOT32
 7

	)

2939 
	#R_390_PLT32
 8

	)

2940 
	#R_390_COPY
 9

	)

2941 
	#R_390_GLOB_DAT
 10

	)

2942 
	#R_390_JMP_SLOT
 11

	)

2943 
	#R_390_RELATIVE
 12

	)

2944 
	#R_390_GOTOFF32
 13

	)

2945 
	#R_390_GOTPC
 14

	)

2946 
	#R_390_GOT16
 15

	)

2947 
	#R_390_PC16
 16

	)

2948 
	#R_390_PC16DBL
 17

	)

2949 
	#R_390_PLT16DBL
 18

	)

2950 
	#R_390_PC32DBL
 19

	)

2951 
	#R_390_PLT32DBL
 20

	)

2952 
	#R_390_GOTPCDBL
 21

	)

2953 
	#R_390_64
 22

	)

2954 
	#R_390_PC64
 23

	)

2955 
	#R_390_GOT64
 24

	)

2956 
	#R_390_PLT64
 25

	)

2957 
	#R_390_GOTENT
 26

	)

2958 
	#R_390_GOTOFF16
 27

	)

2959 
	#R_390_GOTOFF64
 28

	)

2960 
	#R_390_GOTPLT12
 29

	)

2961 
	#R_390_GOTPLT16
 30

	)

2962 
	#R_390_GOTPLT32
 31

	)

2963 
	#R_390_GOTPLT64
 32

	)

2964 
	#R_390_GOTPLTENT
 33

	)

2965 
	#R_390_PLTOFF16
 34

	)

2966 
	#R_390_PLTOFF32
 35

	)

2967 
	#R_390_PLTOFF64
 36

	)

2968 
	#R_390_TLS_LOAD
 37

	)

2969 
	#R_390_TLS_GDCALL
 38

	)

2971 
	#R_390_TLS_LDCALL
 39

	)

2973 
	#R_390_TLS_GD32
 40

	)

2975 
	#R_390_TLS_GD64
 41

	)

2977 
	#R_390_TLS_GOTIE12
 42

	)

2979 
	#R_390_TLS_GOTIE32
 43

	)

2981 
	#R_390_TLS_GOTIE64
 44

	)

2983 
	#R_390_TLS_LDM32
 45

	)

2985 
	#R_390_TLS_LDM64
 46

	)

2987 
	#R_390_TLS_IE32
 47

	)

2989 
	#R_390_TLS_IE64
 48

	)

2991 
	#R_390_TLS_IEENT
 49

	)

2993 
	#R_390_TLS_LE32
 50

	)

2995 
	#R_390_TLS_LE64
 51

	)

2997 
	#R_390_TLS_LDO32
 52

	)

2999 
	#R_390_TLS_LDO64
 53

	)

3001 
	#R_390_TLS_DTPMOD
 54

	)

3002 
	#R_390_TLS_DTPOFF
 55

	)

3003 
	#R_390_TLS_TPOFF
 56

	)

3005 
	#R_390_20
 57

	)

3006 
	#R_390_GOT20
 58

	)

3007 
	#R_390_GOTPLT20
 59

	)

3008 
	#R_390_TLS_GOTIE20
 60

	)

3010 
	#R_390_IRELATIVE
 61

	)

3012 
	#R_390_NUM
 62

	)

3016 
	#R_CRIS_NONE
 0

	)

3017 
	#R_CRIS_8
 1

	)

3018 
	#R_CRIS_16
 2

	)

3019 
	#R_CRIS_32
 3

	)

3020 
	#R_CRIS_8_PCREL
 4

	)

3021 
	#R_CRIS_16_PCREL
 5

	)

3022 
	#R_CRIS_32_PCREL
 6

	)

3023 
	#R_CRIS_GNU_VTINHERIT
 7

	)

3024 
	#R_CRIS_GNU_VTENTRY
 8

	)

3025 
	#R_CRIS_COPY
 9

	)

3026 
	#R_CRIS_GLOB_DAT
 10

	)

3027 
	#R_CRIS_JUMP_SLOT
 11

	)

3028 
	#R_CRIS_RELATIVE
 12

	)

3029 
	#R_CRIS_16_GOT
 13

	)

3030 
	#R_CRIS_32_GOT
 14

	)

3031 
	#R_CRIS_16_GOTPLT
 15

	)

3032 
	#R_CRIS_32_GOTPLT
 16

	)

3033 
	#R_CRIS_32_GOTREL
 17

	)

3034 
	#R_CRIS_32_PLT_GOTREL
 18

	)

3035 
	#R_CRIS_32_PLT_PCREL
 19

	)

3037 
	#R_CRIS_NUM
 20

	)

3041 
	#R_X86_64_NONE
 0

	)

3042 
	#R_X86_64_64
 1

	)

3043 
	#R_X86_64_PC32
 2

	)

3044 
	#R_X86_64_GOT32
 3

	)

3045 
	#R_X86_64_PLT32
 4

	)

3046 
	#R_X86_64_COPY
 5

	)

3047 
	#R_X86_64_GLOB_DAT
 6

	)

3048 
	#R_X86_64_JUMP_SLOT
 7

	)

3049 
	#R_X86_64_RELATIVE
 8

	)

3050 
	#R_X86_64_GOTPCREL
 9

	)

3052 
	#R_X86_64_32
 10

	)

3053 
	#R_X86_64_32S
 11

	)

3054 
	#R_X86_64_16
 12

	)

3055 
	#R_X86_64_PC16
 13

	)

3056 
	#R_X86_64_8
 14

	)

3057 
	#R_X86_64_PC8
 15

	)

3058 
	#R_X86_64_DTPMOD64
 16

	)

3059 
	#R_X86_64_DTPOFF64
 17

	)

3060 
	#R_X86_64_TPOFF64
 18

	)

3061 
	#R_X86_64_TLSGD
 19

	)

3063 
	#R_X86_64_TLSLD
 20

	)

3065 
	#R_X86_64_DTPOFF32
 21

	)

3066 
	#R_X86_64_GOTTPOFF
 22

	)

3068 
	#R_X86_64_TPOFF32
 23

	)

3069 
	#R_X86_64_PC64
 24

	)

3070 
	#R_X86_64_GOTOFF64
 25

	)

3071 
	#R_X86_64_GOTPC32
 26

	)

3073 
	#R_X86_64_GOT64
 27

	)

3074 
	#R_X86_64_GOTPCREL64
 28

	)

3076 
	#R_X86_64_GOTPC64
 29

	)

3077 
	#R_X86_64_GOTPLT64
 30

	)

3078 
	#R_X86_64_PLTOFF64
 31

	)

3080 
	#R_X86_64_SIZE32
 32

	)

3081 
	#R_X86_64_SIZE64
 33

	)

3082 
	#R_X86_64_GOTPC32_TLSDESC
 34

	)

3083 
	#R_X86_64_TLSDESC_CALL
 35

	)

3085 
	#R_X86_64_TLSDESC
 36

	)

3086 
	#R_X86_64_IRELATIVE
 37

	)

3087 
	#R_X86_64_RELATIVE64
 38

	)

3089 
	#R_X86_64_NUM
 39

	)

3093 
	#R_MN10300_NONE
 0

	)

3094 
	#R_MN10300_32
 1

	)

3095 
	#R_MN10300_16
 2

	)

3096 
	#R_MN10300_8
 3

	)

3097 
	#R_MN10300_PCREL32
 4

	)

3098 
	#R_MN10300_PCREL16
 5

	)

3099 
	#R_MN10300_PCREL8
 6

	)

3100 
	#R_MN10300_GNU_VTINHERIT
 7

	)

3101 
	#R_MN10300_GNU_VTENTRY
 8

	)

3102 
	#R_MN10300_24
 9

	)

3103 
	#R_MN10300_GOTPC32
 10

	)

3104 
	#R_MN10300_GOTPC16
 11

	)

3105 
	#R_MN10300_GOTOFF32
 12

	)

3106 
	#R_MN10300_GOTOFF24
 13

	)

3107 
	#R_MN10300_GOTOFF16
 14

	)

3108 
	#R_MN10300_PLT32
 15

	)

3109 
	#R_MN10300_PLT16
 16

	)

3110 
	#R_MN10300_GOT32
 17

	)

3111 
	#R_MN10300_GOT24
 18

	)

3112 
	#R_MN10300_GOT16
 19

	)

3113 
	#R_MN10300_COPY
 20

	)

3114 
	#R_MN10300_GLOB_DAT
 21

	)

3115 
	#R_MN10300_JMP_SLOT
 22

	)

3116 
	#R_MN10300_RELATIVE
 23

	)

3117 
	#R_MN10300_TLS_GD
 24

	)

3118 
	#R_MN10300_TLS_LD
 25

	)

3119 
	#R_MN10300_TLS_LDO
 26

	)

3120 
	#R_MN10300_TLS_GOTIE
 27

	)

3122 
	#R_MN10300_TLS_IE
 28

	)

3124 
	#R_MN10300_TLS_LE
 29

	)

3126 
	#R_MN10300_TLS_DTPMOD
 30

	)

3127 
	#R_MN10300_TLS_DTPOFF
 31

	)

3128 
	#R_MN10300_TLS_TPOFF
 32

	)

3129 
	#R_MN10300_SYM_DIFF
 33

	)

3131 
	#R_MN10300_ALIGN
 34

	)

3133 
	#R_MN10300_NUM
 35

	)

3137 
	#R_M32R_NONE
 0

	)

3138 
	#R_M32R_16
 1

	)

3139 
	#R_M32R_32
 2

	)

3140 
	#R_M32R_24
 3

	)

3141 
	#R_M32R_10_PCREL
 4

	)

3142 
	#R_M32R_18_PCREL
 5

	)

3143 
	#R_M32R_26_PCREL
 6

	)

3144 
	#R_M32R_HI16_ULO
 7

	)

3145 
	#R_M32R_HI16_SLO
 8

	)

3146 
	#R_M32R_LO16
 9

	)

3147 
	#R_M32R_SDA16
 10

	)

3148 
	#R_M32R_GNU_VTINHERIT
 11

	)

3149 
	#R_M32R_GNU_VTENTRY
 12

	)

3151 
	#R_M32R_16_RELA
 33

	)

3152 
	#R_M32R_32_RELA
 34

	)

3153 
	#R_M32R_24_RELA
 35

	)

3154 
	#R_M32R_10_PCREL_RELA
 36

	)

3155 
	#R_M32R_18_PCREL_RELA
 37

	)

3156 
	#R_M32R_26_PCREL_RELA
 38

	)

3157 
	#R_M32R_HI16_ULO_RELA
 39

	)

3158 
	#R_M32R_HI16_SLO_RELA
 40

	)

3159 
	#R_M32R_LO16_RELA
 41

	)

3160 
	#R_M32R_SDA16_RELA
 42

	)

3161 
	#R_M32R_RELA_GNU_VTINHERIT
 43

	)

3162 
	#R_M32R_RELA_GNU_VTENTRY
 44

	)

3163 
	#R_M32R_REL32
 45

	)

3165 
	#R_M32R_GOT24
 48

	)

3166 
	#R_M32R_26_PLTREL
 49

	)

3167 
	#R_M32R_COPY
 50

	)

3168 
	#R_M32R_GLOB_DAT
 51

	)

3169 
	#R_M32R_JMP_SLOT
 52

	)

3170 
	#R_M32R_RELATIVE
 53

	)

3171 
	#R_M32R_GOTOFF
 54

	)

3172 
	#R_M32R_GOTPC24
 55

	)

3173 
	#R_M32R_GOT16_HI_ULO
 56

	)

3175 
	#R_M32R_GOT16_HI_SLO
 57

	)

3177 
	#R_M32R_GOT16_LO
 58

	)

3178 
	#R_M32R_GOTPC_HI_ULO
 59

	)

3180 
	#R_M32R_GOTPC_HI_SLO
 60

	)

3182 
	#R_M32R_GOTPC_LO
 61

	)

3184 
	#R_M32R_GOTOFF_HI_ULO
 62

	)

3186 
	#R_M32R_GOTOFF_HI_SLO
 63

	)

3188 
	#R_M32R_GOTOFF_LO
 64

	)

3189 
	#R_M32R_NUM
 256

	)

3192 
	#R_MICROBLAZE_NONE
 0

	)

3193 
	#R_MICROBLAZE_32
 1

	)

3194 
	#R_MICROBLAZE_32_PCREL
 2

	)

3195 
	#R_MICROBLAZE_64_PCREL
 3

	)

3196 
	#R_MICROBLAZE_32_PCREL_LO
 4

	)

3197 
	#R_MICROBLAZE_64
 5

	)

3198 
	#R_MICROBLAZE_32_LO
 6

	)

3199 
	#R_MICROBLAZE_SRO32
 7

	)

3200 
	#R_MICROBLAZE_SRW32
 8

	)

3201 
	#R_MICROBLAZE_64_NONE
 9

	)

3202 
	#R_MICROBLAZE_32_SYM_OP_SYM
 10

	)

3203 
	#R_MICROBLAZE_GNU_VTINHERIT
 11

	)

3204 
	#R_MICROBLAZE_GNU_VTENTRY
 12

	)

3205 
	#R_MICROBLAZE_GOTPC_64
 13

	)

3206 
	#R_MICROBLAZE_GOT_64
 14

	)

3207 
	#R_MICROBLAZE_PLT_64
 15

	)

3208 
	#R_MICROBLAZE_REL
 16

	)

3209 
	#R_MICROBLAZE_JUMP_SLOT
 17

	)

3210 
	#R_MICROBLAZE_GLOB_DAT
 18

	)

3211 
	#R_MICROBLAZE_GOTOFF_64
 19

	)

3212 
	#R_MICROBLAZE_GOTOFF_32
 20

	)

3213 
	#R_MICROBLAZE_COPY
 21

	)

3214 
	#R_MICROBLAZE_TLS
 22

	)

3215 
	#R_MICROBLAZE_TLSGD
 23

	)

3216 
	#R_MICROBLAZE_TLSLD
 24

	)

3217 
	#R_MICROBLAZE_TLSDTPMOD32
 25

	)

3218 
	#R_MICROBLAZE_TLSDTPREL32
 26

	)

3219 
	#R_MICROBLAZE_TLSDTPREL64
 27

	)

3220 
	#R_MICROBLAZE_TLSGOTTPREL32
 28

	)

3221 
	#R_MICROBLAZE_TLSTPREL32
 29

	)

3224 
	#DT_NIOS2_GP
 0x70000002

	)

3227 
	#R_NIOS2_NONE
 0

	)

3228 
	#R_NIOS2_S16
 1

	)

3229 
	#R_NIOS2_U16
 2

	)

3230 
	#R_NIOS2_PCREL16
 3

	)

3231 
	#R_NIOS2_CALL26
 4

	)

3232 
	#R_NIOS2_IMM5
 5

	)

3233 
	#R_NIOS2_CACHE_OPX
 6

	)

3234 
	#R_NIOS2_IMM6
 7

	)

3235 
	#R_NIOS2_IMM8
 8

	)

3236 
	#R_NIOS2_HI16
 9

	)

3237 
	#R_NIOS2_LO16
 10

	)

3238 
	#R_NIOS2_HIADJ16
 11

	)

3239 
	#R_NIOS2_BFD_RELOC_32
 12

	)

3240 
	#R_NIOS2_BFD_RELOC_16
 13

	)

3241 
	#R_NIOS2_BFD_RELOC_8
 14

	)

3242 
	#R_NIOS2_GPREL
 15

	)

3243 
	#R_NIOS2_GNU_VTINHERIT
 16

	)

3244 
	#R_NIOS2_GNU_VTENTRY
 17

	)

3245 
	#R_NIOS2_UJMP
 18

	)

3246 
	#R_NIOS2_CJMP
 19

	)

3247 
	#R_NIOS2_CALLR
 20

	)

3248 
	#R_NIOS2_ALIGN
 21

	)

3250 
	#R_NIOS2_GOT16
 22

	)

3251 
	#R_NIOS2_CALL16
 23

	)

3252 
	#R_NIOS2_GOTOFF_LO
 24

	)

3253 
	#R_NIOS2_GOTOFF_HA
 25

	)

3254 
	#R_NIOS2_PCREL_LO
 26

	)

3255 
	#R_NIOS2_PCREL_HA
 27

	)

3256 
	#R_NIOS2_TLS_GD16
 28

	)

3257 
	#R_NIOS2_TLS_LDM16
 29

	)

3258 
	#R_NIOS2_TLS_LDO16
 30

	)

3259 
	#R_NIOS2_TLS_IE16
 31

	)

3260 
	#R_NIOS2_TLS_LE16
 32

	)

3261 
	#R_NIOS2_TLS_DTPMOD
 33

	)

3262 
	#R_NIOS2_TLS_DTPREL
 34

	)

3263 
	#R_NIOS2_TLS_TPREL
 35

	)

3264 
	#R_NIOS2_COPY
 36

	)

3265 
	#R_NIOS2_GLOB_DAT
 37

	)

3266 
	#R_NIOS2_JUMP_SLOT
 38

	)

3267 
	#R_NIOS2_RELATIVE
 39

	)

3268 
	#R_NIOS2_GOTOFF
 40

	)

3269 
	#R_NIOS2_CALL26_NOAT
 41

	)

3270 
	#R_NIOS2_GOT_LO
 42

	)

3271 
	#R_NIOS2_GOT_HA
 43

	)

3272 
	#R_NIOS2_CALL_LO
 44

	)

3273 
	#R_NIOS2_CALL_HA
 45

	)

3276 
	#R_TILEPRO_NONE
 0

	)

3277 
	#R_TILEPRO_32
 1

	)

3278 
	#R_TILEPRO_16
 2

	)

3279 
	#R_TILEPRO_8
 3

	)

3280 
	#R_TILEPRO_32_PCREL
 4

	)

3281 
	#R_TILEPRO_16_PCREL
 5

	)

3282 
	#R_TILEPRO_8_PCREL
 6

	)

3283 
	#R_TILEPRO_LO16
 7

	)

3284 
	#R_TILEPRO_HI16
 8

	)

3285 
	#R_TILEPRO_HA16
 9

	)

3286 
	#R_TILEPRO_COPY
 10

	)

3287 
	#R_TILEPRO_GLOB_DAT
 11

	)

3288 
	#R_TILEPRO_JMP_SLOT
 12

	)

3289 
	#R_TILEPRO_RELATIVE
 13

	)

3290 
	#R_TILEPRO_BROFF_X1
 14

	)

3291 
	#R_TILEPRO_JOFFLONG_X1
 15

	)

3292 
	#R_TILEPRO_JOFFLONG_X1_PLT
 16

	)

3293 
	#R_TILEPRO_IMM8_X0
 17

	)

3294 
	#R_TILEPRO_IMM8_Y0
 18

	)

3295 
	#R_TILEPRO_IMM8_X1
 19

	)

3296 
	#R_TILEPRO_IMM8_Y1
 20

	)

3297 
	#R_TILEPRO_MT_IMM15_X1
 21

	)

3298 
	#R_TILEPRO_MF_IMM15_X1
 22

	)

3299 
	#R_TILEPRO_IMM16_X0
 23

	)

3300 
	#R_TILEPRO_IMM16_X1
 24

	)

3301 
	#R_TILEPRO_IMM16_X0_LO
 25

	)

3302 
	#R_TILEPRO_IMM16_X1_LO
 26

	)

3303 
	#R_TILEPRO_IMM16_X0_HI
 27

	)

3304 
	#R_TILEPRO_IMM16_X1_HI
 28

	)

3305 
	#R_TILEPRO_IMM16_X0_HA
 29

	)

3306 
	#R_TILEPRO_IMM16_X1_HA
 30

	)

3307 
	#R_TILEPRO_IMM16_X0_PCREL
 31

	)

3308 
	#R_TILEPRO_IMM16_X1_PCREL
 32

	)

3309 
	#R_TILEPRO_IMM16_X0_LO_PCREL
 33

	)

3310 
	#R_TILEPRO_IMM16_X1_LO_PCREL
 34

	)

3311 
	#R_TILEPRO_IMM16_X0_HI_PCREL
 35

	)

3312 
	#R_TILEPRO_IMM16_X1_HI_PCREL
 36

	)

3313 
	#R_TILEPRO_IMM16_X0_HA_PCREL
 37

	)

3314 
	#R_TILEPRO_IMM16_X1_HA_PCREL
 38

	)

3315 
	#R_TILEPRO_IMM16_X0_GOT
 39

	)

3316 
	#R_TILEPRO_IMM16_X1_GOT
 40

	)

3317 
	#R_TILEPRO_IMM16_X0_GOT_LO
 41

	)

3318 
	#R_TILEPRO_IMM16_X1_GOT_LO
 42

	)

3319 
	#R_TILEPRO_IMM16_X0_GOT_HI
 43

	)

3320 
	#R_TILEPRO_IMM16_X1_GOT_HI
 44

	)

3321 
	#R_TILEPRO_IMM16_X0_GOT_HA
 45

	)

3322 
	#R_TILEPRO_IMM16_X1_GOT_HA
 46

	)

3323 
	#R_TILEPRO_MMSTART_X0
 47

	)

3324 
	#R_TILEPRO_MMEND_X0
 48

	)

3325 
	#R_TILEPRO_MMSTART_X1
 49

	)

3326 
	#R_TILEPRO_MMEND_X1
 50

	)

3327 
	#R_TILEPRO_SHAMT_X0
 51

	)

3328 
	#R_TILEPRO_SHAMT_X1
 52

	)

3329 
	#R_TILEPRO_SHAMT_Y0
 53

	)

3330 
	#R_TILEPRO_SHAMT_Y1
 54

	)

3331 
	#R_TILEPRO_DEST_IMM8_X1
 55

	)

3333 
	#R_TILEPRO_TLS_GD_CALL
 60

	)

3334 
	#R_TILEPRO_IMM8_X0_TLS_GD_ADD
 61

	)

3335 
	#R_TILEPRO_IMM8_X1_TLS_GD_ADD
 62

	)

3336 
	#R_TILEPRO_IMM8_Y0_TLS_GD_ADD
 63

	)

3337 
	#R_TILEPRO_IMM8_Y1_TLS_GD_ADD
 64

	)

3338 
	#R_TILEPRO_TLS_IE_LOAD
 65

	)

3339 
	#R_TILEPRO_IMM16_X0_TLS_GD
 66

	)

3340 
	#R_TILEPRO_IMM16_X1_TLS_GD
 67

	)

3341 
	#R_TILEPRO_IMM16_X0_TLS_GD_LO
 68

	)

3342 
	#R_TILEPRO_IMM16_X1_TLS_GD_LO
 69

	)

3343 
	#R_TILEPRO_IMM16_X0_TLS_GD_HI
 70

	)

3344 
	#R_TILEPRO_IMM16_X1_TLS_GD_HI
 71

	)

3345 
	#R_TILEPRO_IMM16_X0_TLS_GD_HA
 72

	)

3346 
	#R_TILEPRO_IMM16_X1_TLS_GD_HA
 73

	)

3347 
	#R_TILEPRO_IMM16_X0_TLS_IE
 74

	)

3348 
	#R_TILEPRO_IMM16_X1_TLS_IE
 75

	)

3349 
	#R_TILEPRO_IMM16_X0_TLS_IE_LO
 76

	)

3350 
	#R_TILEPRO_IMM16_X1_TLS_IE_LO
 77

	)

3351 
	#R_TILEPRO_IMM16_X0_TLS_IE_HI
 78

	)

3352 
	#R_TILEPRO_IMM16_X1_TLS_IE_HI
 79

	)

3353 
	#R_TILEPRO_IMM16_X0_TLS_IE_HA
 80

	)

3354 
	#R_TILEPRO_IMM16_X1_TLS_IE_HA
 81

	)

3355 
	#R_TILEPRO_TLS_DTPMOD32
 82

	)

3356 
	#R_TILEPRO_TLS_DTPOFF32
 83

	)

3357 
	#R_TILEPRO_TLS_TPOFF32
 84

	)

3358 
	#R_TILEPRO_IMM16_X0_TLS_LE
 85

	)

3359 
	#R_TILEPRO_IMM16_X1_TLS_LE
 86

	)

3360 
	#R_TILEPRO_IMM16_X0_TLS_LE_LO
 87

	)

3361 
	#R_TILEPRO_IMM16_X1_TLS_LE_LO
 88

	)

3362 
	#R_TILEPRO_IMM16_X0_TLS_LE_HI
 89

	)

3363 
	#R_TILEPRO_IMM16_X1_TLS_LE_HI
 90

	)

3364 
	#R_TILEPRO_IMM16_X0_TLS_LE_HA
 91

	)

3365 
	#R_TILEPRO_IMM16_X1_TLS_LE_HA
 92

	)

3367 
	#R_TILEPRO_GNU_VTINHERIT
 128

	)

3368 
	#R_TILEPRO_GNU_VTENTRY
 129

	)

3370 
	#R_TILEPRO_NUM
 130

	)

3374 
	#R_TILEGX_NONE
 0

	)

3375 
	#R_TILEGX_64
 1

	)

3376 
	#R_TILEGX_32
 2

	)

3377 
	#R_TILEGX_16
 3

	)

3378 
	#R_TILEGX_8
 4

	)

3379 
	#R_TILEGX_64_PCREL
 5

	)

3380 
	#R_TILEGX_32_PCREL
 6

	)

3381 
	#R_TILEGX_16_PCREL
 7

	)

3382 
	#R_TILEGX_8_PCREL
 8

	)

3383 
	#R_TILEGX_HW0
 9

	)

3384 
	#R_TILEGX_HW1
 10

	)

3385 
	#R_TILEGX_HW2
 11

	)

3386 
	#R_TILEGX_HW3
 12

	)

3387 
	#R_TILEGX_HW0_LAST
 13

	)

3388 
	#R_TILEGX_HW1_LAST
 14

	)

3389 
	#R_TILEGX_HW2_LAST
 15

	)

3390 
	#R_TILEGX_COPY
 16

	)

3391 
	#R_TILEGX_GLOB_DAT
 17

	)

3392 
	#R_TILEGX_JMP_SLOT
 18

	)

3393 
	#R_TILEGX_RELATIVE
 19

	)

3394 
	#R_TILEGX_BROFF_X1
 20

	)

3395 
	#R_TILEGX_JUMPOFF_X1
 21

	)

3396 
	#R_TILEGX_JUMPOFF_X1_PLT
 22

	)

3397 
	#R_TILEGX_IMM8_X0
 23

	)

3398 
	#R_TILEGX_IMM8_Y0
 24

	)

3399 
	#R_TILEGX_IMM8_X1
 25

	)

3400 
	#R_TILEGX_IMM8_Y1
 26

	)

3401 
	#R_TILEGX_DEST_IMM8_X1
 27

	)

3402 
	#R_TILEGX_MT_IMM14_X1
 28

	)

3403 
	#R_TILEGX_MF_IMM14_X1
 29

	)

3404 
	#R_TILEGX_MMSTART_X0
 30

	)

3405 
	#R_TILEGX_MMEND_X0
 31

	)

3406 
	#R_TILEGX_SHAMT_X0
 32

	)

3407 
	#R_TILEGX_SHAMT_X1
 33

	)

3408 
	#R_TILEGX_SHAMT_Y0
 34

	)

3409 
	#R_TILEGX_SHAMT_Y1
 35

	)

3410 
	#R_TILEGX_IMM16_X0_HW0
 36

	)

3411 
	#R_TILEGX_IMM16_X1_HW0
 37

	)

3412 
	#R_TILEGX_IMM16_X0_HW1
 38

	)

3413 
	#R_TILEGX_IMM16_X1_HW1
 39

	)

3414 
	#R_TILEGX_IMM16_X0_HW2
 40

	)

3415 
	#R_TILEGX_IMM16_X1_HW2
 41

	)

3416 
	#R_TILEGX_IMM16_X0_HW3
 42

	)

3417 
	#R_TILEGX_IMM16_X1_HW3
 43

	)

3418 
	#R_TILEGX_IMM16_X0_HW0_LAST
 44

	)

3419 
	#R_TILEGX_IMM16_X1_HW0_LAST
 45

	)

3420 
	#R_TILEGX_IMM16_X0_HW1_LAST
 46

	)

3421 
	#R_TILEGX_IMM16_X1_HW1_LAST
 47

	)

3422 
	#R_TILEGX_IMM16_X0_HW2_LAST
 48

	)

3423 
	#R_TILEGX_IMM16_X1_HW2_LAST
 49

	)

3424 
	#R_TILEGX_IMM16_X0_HW0_PCREL
 50

	)

3425 
	#R_TILEGX_IMM16_X1_HW0_PCREL
 51

	)

3426 
	#R_TILEGX_IMM16_X0_HW1_PCREL
 52

	)

3427 
	#R_TILEGX_IMM16_X1_HW1_PCREL
 53

	)

3428 
	#R_TILEGX_IMM16_X0_HW2_PCREL
 54

	)

3429 
	#R_TILEGX_IMM16_X1_HW2_PCREL
 55

	)

3430 
	#R_TILEGX_IMM16_X0_HW3_PCREL
 56

	)

3431 
	#R_TILEGX_IMM16_X1_HW3_PCREL
 57

	)

3432 
	#R_TILEGX_IMM16_X0_HW0_LAST_PCREL
 58

	)

3433 
	#R_TILEGX_IMM16_X1_HW0_LAST_PCREL
 59

	)

3434 
	#R_TILEGX_IMM16_X0_HW1_LAST_PCREL
 60

	)

3435 
	#R_TILEGX_IMM16_X1_HW1_LAST_PCREL
 61

	)

3436 
	#R_TILEGX_IMM16_X0_HW2_LAST_PCREL
 62

	)

3437 
	#R_TILEGX_IMM16_X1_HW2_LAST_PCREL
 63

	)

3438 
	#R_TILEGX_IMM16_X0_HW0_GOT
 64

	)

3439 
	#R_TILEGX_IMM16_X1_HW0_GOT
 65

	)

3440 
	#R_TILEGX_IMM16_X0_HW0_PLT_PCREL
 66

	)

3441 
	#R_TILEGX_IMM16_X1_HW0_PLT_PCREL
 67

	)

3442 
	#R_TILEGX_IMM16_X0_HW1_PLT_PCREL
 68

	)

3443 
	#R_TILEGX_IMM16_X1_HW1_PLT_PCREL
 69

	)

3444 
	#R_TILEGX_IMM16_X0_HW2_PLT_PCREL
 70

	)

3445 
	#R_TILEGX_IMM16_X1_HW2_PLT_PCREL
 71

	)

3446 
	#R_TILEGX_IMM16_X0_HW0_LAST_GOT
 72

	)

3447 
	#R_TILEGX_IMM16_X1_HW0_LAST_GOT
 73

	)

3448 
	#R_TILEGX_IMM16_X0_HW1_LAST_GOT
 74

	)

3449 
	#R_TILEGX_IMM16_X1_HW1_LAST_GOT
 75

	)

3450 
	#R_TILEGX_IMM16_X0_HW3_PLT_PCREL
 76

	)

3451 
	#R_TILEGX_IMM16_X1_HW3_PLT_PCREL
 77

	)

3452 
	#R_TILEGX_IMM16_X0_HW0_TLS_GD
 78

	)

3453 
	#R_TILEGX_IMM16_X1_HW0_TLS_GD
 79

	)

3454 
	#R_TILEGX_IMM16_X0_HW0_TLS_LE
 80

	)

3455 
	#R_TILEGX_IMM16_X1_HW0_TLS_LE
 81

	)

3456 
	#R_TILEGX_IMM16_X0_HW0_LAST_TLS_LE
 82

	)

3457 
	#R_TILEGX_IMM16_X1_HW0_LAST_TLS_LE
 83

	)

3458 
	#R_TILEGX_IMM16_X0_HW1_LAST_TLS_LE
 84

	)

3459 
	#R_TILEGX_IMM16_X1_HW1_LAST_TLS_LE
 85

	)

3460 
	#R_TILEGX_IMM16_X0_HW0_LAST_TLS_GD
 86

	)

3461 
	#R_TILEGX_IMM16_X1_HW0_LAST_TLS_GD
 87

	)

3462 
	#R_TILEGX_IMM16_X0_HW1_LAST_TLS_GD
 88

	)

3463 
	#R_TILEGX_IMM16_X1_HW1_LAST_TLS_GD
 89

	)

3465 
	#R_TILEGX_IMM16_X0_HW0_TLS_IE
 92

	)

3466 
	#R_TILEGX_IMM16_X1_HW0_TLS_IE
 93

	)

3467 
	#R_TILEGX_IMM16_X0_HW0_LAST_PLT_PCREL
 94

	)

3468 
	#R_TILEGX_IMM16_X1_HW0_LAST_PLT_PCREL
 95

	)

3469 
	#R_TILEGX_IMM16_X0_HW1_LAST_PLT_PCREL
 96

	)

3470 
	#R_TILEGX_IMM16_X1_HW1_LAST_PLT_PCREL
 97

	)

3471 
	#R_TILEGX_IMM16_X0_HW2_LAST_PLT_PCREL
 98

	)

3472 
	#R_TILEGX_IMM16_X1_HW2_LAST_PLT_PCREL
 99

	)

3473 
	#R_TILEGX_IMM16_X0_HW0_LAST_TLS_IE
 100

	)

3474 
	#R_TILEGX_IMM16_X1_HW0_LAST_TLS_IE
 101

	)

3475 
	#R_TILEGX_IMM16_X0_HW1_LAST_TLS_IE
 102

	)

3476 
	#R_TILEGX_IMM16_X1_HW1_LAST_TLS_IE
 103

	)

3478 
	#R_TILEGX_TLS_DTPMOD64
 106

	)

3479 
	#R_TILEGX_TLS_DTPOFF64
 107

	)

3480 
	#R_TILEGX_TLS_TPOFF64
 108

	)

3481 
	#R_TILEGX_TLS_DTPMOD32
 109

	)

3482 
	#R_TILEGX_TLS_DTPOFF32
 110

	)

3483 
	#R_TILEGX_TLS_TPOFF32
 111

	)

3484 
	#R_TILEGX_TLS_GD_CALL
 112

	)

3485 
	#R_TILEGX_IMM8_X0_TLS_GD_ADD
 113

	)

3486 
	#R_TILEGX_IMM8_X1_TLS_GD_ADD
 114

	)

3487 
	#R_TILEGX_IMM8_Y0_TLS_GD_ADD
 115

	)

3488 
	#R_TILEGX_IMM8_Y1_TLS_GD_ADD
 116

	)

3489 
	#R_TILEGX_TLS_IE_LOAD
 117

	)

3490 
	#R_TILEGX_IMM8_X0_TLS_ADD
 118

	)

3491 
	#R_TILEGX_IMM8_X1_TLS_ADD
 119

	)

3492 
	#R_TILEGX_IMM8_Y0_TLS_ADD
 120

	)

3493 
	#R_TILEGX_IMM8_Y1_TLS_ADD
 121

	)

3495 
	#R_TILEGX_GNU_VTINHERIT
 128

	)

3496 
	#R_TILEGX_GNU_VTENTRY
 129

	)

3498 
	#R_TILEGX_NUM
 130

	)

3501 
	g__END_DECLS


	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_MISC


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_MISC
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

74 
	#htﬁe64
(
x
Ë(x)

	)

75 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

76 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

97 #unde‡
__USE_ISOC11


98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_ISOCXX11


101 #unde‡
__USE_POSIX


102 #unde‡
__USE_POSIX2


103 #unde‡
__USE_POSIX199309


104 #unde‡
__USE_POSIX199506


105 #unde‡
__USE_XOPEN


106 #unde‡
__USE_XOPEN_EXTENDED


107 #unde‡
__USE_UNIX98


108 #unde‡
__USE_XOPEN2K


109 #unde‡
__USE_XOPEN2KXSI


110 #unde‡
__USE_XOPEN2K8


111 #unde‡
__USE_XOPEN2K8XSI


112 #unde‡
__USE_LARGEFILE


113 #unde‡
__USE_LARGEFILE64


114 #unde‡
__USE_FILE_OFFSET64


115 #unde‡
__USE_MISC


116 #unde‡
__USE_ATFILE


117 #unde‡
__USE_GNU


118 #unde‡
__USE_REENTRANT


119 #unde‡
__USE_FORTIFY_LEVEL


120 #unde‡
__KERNEL_STRICT_NAMES


124 #i‚de‡
_LOOSE_KERNEL_NAMES


125 
	#__KERNEL_STRICT_NAMES


	)

135 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


136 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

137 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

139 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

146 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

147 && !
deföed
 
	g_DEFAULT_SOURCE


152 #unde‡
_DEFAULT_SOURCE


153 
	#_DEFAULT_SOURCE
 1

	)

157 #ifde‡
_GNU_SOURCE


158 #unde‡
_ISOC95_SOURCE


159 
	#_ISOC95_SOURCE
 1

	)

160 #unde‡
_ISOC99_SOURCE


161 
	#_ISOC99_SOURCE
 1

	)

162 #unde‡
_ISOC11_SOURCE


163 
	#_ISOC11_SOURCE
 1

	)

164 #unde‡
_POSIX_SOURCE


165 
	#_POSIX_SOURCE
 1

	)

166 #unde‡
_POSIX_C_SOURCE


167 
	#_POSIX_C_SOURCE
 200809L

	)

168 #unde‡
_XOPEN_SOURCE


169 
	#_XOPEN_SOURCE
 700

	)

170 #unde‡
_XOPEN_SOURCE_EXTENDED


171 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

172 #unde‡
_LARGEFILE64_SOURCE


173 
	#_LARGEFILE64_SOURCE
 1

	)

174 #unde‡
_DEFAULT_SOURCE


175 
	#_DEFAULT_SOURCE
 1

	)

176 #unde‡
_ATFILE_SOURCE


177 
	#_ATFILE_SOURCE
 1

	)

182 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

183 || (!
deföed
 
	g__STRICT_ANSI__
 \

184 && !
deföed
 
	g_ISOC99_SOURCE
 \

185 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

186 && !
deföed
 
	g_XOPEN_SOURCE
))

187 #unde‡
_DEFAULT_SOURCE


188 
	#_DEFAULT_SOURCE
 1

	)

192 #i‡(
deföed
 
_ISOC11_SOURCE
 \

193 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

194 
	#__USE_ISOC11
 1

	)

198 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

199 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

200 
	#__USE_ISOC99
 1

	)

204 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

205 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

206 
	#__USE_ISOC95
 1

	)

213 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

214 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

215 
	#__USE_ISOCXX11
 1

	)

221 #ifde‡
_DEFAULT_SOURCE


222 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


223 
	#__USE_POSIX_IMPLICITLY
 1

	)

225 #unde‡
_POSIX_SOURCE


226 
	#_POSIX_SOURCE
 1

	)

227 #unde‡
_POSIX_C_SOURCE


228 
	#_POSIX_C_SOURCE
 200809L

	)

230 #i‡((!
deföed
 
__STRICT_ANSI__
 \

231 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

232 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

233 
	#_POSIX_SOURCE
 1

	)

234 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

235 
	#_POSIX_C_SOURCE
 2

	)

236 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

237 
	#_POSIX_C_SOURCE
 199506L

	)

238 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

239 
	#_POSIX_C_SOURCE
 200112L

	)

241 
	#_POSIX_C_SOURCE
 200809L

	)

243 
	#__USE_POSIX_IMPLICITLY
 1

	)

246 #i‡(
deföed
 
_POSIX_SOURCE
 \

247 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

248 || 
deföed
 
_XOPEN_SOURCE
)

249 
	#__USE_POSIX
 1

	)

252 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


253 
	#__USE_POSIX2
 1

	)

256 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

257 
	#__USE_POSIX199309
 1

	)

260 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

261 
	#__USE_POSIX199506
 1

	)

264 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

265 
	#__USE_XOPEN2K
 1

	)

266 #unde‡
__USE_ISOC95


267 
	#__USE_ISOC95
 1

	)

268 #unde‡
__USE_ISOC99


269 
	#__USE_ISOC99
 1

	)

272 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

273 
	#__USE_XOPEN2K8
 1

	)

274 #unde‡
_ATFILE_SOURCE


275 
	#_ATFILE_SOURCE
 1

	)

278 #ifdef 
_XOPEN_SOURCE


279 
	#__USE_XOPEN
 1

	)

280 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

281 
	#__USE_XOPEN_EXTENDED
 1

	)

282 
	#__USE_UNIX98
 1

	)

283 #unde‡
_LARGEFILE_SOURCE


284 
	#_LARGEFILE_SOURCE
 1

	)

285 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

286 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

287 
	#__USE_XOPEN2K8
 1

	)

288 
	#__USE_XOPEN2K8XSI
 1

	)

290 
	#__USE_XOPEN2K
 1

	)

291 
	#__USE_XOPEN2KXSI
 1

	)

292 #unde‡
__USE_ISOC95


293 
	#__USE_ISOC95
 1

	)

294 #unde‡
__USE_ISOC99


295 
	#__USE_ISOC99
 1

	)

298 #ifde‡
_XOPEN_SOURCE_EXTENDED


299 
	#__USE_XOPEN_EXTENDED
 1

	)

304 #ifde‡
_LARGEFILE_SOURCE


305 
	#__USE_LARGEFILE
 1

	)

308 #ifde‡
_LARGEFILE64_SOURCE


309 
	#__USE_LARGEFILE64
 1

	)

312 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

313 
	#__USE_FILE_OFFSET64
 1

	)

316 #i‡
deföed
 
_DEFAULT_SOURCE


317 
	#__USE_MISC
 1

	)

320 #ifdef 
_ATFILE_SOURCE


321 
	#__USE_ATFILE
 1

	)

324 #ifdef 
_GNU_SOURCE


325 
	#__USE_GNU
 1

	)

328 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


329 
	#__USE_REENTRANT
 1

	)

332 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

333 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

334 #i‡
_FORTIFY_SOURCE
 > 1

335 
	#__USE_FORTIFY_LEVEL
 2

	)

337 
	#__USE_FORTIFY_LEVEL
 1

	)

340 
	#__USE_FORTIFY_LEVEL
 0

	)

345 
	~<°dc-¥edef.h
>

353 #unde‡
__GNU_LIBRARY__


354 
	#__GNU_LIBRARY__
 6

	)

358 
	#__GLIBC__
 2

	)

359 
	#__GLIBC_MINOR__
 23

	)

361 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

362 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

365 #i‚de‡
__ASSEMBLER__


366 #i‚de‡
_SYS_CDEFS_H


367 
	~<sys/cdefs.h
>

372 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


373 
	#__USE_LARGEFILE
 1

	)

374 
	#__USE_LARGEFILE64
 1

	)

380 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

381 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

382 && 
deföed
 
	g__exã∫_ölöe


383 
	#__USE_EXTERN_INLINES
 1

	)

391 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

19 #i‚de‡
_GETOPT_H


21 #i‚de‡
__√ed_gë›t


22 
	#_GETOPT_H
 1

	)

32 #i‡!
deföed
 
__GNU_LIBRARY__


33 
	~<˘y≥.h
>

36 #i‚de‡
__THROW


37 #i‚de‡
__GNUC_PREREQ


38 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

40 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

41 
	#__THROW
 
	`throw
 ()

	)

43 
	#__THROW


	)

47 #ifdef 
__˝lu•lus


57 *
›èrg
;

71 
›töd
;

76 
›ãº
;

80 
›t›t
;

82 #i‚de‡
__√ed_gë›t


104 
	s›ti⁄


106 c⁄° *
	g«me
;

109 
	ghas_¨g
;

110 *
	gÊag
;

111 
	gvÆ
;

116 
	#no_¨gumít
 0

	)

117 
	#ªquúed_¨gumít
 1

	)

118 
	#›ti⁄Æ_¨gumít
 2

	)

146 #ifde‡
__GNU_LIBRARY__


150 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

151 
__THROW
;

153 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

154 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


158 #ifde‡
__REDIRECT


159 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
),

161 
__posix_gë›t
);

163 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
Ë
__THROW
;

165 
	#gë›t
 
__posix_gë›t


	)

169 
gë›t
 ();

172 #i‚de‡
__√ed_gë›t


173 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

174 c⁄° *
__sh‹t›ts
,

175 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

176 
__THROW
;

177 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

178 c⁄° *
__sh‹t›ts
,

179 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

180 
__THROW
;

184 #ifdef 
__˝lu•lus


189 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

28 #i‚de‡
_IO_STDIO_H


29 
	#_IO_STDIO_H


	)

31 
	~<_G_c⁄fig.h
>

33 
	#_IO_Âos_t
 
_G_Âos_t


	)

34 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

35 
	#_IO_size_t
 
size_t


	)

36 
	#_IO_ssize_t
 
__ssize_t


	)

37 
	#_IO_off_t
 
__off_t


	)

38 
	#_IO_off64_t
 
__off64_t


	)

39 
	#_IO_pid_t
 
__pid_t


	)

40 
	#_IO_uid_t
 
__uid_t


	)

41 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

42 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

43 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

44 
	#_IO_va_li°
 
_G_va_li°


	)

45 
	#_IO_wöt_t
 
wöt_t


	)

48 
	#__√ed___va_li°


	)

49 
	~<°d¨g.h
>

50 #ifde‡
__GNUC_VA_LIST


51 #unde‡
_IO_va_li°


52 
	#_IO_va_li°
 
__gnuc_va_li°


	)

55 #i‚de‡
__P


56 
	~<sys/cdefs.h
>

59 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

61 #i‚de‡
EOF


62 
	#EOF
 (-1)

	)

64 #i‚de‡
NULL


65 #i‡
deföed
 
__GNUG__
 && \

66 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

67 
	#NULL
 (
__nuŒ
)

	)

69 #i‡!
deföed
(
__˝lu•lus
)

70 
	#NULL
 ((*)0)

	)

72 
	#NULL
 (0)

	)

77 
	#_IOS_INPUT
 1

	)

78 
	#_IOS_OUTPUT
 2

	)

79 
	#_IOS_ATEND
 4

	)

80 
	#_IOS_APPEND
 8

	)

81 
	#_IOS_TRUNC
 16

	)

82 
	#_IOS_NOCREATE
 32

	)

83 
	#_IOS_NOREPLACE
 64

	)

84 
	#_IOS_BIN
 128

	)

92 
	#_IO_MAGIC
 0xFBAD0000

	)

93 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

94 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

95 
	#_IO_USER_BUF
 1

	)

96 
	#_IO_UNBUFFERED
 2

	)

97 
	#_IO_NO_READS
 4

	)

98 
	#_IO_NO_WRITES
 8

	)

99 
	#_IO_EOF_SEEN
 0x10

	)

100 
	#_IO_ERR_SEEN
 0x20

	)

101 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

102 
	#_IO_LINKED
 0x80

	)

103 
	#_IO_IN_BACKUP
 0x100

	)

104 
	#_IO_LINE_BUF
 0x200

	)

105 
	#_IO_TIED_PUT_GET
 0x400

	)

106 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

107 
	#_IO_IS_APPENDING
 0x1000

	)

108 
	#_IO_IS_FILEBUF
 0x2000

	)

109 
	#_IO_BAD_SEEN
 0x4000

	)

110 
	#_IO_USER_LOCK
 0x8000

	)

112 
	#_IO_FLAGS2_MMAP
 1

	)

113 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

114 #ifde‡
_LIBC


115 
	#_IO_FLAGS2_FORTIFY
 4

	)

117 
	#_IO_FLAGS2_USER_WBUF
 8

	)

118 #ifde‡
_LIBC


119 
	#_IO_FLAGS2_SCANF_STD
 16

	)

120 
	#_IO_FLAGS2_NOCLOSE
 32

	)

121 
	#_IO_FLAGS2_CLOEXEC
 64

	)

125 
	#_IO_SKIPWS
 01

	)

126 
	#_IO_LEFT
 02

	)

127 
	#_IO_RIGHT
 04

	)

128 
	#_IO_INTERNAL
 010

	)

129 
	#_IO_DEC
 020

	)

130 
	#_IO_OCT
 040

	)

131 
	#_IO_HEX
 0100

	)

132 
	#_IO_SHOWBASE
 0200

	)

133 
	#_IO_SHOWPOINT
 0400

	)

134 
	#_IO_UPPERCASE
 01000

	)

135 
	#_IO_SHOWPOS
 02000

	)

136 
	#_IO_SCIENTIFIC
 04000

	)

137 
	#_IO_FIXED
 010000

	)

138 
	#_IO_UNITBUF
 020000

	)

139 
	#_IO_STDIO
 040000

	)

140 
	#_IO_DONT_CLOSE
 0100000

	)

141 
	#_IO_BOOLALPHA
 0200000

	)

144 
_IO_jump_t
; 
	g_IO_FILE
;

147 #ifde‡
_IO_MTSAFE_IO


150 
	t_IO_lock_t
;

156 
	s_IO_m¨kî
 {

157 
_IO_m¨kî
 *
	m_√xt
;

158 
_IO_FILE
 *
	m_sbuf
;

162 
	m_pos
;

164 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

165 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

166 
	mpublic
:

167 
°ªamm¨kî
(
°ªambuf
 *
sb
);

168 ~
°ªamm¨kî
();

169 
ßvög
(Ë{  
	m_•os
 == -2; }

170 
dñè
(
°ªamm¨kî
&);

171 
dñè
();

176 
	e__codecvt_ªsu…


178 
	m__codecvt_ok
,

179 
	m__codecvt_∑πül
,

180 
	m__codecvt_îr‹
,

181 
	m__codecvt_noc⁄v


184 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


187 
	s_IO_codecvt


189 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

190 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

191 
	m__mb°©e_t
 *,

192 c⁄° 
	mwch¨_t
 *,

193 c⁄° 
	mwch¨_t
 *,

194 c⁄° 
	mwch¨_t
 **, *,

196 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

197 
	m__mb°©e_t
 *, *,

199 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

200 
	m__mb°©e_t
 *,

202 c⁄° **, 
	mwch¨_t
 *,

203 
	mwch¨_t
 *, wchar_t **);

204 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

205 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

206 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

207 c⁄° *, c⁄° *, 
	m_IO_size_t
);

208 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

210 
_IO_ic⁄v_t
 
	m__cd_ö
;

211 
_IO_ic⁄v_t
 
	m__cd_out
;

215 
	s_IO_wide_d©a


217 
wch¨_t
 *
	m_IO_ªad_±r
;

218 
wch¨_t
 *
	m_IO_ªad_íd
;

219 
wch¨_t
 *
	m_IO_ªad_ba£
;

220 
wch¨_t
 *
	m_IO_wrôe_ba£
;

221 
wch¨_t
 *
	m_IO_wrôe_±r
;

222 
wch¨_t
 *
	m_IO_wrôe_íd
;

223 
wch¨_t
 *
	m_IO_buf_ba£
;

224 
wch¨_t
 *
	m_IO_buf_íd
;

226 
wch¨_t
 *
	m_IO_ßve_ba£
;

227 
wch¨_t
 *
	m_IO_backup_ba£
;

229 
wch¨_t
 *
	m_IO_ßve_íd
;

231 
__mb°©e_t
 
	m_IO_°©e
;

232 
__mb°©e_t
 
	m_IO_œ°_°©e
;

233 
_IO_codecvt
 
	m_codecvt
;

235 
wch¨_t
 
	m_sh‹tbuf
[1];

237 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

241 
	s_IO_FILE
 {

242 
	m_Êags
;

243 
	#_IO_fûe_Êags
 
_Êags


	)

247 * 
	m_IO_ªad_±r
;

248 * 
	m_IO_ªad_íd
;

249 * 
	m_IO_ªad_ba£
;

250 * 
	m_IO_wrôe_ba£
;

251 * 
	m_IO_wrôe_±r
;

252 * 
	m_IO_wrôe_íd
;

253 * 
	m_IO_buf_ba£
;

254 * 
	m_IO_buf_íd
;

256 *
	m_IO_ßve_ba£
;

257 *
	m_IO_backup_ba£
;

258 *
	m_IO_ßve_íd
;

260 
_IO_m¨kî
 *
	m_m¨kîs
;

262 
_IO_FILE
 *
	m_chaö
;

264 
	m_fûío
;

266 
	m_blksize
;

268 
	m_Êags2
;

270 
_IO_off_t
 
	m_ﬁd_off£t
;

272 
	#__HAVE_COLUMN


	)

274 
	m_cur_cﬁumn
;

275 sig√d 
	m_vèbÀ_off£t
;

276 
	m_sh‹tbuf
[1];

280 
_IO_lock_t
 *
	m_lock
;

281 #ifde‡
_IO_USE_OLD_IO_FILE


284 
	s_IO_FILE_com∂ëe


286 
_IO_FILE
 
	m_fûe
;

288 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

289 
_IO_off64_t
 
	m_off£t
;

290 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


292 
_IO_codecvt
 *
	m_codecvt
;

293 
_IO_wide_d©a
 *
	m_wide_d©a
;

294 
_IO_FILE
 *
	m_‰ìªs_li°
;

295 *
	m_‰ìªs_buf
;

297 *
	m__∑d1
;

298 *
	m__∑d2
;

299 *
	m__∑d3
;

300 *
	m__∑d4
;

302 
size_t
 
	m__∑d5
;

303 
	m_mode
;

305 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

309 #i‚de‡
__˝lu•lus


310 
_IO_FILE
 
	t_IO_FILE
;

313 
	g_IO_FILE_∂us
;

315 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

316 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

317 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

318 #i‚de‡
_LIBC


319 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

320 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

321 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

323 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

324 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

325 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

333 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

341 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

342 
	tsize_t
 
	t__n
);

350 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

353 
	t__io_˛o£_‚
 (*
	t__cookõ
);

356 #ifde‡
_GNU_SOURCE


358 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

359 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

360 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

361 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

366 
__io_ªad_‚
 *
	mªad
;

367 
__io_wrôe_‚
 *
	mwrôe
;

368 
__io_£ek_‚
 *
	m£ek
;

369 
__io_˛o£_‚
 *
	m˛o£
;

370 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

371 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

373 
	g_IO_cookõ_fûe
;

376 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

377 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

381 #ifde‡
__˝lu•lus


385 
__undîÊow
 (
_IO_FILE
 *);

386 
__uÊow
 (
_IO_FILE
 *);

387 
__ovîÊow
 (
_IO_FILE
 *, );

388 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


389 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

390 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

391 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

394 #i‡ 
__GNUC__
 >= 3

395 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

397 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

400 
	#_IO_gëc_u∆ocked
(
_Â
) \

401 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

402 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

403 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

404 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

405 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

406 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

407 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

408 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

409 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

410 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

412 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


413 
	#_IO_gëwc_u∆ocked
(
_Â
) \

414 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

415 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

416 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

417 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

418 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

419 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

420 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

421 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

422 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

423 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

426 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

427 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

429 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

430 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

431 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

432 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

434 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

437 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

438 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

440 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

441 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

442 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

444 #ifde‡
_IO_MTSAFE_IO


445 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

446 
	#_IO_Êockfûe
(
_Â
) \

447 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

448 
	#_IO_fu∆ockfûe
(
_Â
) \

449 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

451 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

452 
	#_IO_Êockfûe
(
_Â
Ë

	)

453 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

454 
	#_IO_·rylockfûe
(
_Â
Ë

	)

455 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

456 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

459 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

460 
_IO_va_li°
, *
__ª°ri˘
);

461 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

462 
_IO_va_li°
);

463 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

464 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

466 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

467 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

469 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

471 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


472 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

473 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

474 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

475 #i‡
__GNUC__
 >= 2

478 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


479 
	~<shlib-com∑t.h
>

480 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

481 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

482 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

483 c⁄° 
_IO_°dö_u£d
;

484 
wók_exã∫
 (
_IO_°dö_u£d
);

487 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


488 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

492 
	#_IO_fwide
(
__Â
, 
__mode
) \

493 ({ 
__ªsu…
 = (
__mode
); \

494 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

496 i‡((
__Â
)->
_mode
 == 0) \

498 (
__Â
)->
_mode
 = -1; \

499 
__ªsu…
 = (
__Â
)->
_mode
; \

501 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

502 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

504 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

505 
__ªsu…
; })

	)

508 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

509 
_IO_va_li°
, *
__ª°ri˘
);

510 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

511 
_IO_va_li°
);

512 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

513 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

516 #ifde‡
__LDBL_COMPAT


517 
	~<bôs/libio-ldbl.h
>

520 #ifde‡
__˝lu•lus


	@/usr/include/linux/prctl.h

1 #i‚de‡
_LINUX_PRCTL_H


2 
	#_LINUX_PRCTL_H


	)

4 
	~<löux/ty≥s.h
>

8 
	#PR_SET_PDEATHSIG
 1

	)

9 
	#PR_GET_PDEATHSIG
 2

	)

12 
	#PR_GET_DUMPABLE
 3

	)

13 
	#PR_SET_DUMPABLE
 4

	)

16 
	#PR_GET_UNALIGN
 5

	)

17 
	#PR_SET_UNALIGN
 6

	)

18 
	#PR_UNALIGN_NOPRINT
 1

	)

19 
	#PR_UNALIGN_SIGBUS
 2

	)

23 
	#PR_GET_KEEPCAPS
 7

	)

24 
	#PR_SET_KEEPCAPS
 8

	)

27 
	#PR_GET_FPEMU
 9

	)

28 
	#PR_SET_FPEMU
 10

	)

29 
	#PR_FPEMU_NOPRINT
 1

	)

30 
	#PR_FPEMU_SIGFPE
 2

	)

33 
	#PR_GET_FPEXC
 11

	)

34 
	#PR_SET_FPEXC
 12

	)

35 
	#PR_FP_EXC_SW_ENABLE
 0x80

	)

36 
	#PR_FP_EXC_DIV
 0x010000

	)

37 
	#PR_FP_EXC_OVF
 0x020000

	)

38 
	#PR_FP_EXC_UND
 0x040000

	)

39 
	#PR_FP_EXC_RES
 0x080000

	)

40 
	#PR_FP_EXC_INV
 0x100000

	)

41 
	#PR_FP_EXC_DISABLED
 0

	)

42 
	#PR_FP_EXC_NONRECOV
 1

	)

43 
	#PR_FP_EXC_ASYNC
 2

	)

44 
	#PR_FP_EXC_PRECISE
 3

	)

48 
	#PR_GET_TIMING
 13

	)

49 
	#PR_SET_TIMING
 14

	)

50 
	#PR_TIMING_STATISTICAL
 0

	)

52 
	#PR_TIMING_TIMESTAMP
 1

	)

55 
	#PR_SET_NAME
 15

	)

56 
	#PR_GET_NAME
 16

	)

59 
	#PR_GET_ENDIAN
 19

	)

60 
	#PR_SET_ENDIAN
 20

	)

61 
	#PR_ENDIAN_BIG
 0

	)

62 
	#PR_ENDIAN_LITTLE
 1

	)

63 
	#PR_ENDIAN_PPC_LITTLE
 2

	)

66 
	#PR_GET_SECCOMP
 21

	)

67 
	#PR_SET_SECCOMP
 22

	)

70 
	#PR_CAPBSET_READ
 23

	)

71 
	#PR_CAPBSET_DROP
 24

	)

74 
	#PR_GET_TSC
 25

	)

75 
	#PR_SET_TSC
 26

	)

76 
	#PR_TSC_ENABLE
 1

	)

77 
	#PR_TSC_SIGSEGV
 2

	)

80 
	#PR_GET_SECUREBITS
 27

	)

81 
	#PR_SET_SECUREBITS
 28

	)

87 
	#PR_SET_TIMERSLACK
 29

	)

88 
	#PR_GET_TIMERSLACK
 30

	)

90 
	#PR_TASK_PERF_EVENTS_DISABLE
 31

	)

91 
	#PR_TASK_PERF_EVENTS_ENABLE
 32

	)

97 
	#PR_MCE_KILL
 33

	)

98 
	#PR_MCE_KILL_CLEAR
 0

	)

99 
	#PR_MCE_KILL_SET
 1

	)

101 
	#PR_MCE_KILL_LATE
 0

	)

102 
	#PR_MCE_KILL_EARLY
 1

	)

103 
	#PR_MCE_KILL_DEFAULT
 2

	)

105 
	#PR_MCE_KILL_GET
 34

	)

110 
	#PR_SET_MM
 35

	)

111 
	#PR_SET_MM_START_CODE
 1

	)

112 
	#PR_SET_MM_END_CODE
 2

	)

113 
	#PR_SET_MM_START_DATA
 3

	)

114 
	#PR_SET_MM_END_DATA
 4

	)

115 
	#PR_SET_MM_START_STACK
 5

	)

116 
	#PR_SET_MM_START_BRK
 6

	)

117 
	#PR_SET_MM_BRK
 7

	)

118 
	#PR_SET_MM_ARG_START
 8

	)

119 
	#PR_SET_MM_ARG_END
 9

	)

120 
	#PR_SET_MM_ENV_START
 10

	)

121 
	#PR_SET_MM_ENV_END
 11

	)

122 
	#PR_SET_MM_AUXV
 12

	)

123 
	#PR_SET_MM_EXE_FILE
 13

	)

124 
	#PR_SET_MM_MAP
 14

	)

125 
	#PR_SET_MM_MAP_SIZE
 15

	)

133 
	s¥˘l_mm_m≠
 {

134 
__u64
 
	m°¨t_code
;

135 
__u64
 
	míd_code
;

136 
__u64
 
	m°¨t_d©a
;

137 
__u64
 
	míd_d©a
;

138 
__u64
 
	m°¨t_brk
;

139 
__u64
 
	mbrk
;

140 
__u64
 
	m°¨t_°ack
;

141 
__u64
 
	m¨g_°¨t
;

142 
__u64
 
	m¨g_íd
;

143 
__u64
 
	mív_°¨t
;

144 
__u64
 
	mív_íd
;

145 
__u64
 *
	mauxv
;

146 
__u32
 
	mauxv_size
;

147 
__u32
 
	mexe_fd
;

154 
	#PR_SET_PTRACER
 0x59616d61

	)

155 
	#PR_SET_PTRACER_ANY
 (()-1)

	)

157 
	#PR_SET_CHILD_SUBREAPER
 36

	)

158 
	#PR_GET_CHILD_SUBREAPER
 37

	)

174 
	#PR_SET_NO_NEW_PRIVS
 38

	)

175 
	#PR_GET_NO_NEW_PRIVS
 39

	)

177 
	#PR_GET_TID_ADDRESS
 40

	)

179 
	#PR_SET_THP_DISABLE
 41

	)

180 
	#PR_GET_THP_DISABLE
 42

	)

185 
	#PR_MPX_ENABLE_MANAGEMENT
 43

	)

186 
	#PR_MPX_DISABLE_MANAGEMENT
 44

	)

188 
	#PR_SET_FP_MODE
 45

	)

189 
	#PR_GET_FP_MODE
 46

	)

190 
	#PR_FP_MODE_FR
 (1 << 0Ë

	)

191 
	#PR_FP_MODE_FRE
 (1 << 1Ë

	)

194 
	#PR_CAP_AMBIENT
 47

	)

195 
	#PR_CAP_AMBIENT_IS_SET
 1

	)

196 
	#PR_CAP_AMBIENT_RAISE
 2

	)

197 
	#PR_CAP_AMBIENT_LOWER
 3

	)

198 
	#PR_CAP_AMBIENT_CLEAR_ALL
 4

	)

201 
	#PR_GET_SPECULATION_CTRL
 52

	)

202 
	#PR_SET_SPECULATION_CTRL
 53

	)

204 
	#PR_SPEC_STORE_BYPASS
 0

	)

205 
	#PR_SPEC_INDIRECT_BRANCH
 1

	)

207 
	#PR_SPEC_NOT_AFFECTED
 0

	)

208 
	#PR_SPEC_PRCTL
 (1UL << 0)

	)

209 
	#PR_SPEC_ENABLE
 (1UL << 1)

	)

210 
	#PR_SPEC_DISABLE
 (1UL << 2)

	)

211 
	#PR_SPEC_FORCE_DISABLE
 (1UL << 3)

	)

	@/usr/include/sys/cdefs.h

18 #i‚def 
_SYS_CDEFS_H


19 
	#_SYS_CDEFS_H
 1

	)

22 #i‚de‡
_FEATURES_H


23 
	~<„©uªs.h
>

29 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


34 #unde‡
__P


35 #unde‡
__PMT


37 #ifde‡
__GNUC__


41 #i‡
__GNUC_PREREQ
 (4, 6Ë&& !
deföed
 
_LIBC


42 
	#__LEAF
 , 
__Àaf__


	)

43 
	#__LEAF_ATTR
 
	`__©åibuã__
 ((
__Àaf__
))

	)

45 
	#__LEAF


	)

46 
	#__LEAF_ATTR


	)

54 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

55 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
))

	)

56 
	#__THROWNL
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

57 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
)Ë
	)
fct

59 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

60 
	#__THROW
 
	`throw
 ()

	)

61 
	#__THROWNL
 
	`throw
 ()

	)

62 
	#__NTH
(
f˘
Ë
__LEAF_ATTR
 f˘ 
	`throw
 ()

	)

64 
	#__THROW


	)

65 
	#__THROWNL


	)

66 
	#__NTH
(
f˘
Ë
	)
fct

72 
	#__ölöe


	)

74 
	#__THROW


	)

75 
	#__THROWNL


	)

76 
	#__NTH
(
f˘
Ë
	)
fct

82 
	#__P
(
¨gs
Ë
	)
args

83 
	#__PMT
(
¨gs
Ë
	)
args

88 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

89 
	#__STRING
(
x
Ë#x

	)

92 
	#__±r_t
 *

	)

93 
	#__l⁄g_doubÀ_t
 

	)

97 #ifdef 
__˝lu•lus


98 
	#__BEGIN_DECLS
 "C" {

	)

99 
	#__END_DECLS
 }

	)

101 
	#__BEGIN_DECLS


	)

102 
	#__END_DECLS


	)

111 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


112 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

113 
	#__END_NAMESPACE_STD
 }

	)

114 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

115 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

116 
	#__END_NAMESPACE_C99
 }

	)

117 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

122 
	#__BEGIN_NAMESPACE_STD


	)

123 
	#__END_NAMESPACE_STD


	)

124 
	#__USING_NAMESPACE_STD
(
«me
)

	)

125 
	#__BEGIN_NAMESPACE_C99


	)

126 
	#__END_NAMESPACE_C99


	)

127 
	#__USING_NAMESPACE_C99
(
«me
)

	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

135 #i‡
__GNUC_PREREQ
 (4,3)

136 
	#__w¨nde˛
(
«me
, 
msg
) \

137 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

138 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

139 
	#__îr‹de˛
(
«me
, 
msg
) \

140 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

142 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

143 
	#__w¨«âr
(
msg
)

	)

144 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

148 #i‡
__GNUC_PREREQ
 (2,97)

150 
	#__Êex¨r
 []

	)

152 #ifde‡
__GNUC__


153 
	#__Êex¨r
 [0]

	)

155 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

156 
	#__Êex¨r
 []

	)

159 
	#__Êex¨r
 [1]

	)

175 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

177 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

178 #ifde‡
__˝lu•lus


179 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

180 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

181 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

182 
«me
 
¥Ÿo
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

184 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

185 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

186 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

187 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROWNL


	)

189 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

190 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

203 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

204 
	#__©åibuã__
(
xyz
Ë

	)

210 #i‡
__GNUC_PREREQ
 (2,96)

211 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

213 
	#__©åibuã_mÆloc__


	)

218 #i‡
__GNUC_PREREQ
 (4, 3)

219 
	#__©åibuã_Æloc_size__
(
∑øms
) \

220 
	`__©åibuã__
 ((
__Æloc_size__
 
∑øms
))

	)

222 
	#__©åibuã_Æloc_size__
(
∑øms
Ë

	)

228 #i‡
__GNUC_PREREQ
 (2,96)

229 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

231 
	#__©åibuã_puª__


	)

235 #i‡
__GNUC_PREREQ
 (2,5)

236 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

238 
	#__©åibuã_c⁄°__


	)

244 #i‡
__GNUC_PREREQ
 (3,1)

245 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

246 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

248 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

249 
	#__©åibuã_noölöe__


	)

253 #i‡
__GNUC_PREREQ
 (3,2)

254 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

256 
	#__©åibuã_dïªˇãd__


	)

265 #i‡
__GNUC_PREREQ
 (2,8)

266 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

268 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

275 #i‡
__GNUC_PREREQ
 (2,97)

276 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

277 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

279 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

284 #i‡
__GNUC_PREREQ
 (3,3)

285 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

287 
	#__n⁄nuŒ
(
∑øms
)

	)

292 #i‡
__GNUC_PREREQ
 (3,4)

293 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

294 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

295 #i‡
__USE_FORTIFY_LEVEL
 > 0

296 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

299 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

301 #i‚de‡
__wur


302 
	#__wur


	)

306 #i‡
__GNUC_PREREQ
 (3,2)

307 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

309 
	#__Æways_ölöe
 
__ölöe


	)

314 #i‡
__GNUC_PREREQ
 (4,3)

315 
	#__©åibuã_¨tificül__
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

317 
	#__©åibuã_¨tificül__


	)

329 #i‡(!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3) \

330 || (
deföed
 
__˛™g__
 && (deföed 
__GNUC_STDC_INLINE__
 \

331 || 
deföed
 
__GNUC_GNU_INLINE__
)))

332 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


333 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

334 
	#__exã∫_Æways_ölöe
 \

335 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

337 
	#__exã∫_ölöe
 
__ölöe


	)

338 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

342 #ifde‡
__exã∫_Æways_ölöe


343 
	#__f‹tify_fun˘i⁄
 
__exã∫_Æways_ölöe
 
__©åibuã_¨tificül__


	)

348 #i‡
__GNUC_PREREQ
 (4,3)

349 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

350 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

357 #i‡!
__GNUC_PREREQ
 (2,8)

358 
	#__exãnsi⁄__


	)

362 #i‡!
__GNUC_PREREQ
 (2,92)

363 
	#__ª°ri˘


	)

369 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


370 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

372 #ifde‡
__GNUC__


373 
	#__ª°ri˘_¨r


	)

375 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

376 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

379 
	#__ª°ri˘_¨r


	)

384 #i‡
__GNUC__
 >= 3

385 
	#__glibc_u∆ikñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 0)

	)

386 
	#__glibc_likñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 1)

	)

388 
	#__glibc_u∆ikñy
(
c⁄d
Ë(c⁄d)

	)

389 
	#__glibc_likñy
(
c⁄d
Ë(c⁄d)

	)

392 #i‡(!
deföed
 
_N‹ëu∫
 \

393 && (
deföed
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

394 && !
	$__GNUC_PREREQ
 (4,7))

395 #i‡
	`__GNUC_PREREQ
 (2,8)

396 
	#_N‹ëu∫
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

	)

398 
	#_N‹ëu∫


	)

402 #i‡(!
deföed
 
_Sètic_as£π
 && !deföed 
__˝lu•lus
 \

403 && (
deföed
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

404 && (!
	`__GNUC_PREREQ
 (4, 6Ë|| 
deföed
 
__STRICT_ANSI__
))

405 
	#_Sètic_as£π
(
ex¥
, 
dügno°ic
) \

406 (*
	`__Sètic_as£π_fun˘i⁄
 ()) \

407 [!! (°ru˘ { 
__îr‹_if_√g©ive
: (
ex¥
Ë? 2 : -1; })]

	)

410 
	~<bôs/w‹dsize.h
>

412 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


413 
	#__LDBL_COMPAT
 1

	)

414 #ifde‡
__REDIRECT


415 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

416 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

417 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

418 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

419 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

420 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

421 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

422 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

423 
	#__LDBL_REDIR_DECL
(
«me
) \

424 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

425 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

426 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

427 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

428 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

431 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


432 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

433 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

434 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

435 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

436 
	#__LDBL_REDIR_DECL
(
«me
)

	)

437 #ifde‡
__REDIRECT


438 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

439 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

440 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/sys/select.h

21 #i‚de‡
_SYS_SELECT_H


22 
	#_SYS_SELECT_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

30 
	~<bôs/£À˘.h
>

33 
	~<bôs/sig£t.h
>

35 #i‚de‡
__sig£t_t_deföed


36 
	#__sig£t_t_deföed


	)

37 
__sig£t_t
 
	tsig£t_t
;

41 
	#__√ed_time_t


	)

42 
	#__√ed_time•ec


	)

43 
	~<time.h
>

44 
	#__√ed_timevÆ


	)

45 
	~<bôs/time.h
>

47 #i‚de‡
__su£c⁄ds_t_deföed


48 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

49 
	#__su£c⁄ds_t_deföed


	)

54 
	t__fd_mask
;

57 #unde‡
__NFDBITS


59 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

60 
	#__FD_ELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

61 
	#__FD_MASK
(
d
Ë((
__fd_mask
Ë(1UL << ((dË% 
__NFDBITS
)))

	)

68 #ifde‡
__USE_XOPEN


69 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

70 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

72 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

75 } 
	tfd_£t
;

78 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

80 #ifde‡
__USE_MISC


82 
__fd_mask
 
	tfd_mask
;

85 
	#NFDBITS
 
__NFDBITS


	)

90 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

91 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

92 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

93 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

96 
__BEGIN_DECLS


106 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

107 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

108 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

109 
timevÆ
 *
__ª°ri˘
 
__timeout
);

111 #ifde‡
__USE_XOPEN2K


118 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

119 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

120 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

121 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

122 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

127 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__GNUC__


128 
	~<bôs/£À˘2.h
>

131 
	g__END_DECLS


	@/usr/include/sys/sysmacros.h

19 #i‚de‡
_SYS_SYSMACROS_H


20 
	#_SYS_SYSMACROS_H
 1

	)

22 
	~<„©uªs.h
>

24 
__BEGIN_DECLS


26 
__exãnsi⁄__


27 
	$gnu_dev_maj‹
 (
__dev
)

28 
__THROW
 
__©åibuã_c⁄°__
;

29 
__exãnsi⁄__


30 
	$gnu_dev_mö‹
 (
__dev
)

31 
__THROW
 
__©åibuã_c⁄°__
;

32 
__exãnsi⁄__


33 
	$gnu_dev_makedev
 (
__maj‹
,

34 
__mö‹
)

35 
__THROW
 
__©åibuã_c⁄°__
;

37 #ifde‡
__USE_EXTERN_INLINES


38 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

39 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

41  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

42 
	}
}

44 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

45 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

47  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

48 
	}
}

50 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

51 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

53  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

54 | (((Ë(
__mö‹
 & ~0xff)) << 12)

55 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

56 
	}
}

58 
	g__END_DECLS


61 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

62 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

63 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

23 
__off_t
 
	m__pos
;

24 
__mb°©e_t
 
	m__°©e
;

25 } 
	t_G_Âos_t
;

28 
__off64_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos64_t
;

31 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


32 
	~<gc⁄v.h
>

35 
__gc⁄v_öfo
 
	m__cd
;

38 
__gc⁄v_öfo
 
	m__cd
;

39 
__gc⁄v_°ï_d©a
 
	m__d©a
;

40 } 
	m__comböed
;

41 } 
	t_G_ic⁄v_t
;

46 
	#_G_va_li°
 
__gnuc_va_li°


	)

48 
	#_G_HAVE_MMAP
 1

	)

49 
	#_G_HAVE_MREMAP
 1

	)

51 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

54 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

56 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/bits/byteswap.h

19 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


23 #i‚de‡
_BITS_BYTESWAP_H


24 
	#_BITS_BYTESWAP_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

35 
	~<bôs/byãsw≠-16.h
>

38 
	#__bsw≠_c⁄°™t_32
(
x
) \

39 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

40 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

42 #ifde‡
__GNUC__


43 #i‡
__GNUC_PREREQ
 (4, 3)

44 
__ölöe
 

45 
	$__bsw≠_32
 (
__bsx
)

47  
	`__buûtö_bsw≠32
 (
__bsx
);

48 
	}
}

49 #ñi‡
__GNUC__
 >= 2

50 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

51 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

52 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

53 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

54 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

55 || 
deföed
 
	g__amdÁm10__
)

58 
	#__bsw≠_32
(
x
) \

59 (
__exãnsi⁄__
 \

60 ({ 
__v
, 
__x
 = (
x
); \

61 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

62 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

64 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

65 
__v
; }))

	)

67 
	#__bsw≠_32
(
x
) \

68 (
__exãnsi⁄__
 \

69 ({ 
__v
, 
__x
 = (
x
); \

70 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

71 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

73 
	`__asm__
 ("rorw $8, %w0;" \

76 : "Ù" (
__v
) \

77 : "0" (
__x
) \

79 
__v
; }))

	)

82 
	#__bsw≠_32
(
x
) \

83 (
__exãnsi⁄__
 \

84 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

87 
__ölöe
 

88 
	$__bsw≠_32
 (
__bsx
)

90  
	`__bsw≠_c⁄°™t_32
 (
__bsx
);

91 
	}
}

95 #i‡
__GNUC_PREREQ
 (2, 0)

97 
	#__bsw≠_c⁄°™t_64
(
x
) \

98 (
	`__exãnsi⁄__
 ((((
x
) & 0xff00000000000000ull) >> 56) \

99 | (((
x
) & 0x00ff000000000000ull) >> 40) \

100 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

101 | (((
x
) & 0x000000ff00000000ull) >> 8) \

102 | (((
x
) & 0x00000000ff000000ull) << 8) \

103 | (((
x
) & 0x0000000000ff0000ull) << 24) \

104 | (((
x
) & 0x000000000000ff00ull) << 40) \

105 | (((
x
Ë& 0x00000000000000ffuŒË<< 56)))

	)

107 #i‡
__GNUC_PREREQ
 (4, 3)

108 
__ölöe
 
__uöt64_t


109 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

111  
	`__buûtö_bsw≠64
 (
__bsx
);

112 
	}
}

113 #ñi‡
__WORDSIZE
 == 64

114 
	#__bsw≠_64
(
x
) \

115 (
__exãnsi⁄__
 \

116 ({ 
__uöt64_t
 
__v
, 
__x
 = (
x
); \

117 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

118 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

120 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

121 
__v
; }))

	)

123 
	#__bsw≠_64
(
x
) \

124 (
__exãnsi⁄__
 \

125 ({ uni⁄ { 
__exãnsi⁄__
 
__uöt64_t
 
__Œ
; \

126 
__l
[2]; } 
__w
, 
__r
; \

127 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

128 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

131 
__w
.
__Œ
 = (
x
); \

132 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

133 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

135 
__r
.
__Œ
; }))

	)

138 
	#__bsw≠_c⁄°™t_64
(
x
) \

139 ((((
x
) & 0xff00000000000000ull) >> 56) \

140 | (((
x
) & 0x00ff000000000000ull) >> 40) \

141 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

142 | (((
x
) & 0x000000ff00000000ull) >> 8) \

143 | (((
x
) & 0x00000000ff000000ull) << 8) \

144 | (((
x
) & 0x0000000000ff0000ull) << 24) \

145 | (((
x
) & 0x000000000000ff00ull) << 40) \

146 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

148 
__ölöe
 
__uöt64_t


149 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

151  
	`__bsw≠_c⁄°™t_64
 (
__bsx
);

152 
	}
}

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/fcntl-linux.h

19 #i‚def 
_FCNTL_H


37 #ifde‡
__USE_GNU


38 
	~<bôs/uio.h
>

42 
	#O_ACCMODE
 0003

	)

43 
	#O_RDONLY
 00

	)

44 
	#O_WRONLY
 01

	)

45 
	#O_RDWR
 02

	)

46 #i‚de‡
O_CREAT


47 
	#O_CREAT
 0100

	)

49 #i‚de‡
O_EXCL


50 
	#O_EXCL
 0200

	)

52 #i‚de‡
O_NOCTTY


53 
	#O_NOCTTY
 0400

	)

55 #i‚de‡
O_TRUNC


56 
	#O_TRUNC
 01000

	)

58 #i‚de‡
O_APPEND


59 
	#O_APPEND
 02000

	)

61 #i‚de‡
O_NONBLOCK


62 
	#O_NONBLOCK
 04000

	)

64 #i‚de‡
O_NDELAY


65 
	#O_NDELAY
 
O_NONBLOCK


	)

67 #i‚de‡
O_SYNC


68 
	#O_SYNC
 04010000

	)

70 
	#O_FSYNC
 
O_SYNC


	)

71 #i‚de‡
O_ASYNC


72 
	#O_ASYNC
 020000

	)

74 #i‚de‡
__O_LARGEFILE


75 
	#__O_LARGEFILE
 0100000

	)

78 #i‚de‡
__O_DIRECTORY


79 
	#__O_DIRECTORY
 0200000

	)

81 #i‚de‡
__O_NOFOLLOW


82 
	#__O_NOFOLLOW
 0400000

	)

84 #i‚de‡
__O_CLOEXEC


85 
	#__O_CLOEXEC
 02000000

	)

87 #i‚de‡
__O_DIRECT


88 
	#__O_DIRECT
 040000

	)

90 #i‚de‡
__O_NOATIME


91 
	#__O_NOATIME
 01000000

	)

93 #i‚de‡
__O_PATH


94 
	#__O_PATH
 010000000

	)

96 #i‚de‡
__O_DSYNC


97 
	#__O_DSYNC
 010000

	)

99 #i‚de‡
__O_TMPFILE


100 
	#__O_TMPFILE
 (020000000 | 
__O_DIRECTORY
)

	)

103 #i‚de‡
F_GETLK


104 #i‚de‡
__USE_FILE_OFFSET64


105 
	#F_GETLK
 5

	)

106 
	#F_SETLK
 6

	)

107 
	#F_SETLKW
 7

	)

109 
	#F_GETLK
 
F_GETLK64


	)

110 
	#F_SETLK
 
F_SETLK64


	)

111 
	#F_SETLKW
 
F_SETLKW64


	)

114 #i‚de‡
F_GETLK64


115 
	#F_GETLK64
 12

	)

116 
	#F_SETLK64
 13

	)

117 
	#F_SETLKW64
 14

	)

131 #ifde‡
__USE_GNU


132 
	#F_OFD_GETLK
 36

	)

133 
	#F_OFD_SETLK
 37

	)

134 
	#F_OFD_SETLKW
 38

	)

137 #ifde‡
__USE_LARGEFILE64


138 
	#O_LARGEFILE
 
__O_LARGEFILE


	)

141 #ifde‡
__USE_XOPEN2K8


142 
	#O_DIRECTORY
 
__O_DIRECTORY


	)

143 
	#O_NOFOLLOW
 
__O_NOFOLLOW


	)

144 
	#O_CLOEXEC
 
__O_CLOEXEC


	)

147 #ifde‡
__USE_GNU


148 
	#O_DIRECT
 
__O_DIRECT


	)

149 
	#O_NOATIME
 
__O_NOATIME


	)

150 
	#O_PATH
 
__O_PATH


	)

151 
	#O_TMPFILE
 
__O_TMPFILE


	)

157 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


158 
	#O_DSYNC
 
__O_DSYNC


	)

159 #i‡
deföed
 
__O_RSYNC


160 
	#O_RSYNC
 
__O_RSYNC


	)

162 
	#O_RSYNC
 
O_SYNC


	)

167 
	#F_DUPFD
 0

	)

168 
	#F_GETFD
 1

	)

169 
	#F_SETFD
 2

	)

170 
	#F_GETFL
 3

	)

171 
	#F_SETFL
 4

	)

173 #i‚de‡
__F_SETOWN


174 
	#__F_SETOWN
 8

	)

175 
	#__F_GETOWN
 9

	)

178 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


179 
	#F_SETOWN
 
__F_SETOWN


	)

180 
	#F_GETOWN
 
__F_GETOWN


	)

183 #i‚de‡
__F_SETSIG


184 
	#__F_SETSIG
 10

	)

185 
	#__F_GETSIG
 11

	)

187 #i‚de‡
__F_SETOWN_EX


188 
	#__F_SETOWN_EX
 15

	)

189 
	#__F_GETOWN_EX
 16

	)

192 #ifde‡
__USE_GNU


193 
	#F_SETSIG
 
__F_SETSIG


	)

194 
	#F_GETSIG
 
__F_GETSIG


	)

195 
	#F_SETOWN_EX
 
__F_SETOWN_EX


	)

196 
	#F_GETOWN_EX
 
__F_GETOWN_EX


	)

199 #ifde‡
__USE_GNU


200 
	#F_SETLEASE
 1024

	)

201 
	#F_GETLEASE
 1025

	)

202 
	#F_NOTIFY
 1026

	)

203 
	#F_SETPIPE_SZ
 1031

	)

204 
	#F_GETPIPE_SZ
 1032

	)

206 #ifde‡
__USE_XOPEN2K8


207 
	#F_DUPFD_CLOEXEC
 1030

	)

212 
	#FD_CLOEXEC
 1

	)

214 #i‚de‡
F_RDLCK


216 
	#F_RDLCK
 0

	)

217 
	#F_WRLCK
 1

	)

218 
	#F_UNLCK
 2

	)

223 #i‚de‡
F_EXLCK


224 
	#F_EXLCK
 4

	)

225 
	#F_SHLCK
 8

	)

228 #ifde‡
__USE_MISC


230 
	#LOCK_SH
 1

	)

231 
	#LOCK_EX
 2

	)

232 
	#LOCK_NB
 4

	)

234 
	#LOCK_UN
 8

	)

237 #ifde‡
__USE_GNU


238 
	#LOCK_MAND
 32

	)

239 
	#LOCK_READ
 64

	)

240 
	#LOCK_WRITE
 128

	)

241 
	#LOCK_RW
 192

	)

244 #ifde‡
__USE_GNU


246 
	#DN_ACCESS
 0x00000001

	)

247 
	#DN_MODIFY
 0x00000002

	)

248 
	#DN_CREATE
 0x00000004

	)

249 
	#DN_DELETE
 0x00000008

	)

250 
	#DN_RENAME
 0x00000010

	)

251 
	#DN_ATTRIB
 0x00000020

	)

252 
	#DN_MULTISHOT
 0x80000000

	)

256 #ifde‡
__USE_GNU


258 
	e__pid_ty≥


260 
	mF_OWNER_TID
 = 0,

261 
	mF_OWNER_PID
,

262 
	mF_OWNER_PGRP
,

263 
	mF_OWNER_GID
 = 
F_OWNER_PGRP


267 
	sf_ow√r_ex


269 
__pid_ty≥
 
	mty≥
;

270 
__pid_t
 
	mpid
;

276 #ifdef 
__USE_MISC


277 
	#FAPPEND
 
O_APPEND


	)

278 
	#FFSYNC
 
O_FSYNC


	)

279 
	#FASYNC
 
O_ASYNC


	)

280 
	#FNONBLOCK
 
O_NONBLOCK


	)

281 
	#FNDELAY
 
O_NDELAY


	)

284 #i‚de‡
__POSIX_FADV_DONTNEED


285 
	#__POSIX_FADV_DONTNEED
 4

	)

286 
	#__POSIX_FADV_NOREUSE
 5

	)

289 #ifde‡
__USE_XOPEN2K


290 
	#POSIX_FADV_NORMAL
 0

	)

291 
	#POSIX_FADV_RANDOM
 1

	)

292 
	#POSIX_FADV_SEQUENTIAL
 2

	)

293 
	#POSIX_FADV_WILLNEED
 3

	)

294 
	#POSIX_FADV_DONTNEED
 
__POSIX_FADV_DONTNEED


	)

295 
	#POSIX_FADV_NOREUSE
 
__POSIX_FADV_NOREUSE


	)

299 #ifde‡
__USE_GNU


301 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

304 
	#SYNC_FILE_RANGE_WRITE
 2

	)

307 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

312 
	#SPLICE_F_MOVE
 1

	)

313 
	#SPLICE_F_NONBLOCK
 2

	)

316 
	#SPLICE_F_MORE
 4

	)

317 
	#SPLICE_F_GIFT
 8

	)

321 
	#FALLOC_FL_KEEP_SIZE
 1

	)

324 
	#FALLOC_FL_PUNCH_HOLE
 2

	)

325 
	#FALLOC_FL_COLLAPSE_RANGE
 8

	)

328 
	#FALLOC_FL_ZERO_RANGE
 16

	)

333 
	sfûe_h™dÀ


335 
	mh™dÀ_byãs
;

336 
	mh™dÀ_ty≥
;

338 
	mf_h™dÀ
[0];

342 
	#MAX_HANDLE_SZ
 128

	)

346 #ifde‡
__USE_ATFILE


347 
	#AT_FDCWD
 -100

	)

350 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

351 
	#AT_REMOVEDIR
 0x200

	)

353 
	#AT_SYMLINK_FOLLOW
 0x400

	)

354 #ifde‡
__USE_GNU


355 
	#AT_NO_AUTOMOUNT
 0x800

	)

357 
	#AT_EMPTY_PATH
 0x1000

	)

359 
	#AT_EACCESS
 0x200

	)

363 
	g__BEGIN_DECLS


365 #ifde‡
__USE_GNU


368 
ssize_t
 
	$ªadahód
 (
__fd
, 
__off64_t
 
__off£t
, 
size_t
 
__cou¡
)

369 
__THROW
;

376 
	`sync_fûe_ønge
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__cou¡
,

377 
__Êags
);

384 
ssize_t
 
	`vm•li˚
 (
__fdout
, c⁄° 
iovec
 *
__iov
,

385 
size_t
 
__cou¡
, 
__Êags
);

391 
ssize_t
 
	`•li˚
 (
__fdö
, 
__off64_t
 *
__offö
, 
__fdout
,

392 
__off64_t
 *
__offout
, 
size_t
 
__Àn
,

393 
__Êags
);

399 
ssize_t
 
	`ãe
 (
__fdö
, 
__fdout
, 
size_t
 
__Àn
,

400 
__Êags
);

406 #i‚de‡
__USE_FILE_OFFSET64


407 
	`ÁŒoˇã
 (
__fd
, 
__mode
, 
__off_t
 
__off£t
, __off_à
__Àn
);

409 #ifde‡
__REDIRECT


410 
	`__REDIRECT
 (
ÁŒoˇã
, (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

411 
__off64_t
 
__Àn
),

412 
ÁŒoˇã64
);

414 
	#ÁŒoˇã
 
ÁŒoˇã64


	)

417 #ifde‡
__USE_LARGEFILE64


418 
	`ÁŒoˇã64
 (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

419 
__off64_t
 
__Àn
);

424 
	$«me_to_h™dÀ_©
 (
__dfd
, c⁄° *
__«me
,

425 
fûe_h™dÀ
 *
__h™dÀ
, *
__m¡_id
,

426 
__Êags
Ë
__THROW
;

432 
	`›í_by_h™dÀ_©
 (
__mou¡dúfd
, 
fûe_h™dÀ
 *
__h™dÀ
,

433 
__Êags
);

437 
__END_DECLS


	@/usr/include/bits/libio-ldbl.h

19 #i‚de‡
_IO_STDIO_H


23 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

24 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/mman-linux.h

19 #i‚de‡
_SYS_MMAN_H


35 
	#PROT_READ
 0x1

	)

36 
	#PROT_WRITE
 0x2

	)

37 
	#PROT_EXEC
 0x4

	)

38 
	#PROT_NONE
 0x0

	)

39 
	#PROT_GROWSDOWN
 0x01000000

	)

41 
	#PROT_GROWSUP
 0x02000000

	)

45 
	#MAP_SHARED
 0x01

	)

46 
	#MAP_PRIVATE
 0x02

	)

47 #ifde‡
__USE_MISC


48 
	#MAP_TYPE
 0x0‡

	)

52 
	#MAP_FIXED
 0x10

	)

53 #ifde‡
__USE_MISC


54 
	#MAP_FILE
 0

	)

55 #ifde‡
__MAP_ANONYMOUS


56 
	#MAP_ANONYMOUS
 
__MAP_ANONYMOUS


	)

58 
	#MAP_ANONYMOUS
 0x20

	)

60 
	#MAP_ANON
 
MAP_ANONYMOUS


	)

62 
	#MAP_HUGE_SHIFT
 26

	)

63 
	#MAP_HUGE_MASK
 0x3f

	)

67 
	#MS_ASYNC
 1

	)

68 
	#MS_SYNC
 4

	)

69 
	#MS_INVALIDATE
 2

	)

72 #ifde‡
__USE_GNU


73 
	#MREMAP_MAYMOVE
 1

	)

74 
	#MREMAP_FIXED
 2

	)

78 #ifde‡
__USE_MISC


79 
	#MADV_NORMAL
 0

	)

80 
	#MADV_RANDOM
 1

	)

81 
	#MADV_SEQUENTIAL
 2

	)

82 
	#MADV_WILLNEED
 3

	)

83 
	#MADV_DONTNEED
 4

	)

84 
	#MADV_REMOVE
 9

	)

85 
	#MADV_DONTFORK
 10

	)

86 
	#MADV_DOFORK
 11

	)

87 
	#MADV_MERGEABLE
 12

	)

88 
	#MADV_UNMERGEABLE
 13

	)

89 
	#MADV_HUGEPAGE
 14

	)

90 
	#MADV_NOHUGEPAGE
 15

	)

91 
	#MADV_DONTDUMP
 16

	)

93 
	#MADV_DODUMP
 17

	)

94 
	#MADV_HWPOISON
 100

	)

98 #ifde‡
__USE_XOPEN2K


99 
	#POSIX_MADV_NORMAL
 0

	)

100 
	#POSIX_MADV_RANDOM
 1

	)

101 
	#POSIX_MADV_SEQUENTIAL
 2

	)

102 
	#POSIX_MADV_WILLNEED
 3

	)

103 
	#POSIX_MADV_DONTNEED
 4

	)

107 #i‚de‡
MCL_CURRENT


108 
	#MCL_CURRENT
 1

	)

109 
	#MCL_FUTURE
 2

	)

111 
	#MCL_ONFAULT
 4

	)

	@/usr/include/bits/select.h

18 #i‚de‡
_SYS_SELECT_H


22 
	~<bôs/w‹dsize.h
>

25 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

27 #i‡
__WORDSIZE
 == 64

28 
	#__FD_ZERO_STOS
 "°osq"

	)

30 
	#__FD_ZERO_STOS
 "°o¶"

	)

33 
	#__FD_ZERO
(
fd•
) \

35 
__d0
, 
__d1
; \

36 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

37 : "=c" (
__d0
), "=D" (
__d1
) \

38 : "a" (0), "0" ( (
fd_£t
) \

39 /  (
__fd_mask
)), \

40 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

42 } 0)

	)

48 
	#__FD_ZERO
(
£t
) \

50 
__i
; \

51 
fd_£t
 *
__¨r
 = (
£t
); \

52 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

53 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

54 } 0)

	)

58 
	#__FD_SET
(
d
, 
£t
) \

59 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] |
	`__FD_MASK
 (d)))

	)

60 
	#__FD_CLR
(
d
, 
£t
) \

61 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] &~
	`__FD_MASK
 (d)))

	)

62 
	#__FD_ISSET
(
d
, 
£t
) \

63 ((
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] & 
	`__FD_MASK
 (d)Ë!0)

	)

	@/usr/include/bits/select2.h

19 #i‚de‡
_SYS_SELECT_H


24 
__fdñt_chk
 (
__d
);

25 
	$__fdñt_w¨n
 (
__d
)

26 
	`__w¨«âr
 ("bit outside of fd_set selected");

27 #unde‡
__FD_ELT


28 
	#__FD_ELT
(
d
) \

29 
__exãnsi⁄__
 \

30 ({ 
__d
 = (
d
); \

31 (
	`__buûtö_c⁄°™t_p
 (
__d
) \

32 ? (0 <
__d
 && __d < 
__FD_SETSIZE
 \

33 ? (
__d
 / 
__NFDBITS
) \

34 : 
	`__fdñt_w¨n
 (
__d
)) \

35 : 
	`__fdñt_chk
 (
__d
)); 
	}
})

	)

	@/usr/include/bits/sigset.h

19 #i‚def 
_SIGSET_H_ty≥s


20 
	#_SIGSET_H_ty≥s
 1

	)

22 
	t__sig_©omic_t
;

26 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

29 
	m__vÆ
[
_SIGSET_NWORDS
];

30 } 
	t__sig£t_t
;

41 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


42 
	#_SIGSET_H_‚s
 1

	)

44 #i‚de‡
_EXTERN_INLINE


45 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

49 
	#__sigmask
(
sig
) \

50 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

53 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

55 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

56 
	#__sigem±y£t
(
£t
) \

57 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

58 
sig£t_t
 *
__£t
 = (
£t
); \

59 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

60 0; }))

	)

61 
	#__sigfûl£t
(
£t
) \

62 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

63 
sig£t_t
 *
__£t
 = (
£t
); \

64 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

65 0; }))

	)

67 #ifde‡
__USE_GNU


71 
	#__sigi£m±y£t
(
£t
) \

72 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

73 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

74 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

75 !
__ªt
 && --
__˙t
 >= 0) \

76 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

77 
__ªt
 =0; }))

	)

78 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

79 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

80 
sig£t_t
 *
__de°
 = (
de°
); \

81 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

82 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

83 --
__˙t
 >= 0) \

84 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

85 & 
__right
->
__vÆ
[
__˙t
]); \

86 0; }))

	)

87 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

88 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

89 
sig£t_t
 *
__de°
 = (
de°
); \

90 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

91 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

92 --
__˙t
 >= 0) \

93 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

94 | 
__right
->
__vÆ
[
__˙t
]); \

95 0; }))

	)

102 
__sigismembî
 (c⁄° 
__sig£t_t
 *, );

103 
__sigadd£t
 (
__sig£t_t
 *, );

104 
__sigdñ£t
 (
__sig£t_t
 *, );

106 #ifde‡
__USE_EXTERN_INLINES


107 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

108 
_EXTERN_INLINE
 \

109 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

111 
__mask
 = 
	`__sigmask
 (
__sig
); \

112 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

113  
BODY
; \

114 }

	)

116 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
) ? 1 : 0, const)

117 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

118 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

120 #unde‡
__SIGSETFN


	@/usr/include/bits/timex.h

18 #i‚def 
_BITS_TIMEX_H


19 
	#_BITS_TIMEX_H
 1

	)

21 
	~<bôs/ty≥s.h
>

25 
	stimex


27 
	mmodes
;

28 
__sysˇŒ_¶⁄g_t
 
	moff£t
;

29 
__sysˇŒ_¶⁄g_t
 
	m‰eq
;

30 
__sysˇŒ_¶⁄g_t
 
	mmaxîr‹
;

31 
__sysˇŒ_¶⁄g_t
 
	me°îr‹
;

32 
	m°©us
;

33 
__sysˇŒ_¶⁄g_t
 
	mc⁄°™t
;

34 
__sysˇŒ_¶⁄g_t
 
	m¥ecisi⁄
;

35 
__sysˇŒ_¶⁄g_t
 
	mtﬁî™˚
;

36 
timevÆ
 
	mtime
;

37 
__sysˇŒ_¶⁄g_t
 
	mtick
;

38 
__sysˇŒ_¶⁄g_t
 
	mµs‰eq
;

39 
__sysˇŒ_¶⁄g_t
 
	mjôãr
;

40 
	mshi·
;

41 
__sysˇŒ_¶⁄g_t
 
	m°abû
;

42 
__sysˇŒ_¶⁄g_t
 
	mjô˙t
;

43 
__sysˇŒ_¶⁄g_t
 
	mˇl˙t
;

44 
__sysˇŒ_¶⁄g_t
 
	mîr˙t
;

45 
__sysˇŒ_¶⁄g_t
 
	m°b˙t
;

47 
	mèi
;

56 
	#ADJ_OFFSET
 0x0001

	)

57 
	#ADJ_FREQUENCY
 0x0002

	)

58 
	#ADJ_MAXERROR
 0x0004

	)

59 
	#ADJ_ESTERROR
 0x0008

	)

60 
	#ADJ_STATUS
 0x0010

	)

61 
	#ADJ_TIMECONST
 0x0020

	)

62 
	#ADJ_TAI
 0x0080

	)

63 
	#ADJ_SETOFFSET
 0x0100

	)

64 
	#ADJ_MICRO
 0x1000

	)

65 
	#ADJ_NANO
 0x2000

	)

66 
	#ADJ_TICK
 0x4000

	)

67 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

68 
	#ADJ_OFFSET_SS_READ
 0xa001

	)

71 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

72 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

73 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

74 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

75 
	#MOD_STATUS
 
ADJ_STATUS


	)

76 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

77 
	#MOD_CLKB
 
ADJ_TICK


	)

78 
	#MOD_CLKA
 
ADJ_OFFSET_SINGLESHOT


	)

79 
	#MOD_TAI
 
ADJ_TAI


	)

80 
	#MOD_MICRO
 
ADJ_MICRO


	)

81 
	#MOD_NANO
 
ADJ_NANO


	)

85 
	#STA_PLL
 0x0001

	)

86 
	#STA_PPSFREQ
 0x0002

	)

87 
	#STA_PPSTIME
 0x0004

	)

88 
	#STA_FLL
 0x0008

	)

90 
	#STA_INS
 0x0010

	)

91 
	#STA_DEL
 0x0020

	)

92 
	#STA_UNSYNC
 0x0040

	)

93 
	#STA_FREQHOLD
 0x0080

	)

95 
	#STA_PPSSIGNAL
 0x0100

	)

96 
	#STA_PPSJITTER
 0x0200

	)

97 
	#STA_PPSWANDER
 0x0400

	)

98 
	#STA_PPSERROR
 0x0800

	)

100 
	#STA_CLOCKERR
 0x1000

	)

101 
	#STA_NANO
 0x2000

	)

102 
	#STA_MODE
 0x4000

	)

103 
	#STA_CLK
 0x8000

	)

106 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 | \

107 
STA_PPSERROR
 | 
STA_CLOCKERR
 | 
STA_NANO
 | 
STA_MODE
 | 
STA_CLK
)

	)

	@/usr/include/bits/typesizes.h

19 #i‚de‡
_BITS_TYPES_H


23 #i‚def 
_BITS_TYPESIZES_H


24 
	#_BITS_TYPESIZES_H
 1

	)

30 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


31 
	#__SYSCALL_SLONG_TYPE
 
__SQUAD_TYPE


	)

32 
	#__SYSCALL_ULONG_TYPE
 
__UQUAD_TYPE


	)

34 
	#__SYSCALL_SLONG_TYPE
 
__SLONGWORD_TYPE


	)

35 
	#__SYSCALL_ULONG_TYPE
 
__ULONGWORD_TYPE


	)

38 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

39 
	#__UID_T_TYPE
 
__U32_TYPE


	)

40 
	#__GID_T_TYPE
 
__U32_TYPE


	)

41 
	#__INO_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

42 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

43 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

44 #ifde‡
__x86_64__


45 
	#__NLINK_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

46 
	#__FSWORD_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

48 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

49 
	#__FSWORD_T_TYPE
 
__SWORD_TYPE


	)

51 
	#__OFF_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

52 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

53 
	#__PID_T_TYPE
 
__S32_TYPE


	)

54 
	#__RLIM_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

55 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

56 
	#__BLKCNT_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

57 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

58 
	#__FSBLKCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

59 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

60 
	#__FSFILCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

61 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

62 
	#__ID_T_TYPE
 
__U32_TYPE


	)

63 
	#__CLOCK_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

64 
	#__TIME_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

65 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

66 
	#__SUSECONDS_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

67 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

68 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

69 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

70 
	#__TIMER_T_TYPE
 *

	)

71 
	#__BLKSIZE_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

72 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

73 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

74 
	#__CPU_MASK_TYPE
 
__SYSCALL_ULONG_TYPE


	)

76 #ifde‡
__x86_64__


80 
	#__OFF_T_MATCHES_OFF64_T
 1

	)

83 
	#__INO_T_MATCHES_INO64_T
 1

	)

87 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

104 
__BEGIN_NAMESPACE_STD


110 
__ex˘y≥
 (
iß um
);

111 
__ex˘y≥
 (
ißÕha
);

112 
__ex˘y≥
 (
is˙ål
);

113 
__ex˘y≥
 (
isdigô
);

114 
__ex˘y≥
 (
i¶owî
);

115 
__ex˘y≥
 (
isgøph
);

116 
__ex˘y≥
 (
i•röt
);

117 
__ex˘y≥
 (
i•un˘
);

118 
__ex˘y≥
 (
is•a˚
);

119 
__ex˘y≥
 (
isuµî
);

120 
__ex˘y≥
 (
isxdigô
);

124 
	$tﬁowî
 (
__c
Ë
__THROW
;

127 
	$touµî
 (
__c
Ë
__THROW
;

129 
__END_NAMESPACE_STD


133 #ifdef 
__USE_ISOC99


134 
__BEGIN_NAMESPACE_C99


136 
	`__ex˘y≥
 (
isbœnk
);

138 
__END_NAMESPACE_C99


141 #ifde‡
__USE_GNU


143 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

146 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


150 
	$ißscii
 (
__c
Ë
__THROW
;

154 
	$tﬂscii
 (
__c
Ë
__THROW
;

158 
	`__ex˘y≥
 (
_touµî
);

159 
	`__ex˘y≥
 (
_tﬁowî
);

163 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

164 (
__exãnsi⁄__
 \

165 ({ 
__ªs
; \

166 i‡( (
c
) > 1) \

168 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

170 
__c
 = (
c
); \

171 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

174 
__ªs
 = 
f
 
¨gs
; \

177 
__ªs
 = (
a
)[(Ë(
c
)]; \

178 
__ªs
; 
	}
}))

	)

180 #i‡!
deföed
 
__NO_CTYPE


181 #ifde‡
__is˘y≥_f


182 
	$__is˘y≥_f
 (
Ænum
)

183 
	$__is˘y≥_f
 (
Æpha
)

184 
	$__is˘y≥_f
 (
˙ål
)

185 
	$__is˘y≥_f
 (
digô
)

186 
	$__is˘y≥_f
 (
lowî
)

187 
	$__is˘y≥_f
 (
gøph
)

188 
	$__is˘y≥_f
 (
¥öt
)

189 
	$__is˘y≥_f
 (
pun˘
)

190 
	$__is˘y≥_f
 (
•a˚
)

191 
	$__is˘y≥_f
 (
uµî
)

192 
	$__is˘y≥_f
 (
xdigô
)

193 #ifde‡
__USE_ISOC99


194 
	$__is˘y≥_f
 (
bœnk
)

196 #ñi‡
deföed
 
__is˘y≥


197 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

198 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

199 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

200 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

201 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

202 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

203 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

204 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

205 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

206 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

207 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

208 #ifde‡
__USE_ISOC99


209 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

213 #ifde‡
__USE_EXTERN_INLINES


214 
__exã∫_ölöe
 

215 
	`__NTH
 (
	$tﬁowî
 (
__c
))

217  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

218 
	}
}

220 
__exã∫_ölöe
 

221 
__NTH
 (
	$touµî
 (
__c
))

223  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

224 
	}
}

227 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


228 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

229 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

232 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


233 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

234 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

236 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

237 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

243 #ifde‡
__USE_XOPEN2K8


257 
	~<xloˇÀ.h
>

261 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

262 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

264 
	#__ex˘y≥_l
(
«me
) \

265 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

271 
__ex˘y≥_l
 (
iß um_l
);

272 
__ex˘y≥_l
 (
ißÕha_l
);

273 
__ex˘y≥_l
 (
is˙ål_l
);

274 
__ex˘y≥_l
 (
isdigô_l
);

275 
__ex˘y≥_l
 (
i¶owî_l
);

276 
__ex˘y≥_l
 (
isgøph_l
);

277 
__ex˘y≥_l
 (
i•röt_l
);

278 
__ex˘y≥_l
 (
i•un˘_l
);

279 
__ex˘y≥_l
 (
is•a˚_l
);

280 
__ex˘y≥_l
 (
isuµî_l
);

281 
__ex˘y≥_l
 (
isxdigô_l
);

283 
__ex˘y≥_l
 (
isbœnk_l
);

287 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

288 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

291 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


295 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

296 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

297 
	#__touµî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

299 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

300 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

304 #i‚de‡
__NO_CTYPE


305 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

306 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

307 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

308 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

309 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

310 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

311 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

312 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

313 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

314 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

315 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

317 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

319 #ifde‡
__USE_MISC


320 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

321 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

324 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

325 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

326 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

327 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

328 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

329 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

330 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

331 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

332 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

333 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

334 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

336 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

338 #ifde‡
__USE_MISC


339 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

340 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

347 
__END_DECLS


	@/usr/include/gnu/stubs.h

6 #i‡!
deföed
 
__x86_64__


7 
	~<gnu/°ubs-32.h
>

9 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


10 
	~<gnu/°ubs-64.h
>

12 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


13 
	~<gnu/°ubs-x32.h
>

	@/usr/include/linux/errno.h

1 
	~<asm/î∫o.h
>

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 #ifde‡
__CHECK_ENDIAN__


22 
	#__bôwi£
 
__bôwi£__


	)

24 
	#__bôwi£


	)

27 
__u16
 
	t__bôwi£
 
	t__À16
;

28 
__u16
 
	t__bôwi£
 
	t__be16
;

29 
__u32
 
	t__bôwi£
 
	t__À32
;

30 
__u32
 
	t__bôwi£
 
	t__be32
;

31 
__u64
 
	t__bôwi£
 
	t__À64
;

32 
__u64
 
	t__bôwi£
 
	t__be64
;

34 
__u16
 
	t__bôwi£
 
	t__sum16
;

35 
__u32
 
	t__bôwi£
 
	t__wsum
;

46 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

47 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

48 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

55 
	#__STDC_ISO_10646__
 201505L

	)

58 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/asm/types.h

1 
	~<asm-gíîic/ty≥s.h
>

	@/usr/include/bits/byteswap-16.h

19 #i‚de‡
_BITS_BYTESWAP_H


23 #ifde‡
__GNUC__


24 #i‡
__GNUC__
 >= 2

25 
	#__bsw≠_16
(
x
) \

26 (
__exãnsi⁄__
 \

27 ({ 
__v
, 
__x
 = (Ë(
x
); \

28 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

29 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

31 
	`__asm__
 ("rorw $8, %w0" \

32 : "Ù" (
__v
) \

33 : "0" (
__x
) \

35 
__v
; }))

	)

38 
	#__bsw≠_16
(
x
) \

39 (
__exãnsi⁄__
 \

40 ({ 
__x
 = (Ë(
x
); \

41 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

44 
__ölöe
 

45 
	$__bsw≠_16
 (
__bsx
)

47  
	`__bsw≠_c⁄°™t_16
 (
__bsx
);

48 
	}
}

	@/usr/include/bits/uio.h

18 #i‡!
deföed
 
_SYS_UIO_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_UIO_H


23 
	#_BITS_UIO_H
 1

	)

25 
	~<sys/ty≥s.h
>

39 
	#UIO_MAXIOV
 1024

	)

43 
	siovec


45 *
	miov_ba£
;

46 
size_t
 
	miov_Àn
;

52 #ifde‡
__USE_GNU


53 #i‡
deföed
 
_SYS_UIO_H
 && !deföed 
_BITS_UIO_H_FOR_SYS_UIO_H


54 
	#_BITS_UIO_H_FOR_SYS_UIO_H
 1

	)

56 
__BEGIN_DECLS


59 
ssize_t
 
	$¥o˚ss_vm_ªadv
 (
pid_t
 
__pid
, c⁄° 
iovec
 *
__lvec
,

60 
__liov˙t
,

61 c⁄° 
iovec
 *
__rvec
,

62 
__riov˙t
,

63 
__Êags
)

64 
__THROW
;

67 
ssize_t
 
	$¥o˚ss_vm_wrôev
 (
pid_t
 
__pid
, c⁄° 
iovec
 *
__lvec
,

68 
__liov˙t
,

69 c⁄° 
iovec
 *
__rvec
,

70 
__riov˙t
,

71 
__Êags
)

72 
__THROW
;

74 
__END_DECLS


	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	#__√ed_mb°©e_t


	)

27 
	#__√ed_wöt_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004,

60 
	m__GCONV_TRANSLIT
 = 0x0008

65 
	g__gc⁄v_°ï
;

66 
	g__gc⁄v_°ï_d©a
;

67 
	g__gc⁄v_lﬂded_obje˘
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 
	s__gc⁄v_°ï


86 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

87 c⁄° *
__mod«me
;

89 
__cou¡î
;

91 *
__‰om_«me
;

92 *
__to_«me
;

94 
__gc⁄v_f˘
 
__f˘
;

95 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

96 
__gc⁄v_öô_f˘
 
__öô_f˘
;

97 
__gc⁄v_íd_f˘
 
__íd_f˘
;

101 
__mö_√eded_‰om
;

102 
__max_√eded_‰om
;

103 
__mö_√eded_to
;

104 
__max_√eded_to
;

107 
__°©eful
;

109 *
__d©a
;

114 
	s__gc⁄v_°ï_d©a


116 *
__outbuf
;

117 *
__outbu„nd
;

121 
__Êags
;

125 
__övoˇti⁄_cou¡î
;

129 
__öã∫Æ_u£
;

131 
__mb°©e_t
 *
__°©ï
;

132 
__mb°©e_t
 
__°©e
;

138 
	s__gc⁄v_öfo


140 
size_t
 
__n°ïs
;

141 
__gc⁄v_°ï
 *
__°ïs
;

142 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

143 } *
	t__gc⁄v_t
;

146 
	`__gc⁄v_å™¶ôî©e
 (
__gc⁄v_°ï
 *
°ï
,

147 
__gc⁄v_°ï_d©a
 *
°ï_d©a
,

148 c⁄° *
öbuf°¨t
,

149 c⁄° **
öbuÂ
,

150 c⁄° *
öbu„nd
,

151 **
outbuf°¨t
,

152 
size_t
 *
úªvîsibÀ
);

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_chÊags


	)

11 
	#__°ub_Áâach


	)

12 
	#__°ub_fchÊags


	)

13 
	#__°ub_fdëach


	)

14 
	#__°ub_gây


	)

15 
	#__°ub_lchmod


	)

16 
	#__°ub_ªvoke


	)

17 
	#__°ub_£éogö


	)

18 
	#__°ub_sigªtu∫


	)

19 
	#__°ub_s°k


	)

20 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___com∑t_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-x32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___com∑t_bdÊush


	)

11 
	#__°ub___com∑t_¸óã_moduÀ


	)

12 
	#__°ub___com∑t_gë_kî√l_syms


	)

13 
	#__°ub___com∑t_quîy_moduÀ


	)

14 
	#__°ub___com∑t_u£lib


	)

15 
	#__°ub_chÊags


	)

16 
	#__°ub_Áâach


	)

17 
	#__°ub_fchÊags


	)

18 
	#__°ub_fdëach


	)

19 
	#__°ub_gëmsg


	)

20 
	#__°ub_gây


	)

21 
	#__°ub_lchmod


	)

22 
	#__°ub_nfs£rv˘l


	)

23 
	#__°ub_putmsg


	)

24 
	#__°ub_ªvoke


	)

25 
	#__°ub_£éogö


	)

26 
	#__°ub_sigªtu∫


	)

27 
	#__°ub_s°k


	)

28 
	#__°ub_°ty


	)

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__FD_SETSIZE


22 
	#__FD_SETSIZE
 1024

	)

25 
	mfds_bôs
[
__FD_SETSIZE
 / (8 * ())];

26 } 
	t__kî√l_fd_£t
;

29 (*
	t__kî√l_sigh™dÀr_t
)();

32 
	t__kî√l_key_t
;

33 
	t__kî√l_mqd_t
;

35 
	~<asm/posix_ty≥s.h
>

	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


25 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


26 
	#_WCHAR_H
 1

	)

27 
	~<„©uªs.h
>

30 #ifde‡
_WCHAR_H


32 
	#__√ed___FILE


	)

33 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_FILE


	)

36 
	~<°dio.h
>

38 
	#__√ed___va_li°


	)

39 
	~<°d¨g.h
>

41 
	~<bôs/wch¨.h
>

44 
	#__√ed_size_t


	)

45 
	#__√ed_wch¨_t


	)

46 
	#__√ed_NULL


	)

48 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


49 #unde‡
__√ed_wöt_t


50 
	#__√ed_wöt_t


	)

51 
	~<°ddef.h
>

55 #i‚de‡
_WINT_T


60 
	#_WINT_T


	)

61 
	twöt_t
;

65 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
deföed
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 
__WINT_TYPE__
 
	twöt_t
;

69 
	g__END_NAMESPACE_STD


74 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

75 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
____mb°©e_t_deföed


80 
	#____mb°©e_t_deföed
 1

	)

84 
	m__cou¡
;

87 #ifde‡
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wöt_t
 
	m__wch
;

92 
	m__wchb
[4];

93 } 
	m__vÆue
;

94 } 
	t__mb°©e_t
;

96 #unde‡
__√ed_mb°©e_t


101 #ifde‡
_WCHAR_H


103 #i‚de‡
__mb°©e_t_deföed


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 
	#__mb°©e_t_deföed
 1

	)

111 #ifde‡
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

115 #i‚de‡
WCHAR_MIN


117 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #i‚de‡
WEOF


122 
	#WEOF
 (0xffffffffu)

	)

127 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


128 
	~<w˘y≥.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

149 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

152 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

154 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

157 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

158 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

159 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

161 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

162 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

163 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

166 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

167 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

169 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

170 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

171 
__END_NAMESPACE_STD


173 #ifde‡
__USE_XOPEN2K8


175 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

178 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

179 
size_t
 
__n
Ë
__THROW
;

183 
	~<xloˇÀ.h
>

185 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

186 
__loˇÀ_t
 
__loc
Ë
__THROW
;

188 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

189 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

192 
__BEGIN_NAMESPACE_STD


195 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

199 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

200 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

201 
__END_NAMESPACE_STD


203 #ifde‡
__USE_XOPEN2K8


209 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

210 
__loˇÀ_t
 
__loc
Ë
__THROW
;

215 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

216 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

219 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

222 
__BEGIN_NAMESPACE_STD


224 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


225 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

226 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

227 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

228 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

230 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

231 
__THROW
 
__©åibuã_puª__
;

234 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


235 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

236 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

237 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

238 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

240 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

241 
__THROW
 
__©åibuã_puª__
;

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_GNU


248 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

249 
__THROW
 
__©åibuã_puª__
;

252 
__BEGIN_NAMESPACE_STD


255 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

256 
__THROW
 
__©åibuã_puª__
;

259 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

260 
__THROW
 
__©åibuã_puª__
;

262 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


263 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

265 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

266 c⁄° 
wch¨_t
 *
__ac˚±
)

267 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

269 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

270 
__THROW
 
__©åibuã_puª__
;

273 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


274 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

276 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

277 c⁄° 
wch¨_t
 *
__√edÀ
)

278 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

280 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

281 
__THROW
 
__©åibuã_puª__
;

285 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

286 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

287 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

290 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

291 
__END_NAMESPACE_STD


293 #ifde‡
__USE_XOPEN


295 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


296 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

298 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

299 c⁄° 
wch¨_t
 *
__√edÀ
)

300 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

302 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

303 
__THROW
 
__©åibuã_puª__
;

307 #ifde‡
__USE_XOPEN2K8


309 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

310 
__THROW
 
__©åibuã_puª__
;

314 
__BEGIN_NAMESPACE_STD


316 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


317 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

319 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

320 
size_t
 
__n
)

321 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

323 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

324 
__THROW
 
__©åibuã_puª__
;

328 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

329 
__THROW
 
__©åibuã_puª__
;

332 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

333 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

337 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

338 
__THROW
;

341 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

342 
__END_NAMESPACE_STD


344 #ifde‡
__USE_GNU


347 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

348 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

349 
__THROW
;

353 
__BEGIN_NAMESPACE_STD


356 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

360 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

364 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

368 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

369 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

370 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

373 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

374 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

377 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

378 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

379 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

380 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

381 
__END_NAMESPACE_STD


383 #ifde‡
__USE_EXTERN_INLINES


389 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

390 
__exã∫_ölöe
 
wöt_t


391 
	`__NTH
 (
	$btowc
 (
__c
))

392 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

393 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

395 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

396 
__exã∫_ölöe
 

397 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

398 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

399 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

401 
__exã∫_ölöe
 
size_t


402 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

403 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

404 {  (
__ps
 !
NULL


405 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

408 
__BEGIN_NAMESPACE_STD


411 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

412 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

413 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

417 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

418 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

419 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

420 
__END_NAMESPACE_STD


423 #ifdef 
__USE_XOPEN2K8


426 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

427 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

428 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

432 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

433 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

434 
size_t
 
__nwc
, size_à
__Àn
,

435 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

440 #ifde‡
__USE_XOPEN


442 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

446 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

450 
__BEGIN_NAMESPACE_STD


453 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

454 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

455 
__END_NAMESPACE_STD


457 #ifde‡
__USE_ISOC99


458 
__BEGIN_NAMESPACE_C99


460 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

461 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

462 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

463 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

464 
__END_NAMESPACE_C99


468 
__BEGIN_NAMESPACE_STD


471 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

472 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

476 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

477 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

478 
__THROW
;

479 
__END_NAMESPACE_STD


481 #ifde‡
__USE_ISOC99


482 
__BEGIN_NAMESPACE_C99


485 
__exãnsi⁄__


486 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

487 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

488 
__THROW
;

492 
__exãnsi⁄__


493 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

494 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

495 
__ba£
Ë
__THROW
;

496 
__END_NAMESPACE_C99


499 #ifde‡
__USE_GNU


502 
__exãnsi⁄__


503 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

504 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

505 
__THROW
;

509 
__exãnsi⁄__


510 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

511 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

512 
__ba£
Ë
__THROW
;

515 #ifde‡
__USE_GNU


529 
	~<xloˇÀ.h
>

533 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

534 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

535 
__loˇÀ_t
 
__loc
Ë
__THROW
;

537 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

538 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

539 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

541 
__exãnsi⁄__


542 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

543 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

544 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

546 
__exãnsi⁄__


547 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

548 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

549 
__ba£
, 
__loˇÀ_t
 
__loc
)

550 
__THROW
;

552 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

553 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

554 
__THROW
;

556 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

557 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

558 
__THROW
;

560 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

561 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

562 
__loˇÀ_t
 
__loc
Ë
__THROW
;

566 #ifde‡
__USE_XOPEN2K8


569 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

570 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

574 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

575 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

576 
__THROW
;

583 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

586 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


587 
__BEGIN_NAMESPACE_STD


590 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

597 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

598 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

607 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

608 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

609 
__THROW
 ;

615 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

616 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

617 
__gnuc_va_li°
 
__¨g
)

623 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

624 
__gnuc_va_li°
 
__¨g
)

628 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

629 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

630 
__gnuc_va_li°
 
__¨g
)

631 
__THROW
 ;

638 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

639 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

648 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

649 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

650 
__THROW
 ;

652 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

653 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

654 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

655 #ifde‡
__REDIRECT


659 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

660 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

661 
__isoc99_fwsˇnf
)

663 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

664 
__isoc99_wsˇnf
)

666 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

667 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

668 ...), 
__isoc99_swsˇnf
)

671 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

672 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

673 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

674 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

675 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

676 
__THROW
;

677 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

678 
	#wsˇnf
 
__isoc99_wsˇnf


	)

679 
	#swsˇnf
 
__isoc99_swsˇnf


	)

683 
__END_NAMESPACE_STD


686 #ifde‡
__USE_ISOC99


687 
__BEGIN_NAMESPACE_C99


692 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

693 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

694 
__gnuc_va_li°
 
__¨g
)

700 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

701 
__gnuc_va_li°
 
__¨g
)

704 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

705 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

706 
__gnuc_va_li°
 
__¨g
)

707 
__THROW
 ;

709 #i‡!
deföed
 
__USE_GNU
 \

710 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

711 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

712 #ifde‡
__REDIRECT


713 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

714 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

715 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

717 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

718 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

720 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

721 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

722 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

725 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

726 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

727 
__gnuc_va_li°
 
__¨g
);

728 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

729 
__gnuc_va_li°
 
__¨g
);

730 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

731 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

732 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

733 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

734 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

735 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

739 
__END_NAMESPACE_C99


743 
__BEGIN_NAMESPACE_STD


748 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

749 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

755 
wöt_t
 
	`gëwch¨
 ();

762 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

763 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

769 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

777 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

778 
__FILE
 *
__ª°ri˘
 
__°ªam
);

784 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

785 
__FILE
 *
__ª°ri˘
 
__°ªam
);

792 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

793 
__END_NAMESPACE_STD


796 #ifde‡
__USE_GNU


804 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

805 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

813 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

821 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

830 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

831 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

840 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

841 
__FILE
 *
__ª°ri˘
 
__°ªam
);

849 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

850 
__FILE
 *
__ª°ri˘
 
__°ªam
);

854 
__BEGIN_NAMESPACE_C99


858 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

859 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

860 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

861 
__END_NAMESPACE_C99


863 #ifde‡
__USE_GNU


864 
	~<xloˇÀ.h
>

868 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

869 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

870 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

871 
__loˇÀ_t
 
__loc
Ë
__THROW
;

880 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


881 
	#__√ed_iswxxx


	)

882 
	~<w˘y≥.h
>

886 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


887 
	~<bôs/wch¨2.h
>

890 #ifde‡
__LDBL_COMPAT


891 
	~<bôs/wch¨-ldbl.h
>

894 
__END_DECLS


902 #unde‡
__√ed_mb°©e_t


903 #unde‡
__√ed_wöt_t


	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

17 
	#ENOSYS
 38

	)

19 
	#ENOTEMPTY
 39

	)

20 
	#ELOOP
 40

	)

21 
	#EWOULDBLOCK
 
EAGAIN


	)

22 
	#ENOMSG
 42

	)

23 
	#EIDRM
 43

	)

24 
	#ECHRNG
 44

	)

25 
	#EL2NSYNC
 45

	)

26 
	#EL3HLT
 46

	)

27 
	#EL3RST
 47

	)

28 
	#ELNRNG
 48

	)

29 
	#EUNATCH
 49

	)

30 
	#ENOCSI
 50

	)

31 
	#EL2HLT
 51

	)

32 
	#EBADE
 52

	)

33 
	#EBADR
 53

	)

34 
	#EXFULL
 54

	)

35 
	#ENOANO
 55

	)

36 
	#EBADRQC
 56

	)

37 
	#EBADSLT
 57

	)

39 
	#EDEADLOCK
 
EDEADLK


	)

41 
	#EBFONT
 59

	)

42 
	#ENOSTR
 60

	)

43 
	#ENODATA
 61

	)

44 
	#ETIME
 62

	)

45 
	#ENOSR
 63

	)

46 
	#ENONET
 64

	)

47 
	#ENOPKG
 65

	)

48 
	#EREMOTE
 66

	)

49 
	#ENOLINK
 67

	)

50 
	#EADV
 68

	)

51 
	#ESRMNT
 69

	)

52 
	#ECOMM
 70

	)

53 
	#EPROTO
 71

	)

54 
	#EMULTIHOP
 72

	)

55 
	#EDOTDOT
 73

	)

56 
	#EBADMSG
 74

	)

57 
	#EOVERFLOW
 75

	)

58 
	#ENOTUNIQ
 76

	)

59 
	#EBADFD
 77

	)

60 
	#EREMCHG
 78

	)

61 
	#ELIBACC
 79

	)

62 
	#ELIBBAD
 80

	)

63 
	#ELIBSCN
 81

	)

64 
	#ELIBMAX
 82

	)

65 
	#ELIBEXEC
 83

	)

66 
	#EILSEQ
 84

	)

67 
	#ERESTART
 85

	)

68 
	#ESTRPIPE
 86

	)

69 
	#EUSERS
 87

	)

70 
	#ENOTSOCK
 88

	)

71 
	#EDESTADDRREQ
 89

	)

72 
	#EMSGSIZE
 90

	)

73 
	#EPROTOTYPE
 91

	)

74 
	#ENOPROTOOPT
 92

	)

75 
	#EPROTONOSUPPORT
 93

	)

76 
	#ESOCKTNOSUPPORT
 94

	)

77 
	#EOPNOTSUPP
 95

	)

78 
	#EPFNOSUPPORT
 96

	)

79 
	#EAFNOSUPPORT
 97

	)

80 
	#EADDRINUSE
 98

	)

81 
	#EADDRNOTAVAIL
 99

	)

82 
	#ENETDOWN
 100

	)

83 
	#ENETUNREACH
 101

	)

84 
	#ENETRESET
 102

	)

85 
	#ECONNABORTED
 103

	)

86 
	#ECONNRESET
 104

	)

87 
	#ENOBUFS
 105

	)

88 
	#EISCONN
 106

	)

89 
	#ENOTCONN
 107

	)

90 
	#ESHUTDOWN
 108

	)

91 
	#ETOOMANYREFS
 109

	)

92 
	#ETIMEDOUT
 110

	)

93 
	#ECONNREFUSED
 111

	)

94 
	#EHOSTDOWN
 112

	)

95 
	#EHOSTUNREACH
 113

	)

96 
	#EALREADY
 114

	)

97 
	#EINPROGRESS
 115

	)

98 
	#ESTALE
 116

	)

99 
	#EUCLEAN
 117

	)

100 
	#ENOTNAM
 118

	)

101 
	#ENAVAIL
 119

	)

102 
	#EISNAM
 120

	)

103 
	#EREMOTEIO
 121

	)

104 
	#EDQUOT
 122

	)

106 
	#ENOMEDIUM
 123

	)

107 
	#EMEDIUMTYPE
 124

	)

108 
	#ECANCELED
 125

	)

109 
	#ENOKEY
 126

	)

110 
	#EKEYEXPIRED
 127

	)

111 
	#EKEYREVOKED
 128

	)

112 
	#EKEYREJECTED
 129

	)

115 
	#EOWNERDEAD
 130

	)

116 
	#ENOTRECOVERABLE
 131

	)

118 
	#ERFKILL
 132

	)

120 
	#EHWPOISON
 133

	)

	@/usr/include/asm-generic/types.h

1 #i‚de‡
_ASM_GENERIC_TYPES_H


2 
	#_ASM_GENERIC_TYPES_H


	)

6 
	~<asm-gíîic/öt-Œ64.h
>

	@/usr/include/asm/posix_types.h

1 
	~<asm-gíîic/posix_ty≥s.h
>

	@/usr/include/bits/wchar-ldbl.h

19 #i‚de‡
_WCHAR_H


23 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


24 
__BEGIN_NAMESPACE_C99


25 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

26 
__LDBL_REDIR_DECL
 (
w¥ötf
);

27 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

28 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
	g__REDIRECT
 \

33 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

38 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

39 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

42 
__END_NAMESPACE_C99


45 #ifde‡
__USE_ISOC99


46 
__BEGIN_NAMESPACE_C99


47 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

48 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

49 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

50 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

51 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

54 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

55 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

58 
__END_NAMESPACE_C99


61 #ifde‡
__USE_GNU


62 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

65 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


66 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

67 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

68 #i‡
__USE_FORTIFY_LEVEL
 > 1

69 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

70 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar2.h

19 #i‚de‡
_WCHAR_H


24 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

25 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

26 
size_t
 
__ns1
Ë
__THROW
;

27 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

28 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

29 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

30 
wmem˝y
);

31 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

32 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

33 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

34 
size_t
 
__ns1
), 
__wmem˝y_chk
)

35 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

38 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

39 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

40 
size_t
 
__n
))

42 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

44 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

45  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

46 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

48 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

49  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

50 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

52  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

53 
	}
}

56 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

57 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

58 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

59 c⁄° 
wch¨_t
 *
__s2
,

60 
size_t
 
__n
), 
wmemmove
);

61 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

62 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

63 
size_t
 
__n
, size_à
__ns1
), 
__wmemmove_chk
)

64 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

67 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

68 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
))

70 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

72 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

73  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

74 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

76 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

77  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

78 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

80  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

81 
	}
}

84 #ifde‡
__USE_GNU


85 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

86 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

87 
size_t
 
__ns1
Ë
__THROW
;

88 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

89 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

90 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
,

91 
size_t
 
__n
), 
wmemp˝y
);

92 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

93 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

94 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

95 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

96 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

99 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

100 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

101 
size_t
 
__n
))

103 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

105 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

106  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

107 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

109 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

110  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

111 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

113  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

114 
	}
}

118 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

119 
size_t
 
__ns
Ë
__THROW
;

120 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

121 
size_t
 
__n
), 
wmem£t
);

122 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

123 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

124 
size_t
 
__ns
), 
__wmem£t_chk
)

125 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

128 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

129 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
))

131 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

133 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

134  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

136 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

137  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

138 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

140  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

141 
	}
}

144 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

146 
size_t
 
__n
Ë
__THROW
;

147 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

148 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

149 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

151 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

152 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

154 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

155  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

156  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

157 
	}
}

160 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

161 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

162 
size_t
 
__de°Àn
Ë
__THROW
;

163 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
,

164 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

165 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
w˝˝y
);

167 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

168 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

170 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

171  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

172  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

173 
	}
}

176 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

177 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

178 
size_t
 
__de°Àn
Ë
__THROW
;

179 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

180 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

181 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

182 
size_t
 
__n
), 
wc¢˝y
);

183 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

184 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

185 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

186 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

187 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

190 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

191 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

192 
size_t
 
__n
))

194 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

196 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

197  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

198 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

199 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

200  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

201 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

203  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

204 
	}
}

207 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

208 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

209 
size_t
 
__de°Àn
Ë
__THROW
;

210 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

211 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

212 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

213 
size_t
 
__n
), 
w˝n˝y
);

214 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

215 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

216 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

217 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

218 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

221 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

222 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

223 
size_t
 
__n
))

225 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

227 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

228  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

229 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

230 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

231  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

232 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

234  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

235 
	}
}

238 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

239 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

240 
size_t
 
__de°Àn
Ë
__THROW
;

241 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

242 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

243 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

245 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

246 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

248 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

249  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

250  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

251 
	}
}

254 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

255 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

256 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

257 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

258 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

259 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

260 
size_t
 
__n
), 
wc¢ˇt
);

262 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

263 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

264 
size_t
 
__n
))

266 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

267  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

268 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

269  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

270 
	}
}

273 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

274 
__Êag
, 
size_t
 
__s_Àn
,

275 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

276 
__THROW
 ;

278 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

279 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

280 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

281 
sw¥ötf
);

283 #ifde‡
__va_¨g_∑ck


284 
__f‹tify_fun˘i⁄
 

285 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

286 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

288 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

289  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

290 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

291 
__fmt
, 
	`__va_¨g_∑ck
 ());

292  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

293 
	}
}

294 #ñi‡!
deföed
 
__˝lu•lus


296 
	#sw¥ötf
(
s
, 
n
, ...) \

297 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

298 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

299 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

300 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

303 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

304 
__Êag
, 
size_t
 
__s_Àn
,

305 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

306 
__gnuc_va_li°
 
__¨g
)

307 
__THROW
 ;

309 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

310 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

311 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

312 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

314 
__f‹tify_fun˘i⁄
 

315 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

316 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

318 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

319  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

320 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

321  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

322 
	}
}

325 #i‡
__USE_FORTIFY_LEVEL
 > 1

327 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

328 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

329 
__w¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

331 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

332 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

333 
__gnuc_va_li°
 
__≠
);

334 
__vw¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

335 
__gnuc_va_li°
 
__≠
);

337 #ifde‡
__va_¨g_∑ck


338 
__f‹tify_fun˘i⁄
 

339 
	$w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

341  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

342 
	}
}

344 
__f‹tify_fun˘i⁄
 

345 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

347  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

348 
	`__va_¨g_∑ck
 ());

349 
	}
}

350 #ñi‡!
deföed
 
__˝lu•lus


351 
	#w¥ötf
(...) \

352 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

353 
	#fw¥ötf
(
°ªam
, ...) \

354 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

357 
__f‹tify_fun˘i⁄
 

358 
	$vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

360  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

361 
	}
}

363 
__f‹tify_fun˘i⁄
 

364 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

365 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

367  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

368 
	}
}

372 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

373 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

374 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

375 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

376 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

377 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

378 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

379 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

380 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

383 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

384 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

386 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

388 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

389  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

390 
__n
, 
__°ªam
);

392 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

393  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

394 
__n
, 
__°ªam
);

396  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

397 
	}
}

399 #ifde‡
__USE_GNU


400 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

401 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

402 
__wur
;

403 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

404 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

405 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

406 
__wur
;

407 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

408 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

409 
__FILE
 *
__ª°ri˘
 
__°ªam
),

410 
__fgëws_u∆ocked_chk
)

411 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

414 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

415 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

417 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

419 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

420  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

421 
__n
, 
__°ªam
);

423 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

424  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

425 
__n
, 
__°ªam
);

427  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

428 
	}
}

432 
size_t
 
	$__w¸tomb_chk
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

433 
mb°©e_t
 *
__ª°ri˘
 
__p
,

434 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

435 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

436 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

437 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

439 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


440 
	`__NTH
 (
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

441 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

446 
	#__WCHAR_MB_LEN_MAX
 16

	)

447 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


450 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

451  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

452  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

453 
	}
}

456 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

457 c⁄° **
__ª°ri˘
 
__§c
,

458 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

459 
size_t
 
__d°Àn
Ë
__THROW
;

460 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

461 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

462 c⁄° **
__ª°ri˘
 
__§c
,

463 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

464 
mb§towcs
);

465 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

466 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

467 c⁄° **
__ª°ri˘
 
__§c
,

468 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

469 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

470 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

473 
__f‹tify_fun˘i⁄
 
size_t


474 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

475 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

477 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

479 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

480  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

481 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

483 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

484  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

485 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

487  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

488 
	}
}

491 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

492 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

493 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

494 
size_t
 
__d°Àn
Ë
__THROW
;

495 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

496 (*
__ª°ri˘
 
__d°
,

497 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

498 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

499 
wc§tombs
);

500 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

501 (*
__ª°ri˘
 
__d°
,

502 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

503 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

504 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

505 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

507 
__f‹tify_fun˘i⁄
 
size_t


508 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

509 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

511 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

513 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

514  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

516 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

517  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

519  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

520 
	}
}

523 #ifde‡
__USE_GNU


524 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

525 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

526 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

527 
size_t
 
__d°Àn
Ë
__THROW
;

528 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

529 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

530 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

531 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

532 
mb¢πowcs
);

533 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

534 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

535 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

536 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

537 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

538 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

541 
__f‹tify_fun˘i⁄
 
size_t


542 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

543 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

545 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

547 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

548  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

549 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

551 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

552  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

553 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

555  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

556 
	}
}

559 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

560 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

561 
size_t
 
__nwc
, size_à
__Àn
,

562 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

563 
__THROW
;

564 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

565 (*
__ª°ri˘
 
__d°
,

566 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

567 
size_t
 
__nwc
, size_à
__Àn
,

568 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

569 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

570 (*
__ª°ri˘
 
__d°
,

571 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

572 
size_t
 
__nwc
, size_à
__Àn
,

573 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

574 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

575 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

577 
__f‹tify_fun˘i⁄
 
size_t


578 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

579 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

581 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

583 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

584  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

585 
	`__bos
 (
__d°
));

587 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

588  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

589 
	`__bos
 (
__d°
));

591  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

592 
	}
}

	@/usr/include/linux/stddef.h

	@/usr/include/wctype.h

23 #i‚de‡
_WCTYPE_H


25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 #i‚de‡
__√ed_iswxxx


29 
	#_WCTYPE_H
 1

	)

32 
	#__√ed_wöt_t


	)

33 
	~<wch¨.h
>

37 #i‚de‡
WEOF


38 
	#WEOF
 (0xffffffffu)

	)

41 #unde‡
__√ed_iswxxx


46 #i‚de‡
__iswxxx_deföed


47 
	#__iswxxx_deföed
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 
	tw˘y≥_t
;

53 
	g__END_NAMESPACE_C99


55 #i‚de‡
_ISwbô


60 
	~<ídün.h
>

61 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


62 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

64 
	#_ISwbô
(
bô
) \

65 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

66 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

67 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

68 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

73 
	m__ISwuµî
 = 0,

74 
	m__ISwlowî
 = 1,

75 
	m__ISwÆpha
 = 2,

76 
	m__ISwdigô
 = 3,

77 
	m__ISwxdigô
 = 4,

78 
	m__ISw•a˚
 = 5,

79 
	m__ISw¥öt
 = 6,

80 
	m__ISwgøph
 = 7,

81 
	m__ISwbœnk
 = 8,

82 
	m__ISw˙ål
 = 9,

83 
	m__ISwpun˘
 = 10,

84 
	m__ISwÆnum
 = 11,

86 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

87 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

88 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

89 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

90 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

91 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

92 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

93 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

94 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

95 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

96 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

97 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

124 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

128 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

133 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

136 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

141 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

146 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

161 #ifde‡
__USE_ISOC99


162 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

175 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 c⁄° 
	t__öt32_t
 *
	tw˘øns_t
;

187 
__END_NAMESPACE_C99


188 #ifde‡
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

192 
__BEGIN_NAMESPACE_C99


194 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

197 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifde‡
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 
w˘øns_t
 
	$w˘øns
 (c⁄° *
__¥›îty
Ë
__THROW
;

221 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifde‡
__USE_XOPEN2K8


226 
	~<xloˇÀ.h
>

230 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

236 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

239 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

243 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

247 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

252 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

255 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

260 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

265 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
w˘y≥_t
 
	$w˘y≥_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

285 
__THROW
;

289 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

290 
__THROW
;

298 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

301 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

305 
w˘øns_t
 
	$w˘øns_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

306 
__THROW
;

309 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

310 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

314 
__END_DECLS


	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@/usr/include/asm-generic/int-ll64.h

8 #i‚de‡
_ASM_GENERIC_INT_LL64_H


9 
	#_ASM_GENERIC_INT_LL64_H


	)

11 
	~<asm/bô•îl⁄g.h
>

13 #i‚de‡
__ASSEMBLY__


19 
__sig√d__
 
	t__s8
;

20 
	t__u8
;

22 
__sig√d__
 
	t__s16
;

23 
	t__u16
;

25 
__sig√d__
 
	t__s32
;

26 
	t__u32
;

28 #ifde‡
__GNUC__


29 
__exãnsi⁄__
 
__sig√d__
 
	t__s64
;

30 
__exãnsi⁄__
 
	t__u64
;

32 
__sig√d__
 
	t__s64
;

33 
	t__u64
;

	@/usr/include/asm-generic/posix_types.h

1 #i‚de‡
__ASM_GENERIC_POSIX_TYPES_H


2 
	#__ASM_GENERIC_POSIX_TYPES_H


	)

4 
	~<asm/bô•îl⁄g.h
>

13 #i‚de‡
__kî√l_l⁄g_t


14 
	t__kî√l_l⁄g_t
;

15 
	t__kî√l_ul⁄g_t
;

18 #i‚de‡
__kî√l_öo_t


19 
__kî√l_ul⁄g_t
 
	t__kî√l_öo_t
;

22 #i‚de‡
__kî√l_mode_t


23 
	t__kî√l_mode_t
;

26 #i‚de‡
__kî√l_pid_t


27 
	t__kî√l_pid_t
;

30 #i‚de‡
__kî√l_ùc_pid_t


31 
	t__kî√l_ùc_pid_t
;

34 #i‚de‡
__kî√l_uid_t


35 
	t__kî√l_uid_t
;

36 
	t__kî√l_gid_t
;

39 #i‚de‡
__kî√l_su£c⁄ds_t


40 
__kî√l_l⁄g_t
 
	t__kî√l_su£c⁄ds_t
;

43 #i‚de‡
__kî√l_daddr_t


44 
	t__kî√l_daddr_t
;

47 #i‚de‡
__kî√l_uid32_t


48 
	t__kî√l_uid32_t
;

49 
	t__kî√l_gid32_t
;

52 #i‚de‡
__kî√l_ﬁd_uid_t


53 
__kî√l_uid_t
 
	t__kî√l_ﬁd_uid_t
;

54 
__kî√l_gid_t
 
	t__kî√l_ﬁd_gid_t
;

57 #i‚de‡
__kî√l_ﬁd_dev_t


58 
	t__kî√l_ﬁd_dev_t
;

65 #i‚de‡
__kî√l_size_t


66 #i‡
__BITS_PER_LONG
 != 64

67 
	t__kî√l_size_t
;

68 
	t__kî√l_ssize_t
;

69 
	t__kî√l_±rdiff_t
;

71 
__kî√l_ul⁄g_t
 
	t__kî√l_size_t
;

72 
__kî√l_l⁄g_t
 
	t__kî√l_ssize_t
;

73 
__kî√l_l⁄g_t
 
	t__kî√l_±rdiff_t
;

77 #i‚de‡
__kî√l_fsid_t


79 
	mvÆ
[2];

80 } 
	t__kî√l_fsid_t
;

86 
__kî√l_l⁄g_t
 
	t__kî√l_off_t
;

87 
	t__kî√l_loff_t
;

88 
__kî√l_l⁄g_t
 
	t__kî√l_time_t
;

89 
__kî√l_l⁄g_t
 
	t__kî√l_˛ock_t
;

90 
	t__kî√l_timî_t
;

91 
	t__kî√l_˛ockid_t
;

92 * 
	t__kî√l_ˇddr_t
;

93 
	t__kî√l_uid16_t
;

94 
	t__kî√l_gid16_t
;

	@/usr/include/asm/bitsperlong.h

1 #i‚de‡
_ASM_RISCV_BITSPERLONG_H


2 
	#_ASM_RISCV_BITSPERLONG_H


	)

4 
	#__BITS_PER_LONG
 
_RISCV_SZLONG


	)

6 
	~<asm-gíîic/bô•îl⁄g.h
>

	@/usr/include/asm-generic/bitsperlong.h

1 #i‚de‡
__ASM_GENERIC_BITS_PER_LONG


2 
	#__ASM_GENERIC_BITS_PER_LONG


	)

11 #i‚de‡
__BITS_PER_LONG


12 
	#__BITS_PER_LONG
 32

	)

	@
1
.
1
/usr/include
159
4234
/home/iybang/dlmalloc/src/.#os.c
/home/iybang/dlmalloc/src/assert.h
/home/iybang/dlmalloc/src/check.h
/home/iybang/dlmalloc/src/chunk.c
/home/iybang/dlmalloc/src/chunk.h
/home/iybang/dlmalloc/src/config.h
/home/iybang/dlmalloc/src/debug.c
/home/iybang/dlmalloc/src/debug.h
/home/iybang/dlmalloc/src/error.c
/home/iybang/dlmalloc/src/error.h
/home/iybang/dlmalloc/src/heap-default.c
/home/iybang/dlmalloc/src/heap-user.c
/home/iybang/dlmalloc/src/heap.c
/home/iybang/dlmalloc/src/heap.h
/home/iybang/dlmalloc/src/init.c
/home/iybang/dlmalloc/src/init.h
/home/iybang/dlmalloc/src/inspect.c
/home/iybang/dlmalloc/src/lock-nolock.h
/home/iybang/dlmalloc/src/lock-pthread.c
/home/iybang/dlmalloc/src/lock-pthread.h
/home/iybang/dlmalloc/src/lock-recursive.c
/home/iybang/dlmalloc/src/lock-recursive.h
/home/iybang/dlmalloc/src/lock-spin.c
/home/iybang/dlmalloc/src/lock-spin.h
/home/iybang/dlmalloc/src/lock.c
/home/iybang/dlmalloc/src/lock.h
/home/iybang/dlmalloc/src/log.c
/home/iybang/dlmalloc/src/log.h
/home/iybang/dlmalloc/src/os.c
/home/iybang/dlmalloc/src/os.h
/home/iybang/dlmalloc/src/redblack.c
/home/iybang/dlmalloc/src/redblack.h
/home/iybang/dlmalloc/src/sbrk.c
/home/iybang/dlmalloc/src/sbrk.h
/home/iybang/dlmalloc/src/segment.c
/home/iybang/dlmalloc/src/segment.h
/home/iybang/dlmalloc/src/state.c
/home/iybang/dlmalloc/src/state.h
/home/iybang/dlmalloc/src/test.c
/home/iybang/dlmalloc/src/tmte.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/malloc.h
/usr/include/pthread.h
/usr/include/sched.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/sys/auxv.h
/usr/include/sys/mman.h
/usr/include/sys/prctl.h
/usr/include/sys/types.h
/usr/include/time.h
/usr/include/unistd.h
assert.h
check.h
chunk.h
config.h
debug.h
error.h
heap.h
init.h
lock-nolock.h
lock-pthread.c
lock-pthread.h
lock-recursive.c
lock-recursive.h
lock-spin.c
lock-spin.h
lock.h
log.h
os.h
redblack.h
sbrk.h
segment.h
state.h
tmte.h
/usr/include/alloca.h
/usr/include/bits/auxv.h
/usr/include/bits/confname.h
/usr/include/bits/environments.h
/usr/include/bits/errno.h
/usr/include/bits/fcntl.h
/usr/include/bits/fcntl2.h
/usr/include/bits/hwcap.h
/usr/include/bits/mman.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/sched.h
/usr/include/bits/setjmp.h
/usr/include/bits/stat.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-bsearch.h
/usr/include/bits/stdlib-float.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/bits/unistd.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wchar.h
/usr/include/bits/wordsize.h
/usr/include/elf.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/linux/prctl.h
/usr/include/sys/cdefs.h
/usr/include/sys/select.h
/usr/include/sys/sysmacros.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/bits/byteswap.h
/usr/include/bits/endian.h
/usr/include/bits/fcntl-linux.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/mman-linux.h
/usr/include/bits/select.h
/usr/include/bits/select2.h
/usr/include/bits/sigset.h
/usr/include/bits/timex.h
/usr/include/bits/typesizes.h
/usr/include/ctype.h
/usr/include/gnu/stubs.h
/usr/include/linux/errno.h
/usr/include/linux/types.h
/usr/include/stdc-predef.h
/usr/include/asm/errno.h
/usr/include/asm/types.h
/usr/include/bits/byteswap-16.h
/usr/include/bits/uio.h
/usr/include/gconv.h
/usr/include/gnu/stubs-32.h
/usr/include/gnu/stubs-64.h
/usr/include/gnu/stubs-x32.h
/usr/include/linux/posix_types.h
/usr/include/wchar.h
/usr/include/asm-generic/errno.h
/usr/include/asm-generic/types.h
/usr/include/asm/posix_types.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar2.h
/usr/include/linux/stddef.h
/usr/include/wctype.h
/usr/include/asm-generic/errno-base.h
/usr/include/asm-generic/int-ll64.h
/usr/include/asm-generic/posix_types.h
/usr/include/asm/bitsperlong.h
/usr/include/asm-generic/bitsperlong.h
